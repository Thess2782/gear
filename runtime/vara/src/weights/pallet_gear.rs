// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 903_000 picoseconds.
        Weight::from_parts(943_000, 0)
            // Standard Error: 892
            .saturating_add(Weight::from_parts(252_241, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_217_000 picoseconds.
        Weight::from_parts(3_272_000, 3577)
            // Standard Error: 1_108
            .saturating_add(Weight::from_parts(677_151, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_234_000 picoseconds.
        Weight::from_parts(71_468_130, 0)
            // Standard Error: 11_043
            .saturating_add(Weight::from_parts(2_686_211, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `853`
        //  Estimated: `23826`
        // Minimum execution time: 60_441_000 picoseconds.
        Weight::from_parts(62_355_000, 23826)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `925`
        //  Estimated: `21378`
        // Minimum execution time: 56_092_000 picoseconds.
        Weight::from_parts(57_602_000, 21378)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 63_562_000 picoseconds.
        Weight::from_parts(64_377_000, 5270)
            // Standard Error: 38_464
            .saturating_add(Weight::from_parts(55_427_555, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `790`
        //  Estimated: `39947`
        // Minimum execution time: 65_619_000 picoseconds.
        Weight::from_parts(97_415_727, 39947)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_384, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `273`
        //  Estimated: `34806`
        // Minimum execution time: 10_090_551_000 picoseconds.
        Weight::from_parts(248_954_884, 34806)
            // Standard Error: 156_681
            .saturating_add(Weight::from_parts(56_807_890, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_326, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 55_542_000 picoseconds.
        Weight::from_parts(25_846_113, 23860)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_188, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1016`
        //  Estimated: `42569`
        // Minimum execution time: 83_080_000 picoseconds.
        Weight::from_parts(51_456_724, 42569)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_206, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1033`
        //  Estimated: `85373`
        // Minimum execution time: 316_509_000 picoseconds.
        Weight::from_parts(329_151_508, 85373)
            // Standard Error: 1_291
            .saturating_add(Weight::from_parts(2_679, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1033`
        //  Estimated: `85240`
        // Minimum execution time: 331_216_000 picoseconds.
        Weight::from_parts(345_355_700, 85240)
            // Standard Error: 1_405
            .saturating_add(Weight::from_parts(654, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 46_720_000 picoseconds.
        Weight::from_parts(47_080_000, 3899)
            // Standard Error: 27_990
            .saturating_add(Weight::from_parts(54_129_631, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_196_000 picoseconds.
        Weight::from_parts(108_217_434, 0)
            // Standard Error: 338_134
            .saturating_add(Weight::from_parts(149_572_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 234_206_000 picoseconds.
        Weight::from_parts(270_976_063, 0)
            // Standard Error: 400_749
            .saturating_add(Weight::from_parts(153_573_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_771_000 picoseconds.
        Weight::from_parts(95_153_944, 0)
            // Standard Error: 11_133
            .saturating_add(Weight::from_parts(4_128_444, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 140_384_000 picoseconds.
        Weight::from_parts(209_389_291, 0)
            // Standard Error: 35_852
            .saturating_add(Weight::from_parts(4_261_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_067_000 picoseconds.
        Weight::from_parts(131_841_538, 0)
            // Standard Error: 461_007
            .saturating_add(Weight::from_parts(221_616_766, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_289_000 picoseconds.
        Weight::from_parts(87_903_902, 0)
            // Standard Error: 364_890
            .saturating_add(Weight::from_parts(220_322_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_917_000 picoseconds.
        Weight::from_parts(93_680_216, 0)
            // Standard Error: 350_438
            .saturating_add(Weight::from_parts(220_133_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_629_000 picoseconds.
        Weight::from_parts(110_578_112, 0)
            // Standard Error: 279_612
            .saturating_add(Weight::from_parts(217_028_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_691_000 picoseconds.
        Weight::from_parts(90_507_006, 0)
            // Standard Error: 322_174
            .saturating_add(Weight::from_parts(219_589_912, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_428_000 picoseconds.
        Weight::from_parts(96_540_746, 0)
            // Standard Error: 344_449
            .saturating_add(Weight::from_parts(217_887_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_780_000 picoseconds.
        Weight::from_parts(89_065_915, 0)
            // Standard Error: 328_843
            .saturating_add(Weight::from_parts(219_901_999, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_316_000 picoseconds.
        Weight::from_parts(93_257_518, 0)
            // Standard Error: 389_847
            .saturating_add(Weight::from_parts(218_507_445, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_143_000 picoseconds.
        Weight::from_parts(81_827_226, 0)
            // Standard Error: 288_954
            .saturating_add(Weight::from_parts(213_780_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 798_136_000 picoseconds.
        Weight::from_parts(882_776_586, 0)
            // Standard Error: 578_631
            .saturating_add(Weight::from_parts(302_102_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_025_576_000 picoseconds.
        Weight::from_parts(1_040_657_000, 0)
            // Standard Error: 58_442
            .saturating_add(Weight::from_parts(13_304_594, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_744_000 picoseconds.
        Weight::from_parts(106_869_001, 0)
            // Standard Error: 294_291
            .saturating_add(Weight::from_parts(217_524_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_088_000 picoseconds.
        Weight::from_parts(96_127_697, 0)
            // Standard Error: 299_951
            .saturating_add(Weight::from_parts(212_441_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_653_000 picoseconds.
        Weight::from_parts(115_834_395, 0)
            // Standard Error: 370_399
            .saturating_add(Weight::from_parts(280_552_534, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_645_000 picoseconds.
        Weight::from_parts(145_579_687, 0)
            // Standard Error: 633_891
            .saturating_add(Weight::from_parts(424_845_378, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 511_332_000 picoseconds.
        Weight::from_parts(515_806_000, 0)
            // Standard Error: 57_837
            .saturating_add(Weight::from_parts(21_518_551, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_047_000 picoseconds.
        Weight::from_parts(123_561_639, 0)
            // Standard Error: 544_890
            .saturating_add(Weight::from_parts(432_541_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 506_367_000 picoseconds.
        Weight::from_parts(511_674_000, 0)
            // Standard Error: 48_194
            .saturating_add(Weight::from_parts(21_581_526, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 737_881_000 picoseconds.
        Weight::from_parts(815_602_574, 0)
            // Standard Error: 676_471
            .saturating_add(Weight::from_parts(456_089_673, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 752_981_000 picoseconds.
        Weight::from_parts(939_346_273, 0)
            // Standard Error: 721_079
            .saturating_add(Weight::from_parts(446_088_030, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_060_000 picoseconds.
        Weight::from_parts(93_836_463, 0)
            // Standard Error: 275_400
            .saturating_add(Weight::from_parts(226_399_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_455_894_000 picoseconds.
        Weight::from_parts(4_611_351_748, 0)
            // Standard Error: 1_059_084
            .saturating_add(Weight::from_parts(325_900_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_037_000 picoseconds.
        Weight::from_parts(567_546_000, 0)
            // Standard Error: 47_115
            .saturating_add(Weight::from_parts(31_074_196, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_480_432_000 picoseconds.
        Weight::from_parts(4_646_695_202, 0)
            // Standard Error: 1_023_463
            .saturating_add(Weight::from_parts(384_108_165, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_473_964_000 picoseconds.
        Weight::from_parts(4_653_831_590, 0)
            // Standard Error: 792_738
            .saturating_add(Weight::from_parts(392_506_039, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 256_319_000 picoseconds.
        Weight::from_parts(290_873_058, 0)
            // Standard Error: 602_165
            .saturating_add(Weight::from_parts(447_290_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 676_116_000 picoseconds.
        Weight::from_parts(684_484_000, 0)
            // Standard Error: 52_914
            .saturating_add(Weight::from_parts(21_772_858, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_697_692_000 picoseconds.
        Weight::from_parts(4_795_632_722, 0)
            // Standard Error: 907_222
            .saturating_add(Weight::from_parts(405_304_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_693_000 picoseconds.
        Weight::from_parts(90_442_146, 0)
            // Standard Error: 289_064
            .saturating_add(Weight::from_parts(23_663_853, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_142_000 picoseconds.
        Weight::from_parts(99_049_241, 0)
            // Standard Error: 1_908
            .saturating_add(Weight::from_parts(426_412, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_363_000 picoseconds.
        Weight::from_parts(91_222_132, 0)
            // Standard Error: 291_669
            .saturating_add(Weight::from_parts(25_525_567, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_287_000 picoseconds.
        Weight::from_parts(94_417_735, 0)
            // Standard Error: 1_469
            .saturating_add(Weight::from_parts(434_223, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_281_000 picoseconds.
        Weight::from_parts(92_996_822, 0)
            // Standard Error: 304_984
            .saturating_add(Weight::from_parts(22_555_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_813_000 picoseconds.
        Weight::from_parts(95_284_144, 0)
            // Standard Error: 295_848
            .saturating_add(Weight::from_parts(20_981_155, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_866_000 picoseconds.
        Weight::from_parts(142_714_365, 0)
            // Standard Error: 441_134
            .saturating_add(Weight::from_parts(305_558_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_219_000 picoseconds.
        Weight::from_parts(104_884_000, 0)
            // Standard Error: 2_550
            .saturating_add(Weight::from_parts(678_654, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 740_720_000 picoseconds.
        Weight::from_parts(810_351_248, 0)
            // Standard Error: 4_944_389
            .saturating_add(Weight::from_parts(78_960_951, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 732_385_000 picoseconds.
        Weight::from_parts(801_003_434, 0)
            // Standard Error: 4_343_852
            .saturating_add(Weight::from_parts(17_311_065, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_309_000 picoseconds.
        Weight::from_parts(99_590_120, 0)
            // Standard Error: 299_536
            .saturating_add(Weight::from_parts(12_698_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_974_000 picoseconds.
        Weight::from_parts(99_164_857, 0)
            // Standard Error: 988
            .saturating_add(Weight::from_parts(429_628, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_511_000 picoseconds.
        Weight::from_parts(99_237_379, 0)
            // Standard Error: 331_891
            .saturating_add(Weight::from_parts(16_192_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_881_000 picoseconds.
        Weight::from_parts(95_289_543, 0)
            // Standard Error: 1_635
            .saturating_add(Weight::from_parts(434_234, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_573_000 picoseconds.
        Weight::from_parts(79_854_910, 0)
            // Standard Error: 341_419
            .saturating_add(Weight::from_parts(219_423_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_021_000 picoseconds.
        Weight::from_parts(95_484_592, 0)
            // Standard Error: 307_654
            .saturating_add(Weight::from_parts(215_606_347, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 765_193_000 picoseconds.
        Weight::from_parts(873_424_467, 0)
            // Standard Error: 545_479
            .saturating_add(Weight::from_parts(236_494_097, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 819_838_000 picoseconds.
        Weight::from_parts(885_462_924, 0)
            // Standard Error: 2_975
            .saturating_add(Weight::from_parts(139_855, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_337_830_000 picoseconds.
        Weight::from_parts(5_459_244_730, 0)
            // Standard Error: 674_973
            .saturating_add(Weight::from_parts(242_618_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_409_375_000 picoseconds.
        Weight::from_parts(5_608_009_493, 0)
            // Standard Error: 12_830
            .saturating_add(Weight::from_parts(13_820_760, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_361_000 picoseconds.
        Weight::from_parts(121_913_909, 0)
            // Standard Error: 447_037
            .saturating_add(Weight::from_parts(228_072_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 230_378_000 picoseconds.
        Weight::from_parts(232_503_000, 0)
            // Standard Error: 55_608
            .saturating_add(Weight::from_parts(26_004_431, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_687_000 picoseconds.
        Weight::from_parts(115_222_328, 0)
            // Standard Error: 518_624
            .saturating_add(Weight::from_parts(286_017_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_935_000 picoseconds.
        Weight::from_parts(109_712_780, 0)
            // Standard Error: 258_476
            .saturating_add(Weight::from_parts(214_571_643, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_135_000 picoseconds.
        Weight::from_parts(94_224_077, 0)
            // Standard Error: 287_235
            .saturating_add(Weight::from_parts(25_682_722, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_657_000 picoseconds.
        Weight::from_parts(89_867_269, 0)
            // Standard Error: 259_213
            .saturating_add(Weight::from_parts(15_898_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_631_000 picoseconds.
        Weight::from_parts(92_555_869, 0)
            // Standard Error: 277_435
            .saturating_add(Weight::from_parts(18_321_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_159_000 picoseconds.
        Weight::from_parts(92_809_787, 0)
            // Standard Error: 301_189
            .saturating_add(Weight::from_parts(13_666_812, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_766_000 picoseconds.
        Weight::from_parts(90_168_075, 0)
            // Standard Error: 257_224
            .saturating_add(Weight::from_parts(14_737_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 140_326_000 picoseconds.
        Weight::from_parts(205_278_073, 0)
            // Standard Error: 475_113
            .saturating_add(Weight::from_parts(318_541_043, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_658_000 picoseconds.
        Weight::from_parts(158_212_498, 0)
            // Standard Error: 547_721
            .saturating_add(Weight::from_parts(508_193_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_887_421_000 picoseconds.
        Weight::from_parts(286_928_621, 0)
            // Standard Error: 121_356
            .saturating_add(Weight::from_parts(21_468_827, 0).saturating_mul(p.into()))
            // Standard Error: 121_418
            .saturating_add(Weight::from_parts(174_459_930, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_109_000 picoseconds.
        Weight::from_parts(154_831_985, 0)
            // Standard Error: 504_193
            .saturating_add(Weight::from_parts(512_003_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_510_875_000 picoseconds.
        Weight::from_parts(46_097_684_000, 0)
            // Standard Error: 270_713
            .saturating_add(Weight::from_parts(7_222_068, 0).saturating_mul(p.into()))
            // Standard Error: 270_699
            .saturating_add(Weight::from_parts(160_073_739, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_844_000 picoseconds.
        Weight::from_parts(104_362_817, 0)
            // Standard Error: 31_834
            .saturating_add(Weight::from_parts(3_881_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 88_660_000 picoseconds.
        Weight::from_parts(135_761_087, 1131)
            // Standard Error: 10_289
            .saturating_add(Weight::from_parts(12_171_496, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 85_855_000 picoseconds.
        Weight::from_parts(87_266_000, 1131)
            // Standard Error: 32_659
            .saturating_add(Weight::from_parts(37_058_914, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_281_576_000 picoseconds.
        Weight::from_parts(6_079_378_538, 5069931)
            // Standard Error: 60_142
            .saturating_add(Weight::from_parts(38_143_078, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 87_542_000 picoseconds.
        Weight::from_parts(88_585_000, 1939)
            // Standard Error: 32_577
            .saturating_add(Weight::from_parts(45_952_031, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 93_370_000 picoseconds.
        Weight::from_parts(92_531_814, 1131)
            // Standard Error: 70_179
            .saturating_add(Weight::from_parts(36_618_615, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 788_439_000 picoseconds.
        Weight::from_parts(820_190_498, 1496)
            // Standard Error: 348_397
            .saturating_add(Weight::from_parts(45_618_789, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_161_063_000 picoseconds.
        Weight::from_parts(1_170_607_165, 317931)
            // Standard Error: 368_246
            .saturating_add(Weight::from_parts(51_386_602, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_324_441_000 picoseconds.
        Weight::from_parts(4_353_041_487, 0)
            // Standard Error: 11_490
            .saturating_add(Weight::from_parts(3_312_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_325_334_000 picoseconds.
        Weight::from_parts(4_358_180_381, 0)
            // Standard Error: 11_591
            .saturating_add(Weight::from_parts(3_325_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_062_038_000 picoseconds.
        Weight::from_parts(11_170_326_292, 0)
            // Standard Error: 263_520
            .saturating_add(Weight::from_parts(14_654_736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_015_544_000 picoseconds.
        Weight::from_parts(10_855_042_743, 0)
            // Standard Error: 253_368
            .saturating_add(Weight::from_parts(10_036_183, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_210_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 7_790
            .saturating_add(Weight::from_parts(3_848_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_150_000 picoseconds.
        Weight::from_parts(1_630_881, 0)
            // Standard Error: 12_442
            .saturating_add(Weight::from_parts(3_214_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_111_000 picoseconds.
        Weight::from_parts(2_978_652, 0)
            // Standard Error: 1_742
            .saturating_add(Weight::from_parts(1_591_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(2_221_000, 0)
            // Standard Error: 10_625
            .saturating_add(Weight::from_parts(2_953_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_154_000 picoseconds.
        Weight::from_parts(8_198_333, 0)
            // Standard Error: 23_088
            .saturating_add(Weight::from_parts(4_827_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_840_000 picoseconds.
        Weight::from_parts(5_914_854, 0)
            // Standard Error: 1_200
            .saturating_add(Weight::from_parts(177_639, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_342_000 picoseconds.
        Weight::from_parts(5_123_508, 0)
            // Standard Error: 9_413
            .saturating_add(Weight::from_parts(2_638_513, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_638_513 -
            2_432_340, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_274_000 picoseconds.
        Weight::from_parts(5_907_367, 0)
            // Standard Error: 13_539
            .saturating_add(Weight::from_parts(2_432_340, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_606_000 picoseconds.
        Weight::from_parts(21_189_212, 0)
            // Standard Error: 34_228
            .saturating_add(Weight::from_parts(9_954_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_877_000 picoseconds.
        Weight::from_parts(2_493_837, 0)
            // Standard Error: 6_910
            .saturating_add(Weight::from_parts(1_298_566, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_285_000 picoseconds.
        Weight::from_parts(5_680_223, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_196_000 picoseconds.
        Weight::from_parts(1_699_397, 0)
            // Standard Error: 3_604
            .saturating_add(Weight::from_parts(286_589, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_183_000 picoseconds.
        Weight::from_parts(2_220_000, 0)
            // Standard Error: 4_606
            .saturating_add(Weight::from_parts(767_549, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_197_000 picoseconds.
        Weight::from_parts(2_353_000, 0)
            // Standard Error: 7_354
            .saturating_add(Weight::from_parts(820_328, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_828_000 picoseconds.
        Weight::from_parts(2_514_477, 0)
            // Standard Error: 7_751
            .saturating_add(Weight::from_parts(832_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_944_000 picoseconds.
        Weight::from_parts(6_086_000, 0)
            // Standard Error: 8_032
            .saturating_add(Weight::from_parts(1_453_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_971_000 picoseconds.
        Weight::from_parts(717_548, 0)
            // Standard Error: 12_156
            .saturating_add(Weight::from_parts(7_606_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_133_000 picoseconds.
        Weight::from_parts(2_277_000, 0)
            // Standard Error: 8_003
            .saturating_add(Weight::from_parts(3_519_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_166_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 5_675
            .saturating_add(Weight::from_parts(3_254_651, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_214_000, 0)
            // Standard Error: 5_937
            .saturating_add(Weight::from_parts(3_230_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_251_000, 0)
            // Standard Error: 4_347
            .saturating_add(Weight::from_parts(2_726_615, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_177_000 picoseconds.
        Weight::from_parts(2_249_000, 0)
            // Standard Error: 3_923
            .saturating_add(Weight::from_parts(647_713, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_208_000 picoseconds.
        Weight::from_parts(1_533_370, 0)
            // Standard Error: 3_741
            .saturating_add(Weight::from_parts(434_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_187_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 10_115
            .saturating_add(Weight::from_parts(1_939_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_165_000 picoseconds.
        Weight::from_parts(2_257_000, 0)
            // Standard Error: 10_645
            .saturating_add(Weight::from_parts(1_337_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_196_000 picoseconds.
        Weight::from_parts(407_335, 0)
            // Standard Error: 5_861
            .saturating_add(Weight::from_parts(454_238, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_537_215, 0)
            // Standard Error: 2_172
            .saturating_add(Weight::from_parts(194_721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_083_000 picoseconds.
        Weight::from_parts(2_470_482, 0)
            // Standard Error: 2_503
            .saturating_add(Weight::from_parts(206_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_134_000 picoseconds.
        Weight::from_parts(2_185_000, 0)
            // Standard Error: 8_750
            .saturating_add(Weight::from_parts(1_915_879, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_084_000 picoseconds.
        Weight::from_parts(2_190_000, 0)
            // Standard Error: 9_915
            .saturating_add(Weight::from_parts(1_270_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_127_000 picoseconds.
        Weight::from_parts(2_202_000, 0)
            // Standard Error: 9_151
            .saturating_add(Weight::from_parts(1_968_168, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_139_000 picoseconds.
        Weight::from_parts(2_249_000, 0)
            // Standard Error: 8_710
            .saturating_add(Weight::from_parts(1_258_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_148_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 8_582
            .saturating_add(Weight::from_parts(1_922_097, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_282_000, 0)
            // Standard Error: 8_041
            .saturating_add(Weight::from_parts(1_297_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_130_000 picoseconds.
        Weight::from_parts(2_237_000, 0)
            // Standard Error: 8_652
            .saturating_add(Weight::from_parts(1_906_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_269_000, 0)
            // Standard Error: 9_281
            .saturating_add(Weight::from_parts(1_289_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(2_247_000, 0)
            // Standard Error: 8_566
            .saturating_add(Weight::from_parts(1_919_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_056_000 picoseconds.
        Weight::from_parts(2_195_000, 0)
            // Standard Error: 7_243
            .saturating_add(Weight::from_parts(1_231_159, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_252_000 picoseconds.
        Weight::from_parts(2_299_000, 0)
            // Standard Error: 10_646
            .saturating_add(Weight::from_parts(1_971_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(2_293_000, 0)
            // Standard Error: 8_556
            .saturating_add(Weight::from_parts(1_316_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_206_000 picoseconds.
        Weight::from_parts(2_275_000, 0)
            // Standard Error: 9_115
            .saturating_add(Weight::from_parts(1_958_299, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_219_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 7_242
            .saturating_add(Weight::from_parts(1_236_184, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_159_000 picoseconds.
        Weight::from_parts(2_241_000, 0)
            // Standard Error: 9_445
            .saturating_add(Weight::from_parts(1_891_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_138_000 picoseconds.
        Weight::from_parts(2_205_000, 0)
            // Standard Error: 7_655
            .saturating_add(Weight::from_parts(1_236_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_186_000 picoseconds.
        Weight::from_parts(2_239_000, 0)
            // Standard Error: 9_378
            .saturating_add(Weight::from_parts(1_937_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_166_000 picoseconds.
        Weight::from_parts(2_202_000, 0)
            // Standard Error: 8_086
            .saturating_add(Weight::from_parts(1_367_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_195_000 picoseconds.
        Weight::from_parts(2_228_000, 0)
            // Standard Error: 8_288
            .saturating_add(Weight::from_parts(1_913_811, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(2_236_000, 0)
            // Standard Error: 7_539
            .saturating_add(Weight::from_parts(1_234_868, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_301_000, 0)
            // Standard Error: 9_288
            .saturating_add(Weight::from_parts(1_410_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_044_000 picoseconds.
        Weight::from_parts(2_157_000, 0)
            // Standard Error: 5_749
            .saturating_add(Weight::from_parts(741_107, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_136_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 8_593
            .saturating_add(Weight::from_parts(1_427_977, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_118_000 picoseconds.
        Weight::from_parts(2_212_000, 0)
            // Standard Error: 4_813
            .saturating_add(Weight::from_parts(750_070, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 9_192
            .saturating_add(Weight::from_parts(1_881_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_121_000 picoseconds.
        Weight::from_parts(2_185_000, 0)
            // Standard Error: 8_014
            .saturating_add(Weight::from_parts(1_345_349, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(10_949_566, 0)
            // Standard Error: 30_237
            .saturating_add(Weight::from_parts(2_213_868, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(3_780_028, 0)
            // Standard Error: 15_041
            .saturating_add(Weight::from_parts(2_320_566, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_108_000 picoseconds.
        Weight::from_parts(5_377_318, 0)
            // Standard Error: 25_384
            .saturating_add(Weight::from_parts(2_684_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_149_000 picoseconds.
        Weight::from_parts(3_633_667, 0)
            // Standard Error: 17_942
            .saturating_add(Weight::from_parts(2_320_908, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_231_000 picoseconds.
        Weight::from_parts(12_693_388, 0)
            // Standard Error: 54_584
            .saturating_add(Weight::from_parts(8_707_205, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(8_475_225, 0)
            // Standard Error: 54_410
            .saturating_add(Weight::from_parts(7_148_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_159_000 picoseconds.
        Weight::from_parts(6_629_956, 0)
            // Standard Error: 28_039
            .saturating_add(Weight::from_parts(2_671_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(3_067_079, 0)
            // Standard Error: 18_461
            .saturating_add(Weight::from_parts(2_372_774, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_217_000, 0)
            // Standard Error: 9_421
            .saturating_add(Weight::from_parts(1_403_129, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_226_000, 0)
            // Standard Error: 5_285
            .saturating_add(Weight::from_parts(734_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 6_432
            .saturating_add(Weight::from_parts(1_380_374, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_138_000 picoseconds.
        Weight::from_parts(2_221_000, 0)
            // Standard Error: 4_693
            .saturating_add(Weight::from_parts(683_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_186_000 picoseconds.
        Weight::from_parts(2_320_000, 0)
            // Standard Error: 7_815
            .saturating_add(Weight::from_parts(1_363_217, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_179_000 picoseconds.
        Weight::from_parts(2_226_000, 0)
            // Standard Error: 5_490
            .saturating_add(Weight::from_parts(687_531, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(2_221_000, 0)
            // Standard Error: 8_329
            .saturating_add(Weight::from_parts(1_149_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_123_000 picoseconds.
        Weight::from_parts(2_202_000, 0)
            // Standard Error: 8_066
            .saturating_add(Weight::from_parts(726_829, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(2_218_000, 0)
            // Standard Error: 7_272
            .saturating_add(Weight::from_parts(1_257_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_146_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 4_067
            .saturating_add(Weight::from_parts(600_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_169_000 picoseconds.
        Weight::from_parts(2_228_000, 0)
            // Standard Error: 8_231
            .saturating_add(Weight::from_parts(1_136_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_186_000, 0)
            // Standard Error: 4_509
            .saturating_add(Weight::from_parts(610_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038_000 picoseconds.
        Weight::from_parts(2_174_000, 0)
            // Standard Error: 7_414
            .saturating_add(Weight::from_parts(1_129_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_165_000 picoseconds.
        Weight::from_parts(2_201_000, 0)
            // Standard Error: 4_360
            .saturating_add(Weight::from_parts(591_380, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_089_000 picoseconds.
        Weight::from_parts(2_140_000, 0)
            // Standard Error: 7_639
            .saturating_add(Weight::from_parts(1_204_980, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_121_000 picoseconds.
        Weight::from_parts(2_206_000, 0)
            // Standard Error: 4_990
            .saturating_add(Weight::from_parts(634_137, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 903_000 picoseconds.
        Weight::from_parts(943_000, 0)
            // Standard Error: 892
            .saturating_add(Weight::from_parts(252_241, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_217_000 picoseconds.
        Weight::from_parts(3_272_000, 3577)
            // Standard Error: 1_108
            .saturating_add(Weight::from_parts(677_151, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_234_000 picoseconds.
        Weight::from_parts(71_468_130, 0)
            // Standard Error: 11_043
            .saturating_add(Weight::from_parts(2_686_211, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `853`
        //  Estimated: `23826`
        // Minimum execution time: 60_441_000 picoseconds.
        Weight::from_parts(62_355_000, 23826)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `925`
        //  Estimated: `21378`
        // Minimum execution time: 56_092_000 picoseconds.
        Weight::from_parts(57_602_000, 21378)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 63_562_000 picoseconds.
        Weight::from_parts(64_377_000, 5270)
            // Standard Error: 38_464
            .saturating_add(Weight::from_parts(55_427_555, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `790`
        //  Estimated: `39947`
        // Minimum execution time: 65_619_000 picoseconds.
        Weight::from_parts(97_415_727, 39947)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_384, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `273`
        //  Estimated: `34806`
        // Minimum execution time: 10_090_551_000 picoseconds.
        Weight::from_parts(248_954_884, 34806)
            // Standard Error: 156_681
            .saturating_add(Weight::from_parts(56_807_890, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_326, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 55_542_000 picoseconds.
        Weight::from_parts(25_846_113, 23860)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_188, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1016`
        //  Estimated: `42569`
        // Minimum execution time: 83_080_000 picoseconds.
        Weight::from_parts(51_456_724, 42569)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_206, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1033`
        //  Estimated: `85373`
        // Minimum execution time: 316_509_000 picoseconds.
        Weight::from_parts(329_151_508, 85373)
            // Standard Error: 1_291
            .saturating_add(Weight::from_parts(2_679, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1033`
        //  Estimated: `85240`
        // Minimum execution time: 331_216_000 picoseconds.
        Weight::from_parts(345_355_700, 85240)
            // Standard Error: 1_405
            .saturating_add(Weight::from_parts(654, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 46_720_000 picoseconds.
        Weight::from_parts(47_080_000, 3899)
            // Standard Error: 27_990
            .saturating_add(Weight::from_parts(54_129_631, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_196_000 picoseconds.
        Weight::from_parts(108_217_434, 0)
            // Standard Error: 338_134
            .saturating_add(Weight::from_parts(149_572_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 234_206_000 picoseconds.
        Weight::from_parts(270_976_063, 0)
            // Standard Error: 400_749
            .saturating_add(Weight::from_parts(153_573_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_771_000 picoseconds.
        Weight::from_parts(95_153_944, 0)
            // Standard Error: 11_133
            .saturating_add(Weight::from_parts(4_128_444, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 140_384_000 picoseconds.
        Weight::from_parts(209_389_291, 0)
            // Standard Error: 35_852
            .saturating_add(Weight::from_parts(4_261_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_067_000 picoseconds.
        Weight::from_parts(131_841_538, 0)
            // Standard Error: 461_007
            .saturating_add(Weight::from_parts(221_616_766, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_289_000 picoseconds.
        Weight::from_parts(87_903_902, 0)
            // Standard Error: 364_890
            .saturating_add(Weight::from_parts(220_322_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_917_000 picoseconds.
        Weight::from_parts(93_680_216, 0)
            // Standard Error: 350_438
            .saturating_add(Weight::from_parts(220_133_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_629_000 picoseconds.
        Weight::from_parts(110_578_112, 0)
            // Standard Error: 279_612
            .saturating_add(Weight::from_parts(217_028_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_691_000 picoseconds.
        Weight::from_parts(90_507_006, 0)
            // Standard Error: 322_174
            .saturating_add(Weight::from_parts(219_589_912, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_428_000 picoseconds.
        Weight::from_parts(96_540_746, 0)
            // Standard Error: 344_449
            .saturating_add(Weight::from_parts(217_887_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_780_000 picoseconds.
        Weight::from_parts(89_065_915, 0)
            // Standard Error: 328_843
            .saturating_add(Weight::from_parts(219_901_999, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_316_000 picoseconds.
        Weight::from_parts(93_257_518, 0)
            // Standard Error: 389_847
            .saturating_add(Weight::from_parts(218_507_445, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_143_000 picoseconds.
        Weight::from_parts(81_827_226, 0)
            // Standard Error: 288_954
            .saturating_add(Weight::from_parts(213_780_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 798_136_000 picoseconds.
        Weight::from_parts(882_776_586, 0)
            // Standard Error: 578_631
            .saturating_add(Weight::from_parts(302_102_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_025_576_000 picoseconds.
        Weight::from_parts(1_040_657_000, 0)
            // Standard Error: 58_442
            .saturating_add(Weight::from_parts(13_304_594, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_744_000 picoseconds.
        Weight::from_parts(106_869_001, 0)
            // Standard Error: 294_291
            .saturating_add(Weight::from_parts(217_524_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_088_000 picoseconds.
        Weight::from_parts(96_127_697, 0)
            // Standard Error: 299_951
            .saturating_add(Weight::from_parts(212_441_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_653_000 picoseconds.
        Weight::from_parts(115_834_395, 0)
            // Standard Error: 370_399
            .saturating_add(Weight::from_parts(280_552_534, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_645_000 picoseconds.
        Weight::from_parts(145_579_687, 0)
            // Standard Error: 633_891
            .saturating_add(Weight::from_parts(424_845_378, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 511_332_000 picoseconds.
        Weight::from_parts(515_806_000, 0)
            // Standard Error: 57_837
            .saturating_add(Weight::from_parts(21_518_551, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_047_000 picoseconds.
        Weight::from_parts(123_561_639, 0)
            // Standard Error: 544_890
            .saturating_add(Weight::from_parts(432_541_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 506_367_000 picoseconds.
        Weight::from_parts(511_674_000, 0)
            // Standard Error: 48_194
            .saturating_add(Weight::from_parts(21_581_526, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 737_881_000 picoseconds.
        Weight::from_parts(815_602_574, 0)
            // Standard Error: 676_471
            .saturating_add(Weight::from_parts(456_089_673, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 752_981_000 picoseconds.
        Weight::from_parts(939_346_273, 0)
            // Standard Error: 721_079
            .saturating_add(Weight::from_parts(446_088_030, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_060_000 picoseconds.
        Weight::from_parts(93_836_463, 0)
            // Standard Error: 275_400
            .saturating_add(Weight::from_parts(226_399_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_455_894_000 picoseconds.
        Weight::from_parts(4_611_351_748, 0)
            // Standard Error: 1_059_084
            .saturating_add(Weight::from_parts(325_900_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_037_000 picoseconds.
        Weight::from_parts(567_546_000, 0)
            // Standard Error: 47_115
            .saturating_add(Weight::from_parts(31_074_196, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_480_432_000 picoseconds.
        Weight::from_parts(4_646_695_202, 0)
            // Standard Error: 1_023_463
            .saturating_add(Weight::from_parts(384_108_165, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_473_964_000 picoseconds.
        Weight::from_parts(4_653_831_590, 0)
            // Standard Error: 792_738
            .saturating_add(Weight::from_parts(392_506_039, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 256_319_000 picoseconds.
        Weight::from_parts(290_873_058, 0)
            // Standard Error: 602_165
            .saturating_add(Weight::from_parts(447_290_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 676_116_000 picoseconds.
        Weight::from_parts(684_484_000, 0)
            // Standard Error: 52_914
            .saturating_add(Weight::from_parts(21_772_858, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_697_692_000 picoseconds.
        Weight::from_parts(4_795_632_722, 0)
            // Standard Error: 907_222
            .saturating_add(Weight::from_parts(405_304_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_693_000 picoseconds.
        Weight::from_parts(90_442_146, 0)
            // Standard Error: 289_064
            .saturating_add(Weight::from_parts(23_663_853, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_142_000 picoseconds.
        Weight::from_parts(99_049_241, 0)
            // Standard Error: 1_908
            .saturating_add(Weight::from_parts(426_412, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_363_000 picoseconds.
        Weight::from_parts(91_222_132, 0)
            // Standard Error: 291_669
            .saturating_add(Weight::from_parts(25_525_567, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_287_000 picoseconds.
        Weight::from_parts(94_417_735, 0)
            // Standard Error: 1_469
            .saturating_add(Weight::from_parts(434_223, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_281_000 picoseconds.
        Weight::from_parts(92_996_822, 0)
            // Standard Error: 304_984
            .saturating_add(Weight::from_parts(22_555_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_813_000 picoseconds.
        Weight::from_parts(95_284_144, 0)
            // Standard Error: 295_848
            .saturating_add(Weight::from_parts(20_981_155, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_866_000 picoseconds.
        Weight::from_parts(142_714_365, 0)
            // Standard Error: 441_134
            .saturating_add(Weight::from_parts(305_558_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_219_000 picoseconds.
        Weight::from_parts(104_884_000, 0)
            // Standard Error: 2_550
            .saturating_add(Weight::from_parts(678_654, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 740_720_000 picoseconds.
        Weight::from_parts(810_351_248, 0)
            // Standard Error: 4_944_389
            .saturating_add(Weight::from_parts(78_960_951, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 732_385_000 picoseconds.
        Weight::from_parts(801_003_434, 0)
            // Standard Error: 4_343_852
            .saturating_add(Weight::from_parts(17_311_065, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_309_000 picoseconds.
        Weight::from_parts(99_590_120, 0)
            // Standard Error: 299_536
            .saturating_add(Weight::from_parts(12_698_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_974_000 picoseconds.
        Weight::from_parts(99_164_857, 0)
            // Standard Error: 988
            .saturating_add(Weight::from_parts(429_628, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_511_000 picoseconds.
        Weight::from_parts(99_237_379, 0)
            // Standard Error: 331_891
            .saturating_add(Weight::from_parts(16_192_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_881_000 picoseconds.
        Weight::from_parts(95_289_543, 0)
            // Standard Error: 1_635
            .saturating_add(Weight::from_parts(434_234, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_573_000 picoseconds.
        Weight::from_parts(79_854_910, 0)
            // Standard Error: 341_419
            .saturating_add(Weight::from_parts(219_423_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_021_000 picoseconds.
        Weight::from_parts(95_484_592, 0)
            // Standard Error: 307_654
            .saturating_add(Weight::from_parts(215_606_347, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 765_193_000 picoseconds.
        Weight::from_parts(873_424_467, 0)
            // Standard Error: 545_479
            .saturating_add(Weight::from_parts(236_494_097, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 819_838_000 picoseconds.
        Weight::from_parts(885_462_924, 0)
            // Standard Error: 2_975
            .saturating_add(Weight::from_parts(139_855, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_337_830_000 picoseconds.
        Weight::from_parts(5_459_244_730, 0)
            // Standard Error: 674_973
            .saturating_add(Weight::from_parts(242_618_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_409_375_000 picoseconds.
        Weight::from_parts(5_608_009_493, 0)
            // Standard Error: 12_830
            .saturating_add(Weight::from_parts(13_820_760, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_361_000 picoseconds.
        Weight::from_parts(121_913_909, 0)
            // Standard Error: 447_037
            .saturating_add(Weight::from_parts(228_072_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 230_378_000 picoseconds.
        Weight::from_parts(232_503_000, 0)
            // Standard Error: 55_608
            .saturating_add(Weight::from_parts(26_004_431, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_687_000 picoseconds.
        Weight::from_parts(115_222_328, 0)
            // Standard Error: 518_624
            .saturating_add(Weight::from_parts(286_017_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_935_000 picoseconds.
        Weight::from_parts(109_712_780, 0)
            // Standard Error: 258_476
            .saturating_add(Weight::from_parts(214_571_643, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_135_000 picoseconds.
        Weight::from_parts(94_224_077, 0)
            // Standard Error: 287_235
            .saturating_add(Weight::from_parts(25_682_722, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_657_000 picoseconds.
        Weight::from_parts(89_867_269, 0)
            // Standard Error: 259_213
            .saturating_add(Weight::from_parts(15_898_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_631_000 picoseconds.
        Weight::from_parts(92_555_869, 0)
            // Standard Error: 277_435
            .saturating_add(Weight::from_parts(18_321_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_159_000 picoseconds.
        Weight::from_parts(92_809_787, 0)
            // Standard Error: 301_189
            .saturating_add(Weight::from_parts(13_666_812, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_766_000 picoseconds.
        Weight::from_parts(90_168_075, 0)
            // Standard Error: 257_224
            .saturating_add(Weight::from_parts(14_737_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 140_326_000 picoseconds.
        Weight::from_parts(205_278_073, 0)
            // Standard Error: 475_113
            .saturating_add(Weight::from_parts(318_541_043, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_658_000 picoseconds.
        Weight::from_parts(158_212_498, 0)
            // Standard Error: 547_721
            .saturating_add(Weight::from_parts(508_193_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_887_421_000 picoseconds.
        Weight::from_parts(286_928_621, 0)
            // Standard Error: 121_356
            .saturating_add(Weight::from_parts(21_468_827, 0).saturating_mul(p.into()))
            // Standard Error: 121_418
            .saturating_add(Weight::from_parts(174_459_930, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_109_000 picoseconds.
        Weight::from_parts(154_831_985, 0)
            // Standard Error: 504_193
            .saturating_add(Weight::from_parts(512_003_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_510_875_000 picoseconds.
        Weight::from_parts(46_097_684_000, 0)
            // Standard Error: 270_713
            .saturating_add(Weight::from_parts(7_222_068, 0).saturating_mul(p.into()))
            // Standard Error: 270_699
            .saturating_add(Weight::from_parts(160_073_739, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_844_000 picoseconds.
        Weight::from_parts(104_362_817, 0)
            // Standard Error: 31_834
            .saturating_add(Weight::from_parts(3_881_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 88_660_000 picoseconds.
        Weight::from_parts(135_761_087, 1131)
            // Standard Error: 10_289
            .saturating_add(Weight::from_parts(12_171_496, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 85_855_000 picoseconds.
        Weight::from_parts(87_266_000, 1131)
            // Standard Error: 32_659
            .saturating_add(Weight::from_parts(37_058_914, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_281_576_000 picoseconds.
        Weight::from_parts(6_079_378_538, 5069931)
            // Standard Error: 60_142
            .saturating_add(Weight::from_parts(38_143_078, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 87_542_000 picoseconds.
        Weight::from_parts(88_585_000, 1939)
            // Standard Error: 32_577
            .saturating_add(Weight::from_parts(45_952_031, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 93_370_000 picoseconds.
        Weight::from_parts(92_531_814, 1131)
            // Standard Error: 70_179
            .saturating_add(Weight::from_parts(36_618_615, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 788_439_000 picoseconds.
        Weight::from_parts(820_190_498, 1496)
            // Standard Error: 348_397
            .saturating_add(Weight::from_parts(45_618_789, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_161_063_000 picoseconds.
        Weight::from_parts(1_170_607_165, 317931)
            // Standard Error: 368_246
            .saturating_add(Weight::from_parts(51_386_602, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_324_441_000 picoseconds.
        Weight::from_parts(4_353_041_487, 0)
            // Standard Error: 11_490
            .saturating_add(Weight::from_parts(3_312_270, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_325_334_000 picoseconds.
        Weight::from_parts(4_358_180_381, 0)
            // Standard Error: 11_591
            .saturating_add(Weight::from_parts(3_325_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_062_038_000 picoseconds.
        Weight::from_parts(11_170_326_292, 0)
            // Standard Error: 263_520
            .saturating_add(Weight::from_parts(14_654_736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_015_544_000 picoseconds.
        Weight::from_parts(10_855_042_743, 0)
            // Standard Error: 253_368
            .saturating_add(Weight::from_parts(10_036_183, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_210_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 7_790
            .saturating_add(Weight::from_parts(3_848_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_150_000 picoseconds.
        Weight::from_parts(1_630_881, 0)
            // Standard Error: 12_442
            .saturating_add(Weight::from_parts(3_214_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_111_000 picoseconds.
        Weight::from_parts(2_978_652, 0)
            // Standard Error: 1_742
            .saturating_add(Weight::from_parts(1_591_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(2_221_000, 0)
            // Standard Error: 10_625
            .saturating_add(Weight::from_parts(2_953_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_154_000 picoseconds.
        Weight::from_parts(8_198_333, 0)
            // Standard Error: 23_088
            .saturating_add(Weight::from_parts(4_827_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_840_000 picoseconds.
        Weight::from_parts(5_914_854, 0)
            // Standard Error: 1_200
            .saturating_add(Weight::from_parts(177_639, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_342_000 picoseconds.
        Weight::from_parts(5_123_508, 0)
            // Standard Error: 9_413
            .saturating_add(Weight::from_parts(2_638_513, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_638_513 -
            2_432_340, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_274_000 picoseconds.
        Weight::from_parts(5_907_367, 0)
            // Standard Error: 13_539
            .saturating_add(Weight::from_parts(2_432_340, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_606_000 picoseconds.
        Weight::from_parts(21_189_212, 0)
            // Standard Error: 34_228
            .saturating_add(Weight::from_parts(9_954_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_877_000 picoseconds.
        Weight::from_parts(2_493_837, 0)
            // Standard Error: 6_910
            .saturating_add(Weight::from_parts(1_298_566, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_285_000 picoseconds.
        Weight::from_parts(5_680_223, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_196_000 picoseconds.
        Weight::from_parts(1_699_397, 0)
            // Standard Error: 3_604
            .saturating_add(Weight::from_parts(286_589, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_183_000 picoseconds.
        Weight::from_parts(2_220_000, 0)
            // Standard Error: 4_606
            .saturating_add(Weight::from_parts(767_549, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_197_000 picoseconds.
        Weight::from_parts(2_353_000, 0)
            // Standard Error: 7_354
            .saturating_add(Weight::from_parts(820_328, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_828_000 picoseconds.
        Weight::from_parts(2_514_477, 0)
            // Standard Error: 7_751
            .saturating_add(Weight::from_parts(832_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_944_000 picoseconds.
        Weight::from_parts(6_086_000, 0)
            // Standard Error: 8_032
            .saturating_add(Weight::from_parts(1_453_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_971_000 picoseconds.
        Weight::from_parts(717_548, 0)
            // Standard Error: 12_156
            .saturating_add(Weight::from_parts(7_606_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_133_000 picoseconds.
        Weight::from_parts(2_277_000, 0)
            // Standard Error: 8_003
            .saturating_add(Weight::from_parts(3_519_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_166_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 5_675
            .saturating_add(Weight::from_parts(3_254_651, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_214_000, 0)
            // Standard Error: 5_937
            .saturating_add(Weight::from_parts(3_230_852, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_251_000, 0)
            // Standard Error: 4_347
            .saturating_add(Weight::from_parts(2_726_615, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_177_000 picoseconds.
        Weight::from_parts(2_249_000, 0)
            // Standard Error: 3_923
            .saturating_add(Weight::from_parts(647_713, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_208_000 picoseconds.
        Weight::from_parts(1_533_370, 0)
            // Standard Error: 3_741
            .saturating_add(Weight::from_parts(434_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_187_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 10_115
            .saturating_add(Weight::from_parts(1_939_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_165_000 picoseconds.
        Weight::from_parts(2_257_000, 0)
            // Standard Error: 10_645
            .saturating_add(Weight::from_parts(1_337_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_196_000 picoseconds.
        Weight::from_parts(407_335, 0)
            // Standard Error: 5_861
            .saturating_add(Weight::from_parts(454_238, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_537_215, 0)
            // Standard Error: 2_172
            .saturating_add(Weight::from_parts(194_721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_083_000 picoseconds.
        Weight::from_parts(2_470_482, 0)
            // Standard Error: 2_503
            .saturating_add(Weight::from_parts(206_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_134_000 picoseconds.
        Weight::from_parts(2_185_000, 0)
            // Standard Error: 8_750
            .saturating_add(Weight::from_parts(1_915_879, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_084_000 picoseconds.
        Weight::from_parts(2_190_000, 0)
            // Standard Error: 9_915
            .saturating_add(Weight::from_parts(1_270_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_127_000 picoseconds.
        Weight::from_parts(2_202_000, 0)
            // Standard Error: 9_151
            .saturating_add(Weight::from_parts(1_968_168, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_139_000 picoseconds.
        Weight::from_parts(2_249_000, 0)
            // Standard Error: 8_710
            .saturating_add(Weight::from_parts(1_258_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_148_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 8_582
            .saturating_add(Weight::from_parts(1_922_097, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_282_000, 0)
            // Standard Error: 8_041
            .saturating_add(Weight::from_parts(1_297_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_130_000 picoseconds.
        Weight::from_parts(2_237_000, 0)
            // Standard Error: 8_652
            .saturating_add(Weight::from_parts(1_906_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_269_000, 0)
            // Standard Error: 9_281
            .saturating_add(Weight::from_parts(1_289_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(2_247_000, 0)
            // Standard Error: 8_566
            .saturating_add(Weight::from_parts(1_919_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_056_000 picoseconds.
        Weight::from_parts(2_195_000, 0)
            // Standard Error: 7_243
            .saturating_add(Weight::from_parts(1_231_159, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_252_000 picoseconds.
        Weight::from_parts(2_299_000, 0)
            // Standard Error: 10_646
            .saturating_add(Weight::from_parts(1_971_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(2_293_000, 0)
            // Standard Error: 8_556
            .saturating_add(Weight::from_parts(1_316_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_206_000 picoseconds.
        Weight::from_parts(2_275_000, 0)
            // Standard Error: 9_115
            .saturating_add(Weight::from_parts(1_958_299, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_219_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 7_242
            .saturating_add(Weight::from_parts(1_236_184, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_159_000 picoseconds.
        Weight::from_parts(2_241_000, 0)
            // Standard Error: 9_445
            .saturating_add(Weight::from_parts(1_891_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_138_000 picoseconds.
        Weight::from_parts(2_205_000, 0)
            // Standard Error: 7_655
            .saturating_add(Weight::from_parts(1_236_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_186_000 picoseconds.
        Weight::from_parts(2_239_000, 0)
            // Standard Error: 9_378
            .saturating_add(Weight::from_parts(1_937_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_166_000 picoseconds.
        Weight::from_parts(2_202_000, 0)
            // Standard Error: 8_086
            .saturating_add(Weight::from_parts(1_367_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_195_000 picoseconds.
        Weight::from_parts(2_228_000, 0)
            // Standard Error: 8_288
            .saturating_add(Weight::from_parts(1_913_811, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(2_236_000, 0)
            // Standard Error: 7_539
            .saturating_add(Weight::from_parts(1_234_868, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_301_000, 0)
            // Standard Error: 9_288
            .saturating_add(Weight::from_parts(1_410_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_044_000 picoseconds.
        Weight::from_parts(2_157_000, 0)
            // Standard Error: 5_749
            .saturating_add(Weight::from_parts(741_107, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_136_000 picoseconds.
        Weight::from_parts(2_250_000, 0)
            // Standard Error: 8_593
            .saturating_add(Weight::from_parts(1_427_977, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_118_000 picoseconds.
        Weight::from_parts(2_212_000, 0)
            // Standard Error: 4_813
            .saturating_add(Weight::from_parts(750_070, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 9_192
            .saturating_add(Weight::from_parts(1_881_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_121_000 picoseconds.
        Weight::from_parts(2_185_000, 0)
            // Standard Error: 8_014
            .saturating_add(Weight::from_parts(1_345_349, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(10_949_566, 0)
            // Standard Error: 30_237
            .saturating_add(Weight::from_parts(2_213_868, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(3_780_028, 0)
            // Standard Error: 15_041
            .saturating_add(Weight::from_parts(2_320_566, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_108_000 picoseconds.
        Weight::from_parts(5_377_318, 0)
            // Standard Error: 25_384
            .saturating_add(Weight::from_parts(2_684_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_149_000 picoseconds.
        Weight::from_parts(3_633_667, 0)
            // Standard Error: 17_942
            .saturating_add(Weight::from_parts(2_320_908, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_231_000 picoseconds.
        Weight::from_parts(12_693_388, 0)
            // Standard Error: 54_584
            .saturating_add(Weight::from_parts(8_707_205, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(8_475_225, 0)
            // Standard Error: 54_410
            .saturating_add(Weight::from_parts(7_148_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_159_000 picoseconds.
        Weight::from_parts(6_629_956, 0)
            // Standard Error: 28_039
            .saturating_add(Weight::from_parts(2_671_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(3_067_079, 0)
            // Standard Error: 18_461
            .saturating_add(Weight::from_parts(2_372_774, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_144_000 picoseconds.
        Weight::from_parts(2_217_000, 0)
            // Standard Error: 9_421
            .saturating_add(Weight::from_parts(1_403_129, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_226_000, 0)
            // Standard Error: 5_285
            .saturating_add(Weight::from_parts(734_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 6_432
            .saturating_add(Weight::from_parts(1_380_374, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_138_000 picoseconds.
        Weight::from_parts(2_221_000, 0)
            // Standard Error: 4_693
            .saturating_add(Weight::from_parts(683_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_186_000 picoseconds.
        Weight::from_parts(2_320_000, 0)
            // Standard Error: 7_815
            .saturating_add(Weight::from_parts(1_363_217, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_179_000 picoseconds.
        Weight::from_parts(2_226_000, 0)
            // Standard Error: 5_490
            .saturating_add(Weight::from_parts(687_531, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(2_221_000, 0)
            // Standard Error: 8_329
            .saturating_add(Weight::from_parts(1_149_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_123_000 picoseconds.
        Weight::from_parts(2_202_000, 0)
            // Standard Error: 8_066
            .saturating_add(Weight::from_parts(726_829, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(2_218_000, 0)
            // Standard Error: 7_272
            .saturating_add(Weight::from_parts(1_257_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_146_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 4_067
            .saturating_add(Weight::from_parts(600_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_169_000 picoseconds.
        Weight::from_parts(2_228_000, 0)
            // Standard Error: 8_231
            .saturating_add(Weight::from_parts(1_136_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_186_000, 0)
            // Standard Error: 4_509
            .saturating_add(Weight::from_parts(610_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_038_000 picoseconds.
        Weight::from_parts(2_174_000, 0)
            // Standard Error: 7_414
            .saturating_add(Weight::from_parts(1_129_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_165_000 picoseconds.
        Weight::from_parts(2_201_000, 0)
            // Standard Error: 4_360
            .saturating_add(Weight::from_parts(591_380, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_089_000 picoseconds.
        Weight::from_parts(2_140_000, 0)
            // Standard Error: 7_639
            .saturating_add(Weight::from_parts(1_204_980, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_121_000 picoseconds.
        Weight::from_parts(2_206_000, 0)
            // Standard Error: 4_990
            .saturating_add(Weight::from_parts(634_137, 0).saturating_mul(r.into()))
    }
}
