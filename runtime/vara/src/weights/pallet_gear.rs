// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 930_000 picoseconds.
        Weight::from_parts(995_000, 0)
            // Standard Error: 690
            .saturating_add(Weight::from_parts(245_182, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_205_000 picoseconds.
        Weight::from_parts(3_321_000, 3577)
            // Standard Error: 1_474
            .saturating_add(Weight::from_parts(685_930, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 130_766_000 picoseconds.
        Weight::from_parts(156_247_000, 0)
            // Standard Error: 202_466
            .saturating_add(Weight::from_parts(105_969_489, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1050`
        //  Estimated: `42875`
        // Minimum execution time: 83_955_000 picoseconds.
        Weight::from_parts(86_094_000, 42875)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `958`
        //  Estimated: `21477`
        // Minimum execution time: 55_918_000 picoseconds.
        Weight::from_parts(57_673_000, 21477)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `605`
        //  Estimated: `17354`
        // Minimum execution time: 29_691_000 picoseconds.
        Weight::from_parts(31_372_000, 17354)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_200_000 picoseconds.
        Weight::from_parts(4_302_974, 7640)
            // Standard Error: 29_620
            .saturating_add(Weight::from_parts(16_339_798, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1506 + c * (16389 ±0)`
        //  Estimated: `42570 + c * (131112 ±0)`
        // Minimum execution time: 71_538_000 picoseconds.
        Weight::from_parts(72_366_000, 42570)
            // Standard Error: 596_365
            .saturating_add(Weight::from_parts(84_357_389, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 63_763_000 picoseconds.
        Weight::from_parts(49_524_315, 5270)
            // Standard Error: 37_040
            .saturating_add(Weight::from_parts(52_364_351, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `809`
        //  Estimated: `40156`
        // Minimum execution time: 65_520_000 picoseconds.
        Weight::from_parts(98_501_837, 40156)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_588, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306`
        //  Estimated: `35235`
        // Minimum execution time: 10_996_339_000 picoseconds.
        Weight::from_parts(202_788_932, 35235)
            // Standard Error: 159_572
            .saturating_add(Weight::from_parts(52_574_528, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_539, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 56_239_000 picoseconds.
        Weight::from_parts(29_169_702, 23860)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_195, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `452`
        //  Estimated: `27184`
        // Minimum execution time: 59_553_000 picoseconds.
        Weight::from_parts(39_290_485, 27184)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_190, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1049`
        //  Estimated: `42866`
        // Minimum execution time: 87_017_000 picoseconds.
        Weight::from_parts(72_311_846, 42866)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_179, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1152`
        //  Estimated: `46396`
        // Minimum execution time: 95_484_000 picoseconds.
        Weight::from_parts(78_116_075, 46396)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_185, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85981`
        // Minimum execution time: 475_423_000 picoseconds.
        Weight::from_parts(543_177_649, 85981)
            // Standard Error: 7_098
            .saturating_add(Weight::from_parts(29_669, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85905`
        // Minimum execution time: 523_058_000 picoseconds.
        Weight::from_parts(612_885_876, 85905)
            .saturating_add(T::DbWeight::get().reads(29_u64))
            .saturating_add(T::DbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 46_204_000 picoseconds.
        Weight::from_parts(46_705_000, 3899)
            // Standard Error: 25_115
            .saturating_add(Weight::from_parts(51_743_915, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 296_068_000 picoseconds.
        Weight::from_parts(271_423_778, 0)
            // Standard Error: 1_090_951
            .saturating_add(Weight::from_parts(386_634_413, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 678_529_000 picoseconds.
        Weight::from_parts(667_314_487, 0)
            // Standard Error: 1_479_205
            .saturating_add(Weight::from_parts(396_533_123, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 280_067_000 picoseconds.
        Weight::from_parts(357_550_696, 0)
            // Standard Error: 15_351
            .saturating_add(Weight::from_parts(4_731_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 401_278_000 picoseconds.
        Weight::from_parts(448_489_984, 0)
            // Standard Error: 15_365
            .saturating_add(Weight::from_parts(4_666_813, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_437_000 picoseconds.
        Weight::from_parts(380_814_911, 0)
            // Standard Error: 307_250
            .saturating_add(Weight::from_parts(258_406_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 300_117_000 picoseconds.
        Weight::from_parts(345_102_213, 0)
            // Standard Error: 229_190
            .saturating_add(Weight::from_parts(247_731_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_289_000 picoseconds.
        Weight::from_parts(349_989_435, 0)
            // Standard Error: 217_438
            .saturating_add(Weight::from_parts(249_427_913, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_642_000 picoseconds.
        Weight::from_parts(352_859_211, 0)
            // Standard Error: 209_363
            .saturating_add(Weight::from_parts(247_578_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 294_115_000 picoseconds.
        Weight::from_parts(343_421_633, 0)
            // Standard Error: 181_004
            .saturating_add(Weight::from_parts(246_938_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 254_658_000 picoseconds.
        Weight::from_parts(329_607_074, 0)
            // Standard Error: 227_862
            .saturating_add(Weight::from_parts(247_901_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 271_553_000 picoseconds.
        Weight::from_parts(339_421_755, 0)
            // Standard Error: 196_001
            .saturating_add(Weight::from_parts(247_436_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 276_150_000 picoseconds.
        Weight::from_parts(344_864_917, 0)
            // Standard Error: 195_731
            .saturating_add(Weight::from_parts(247_515_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 939_340_000 picoseconds.
        Weight::from_parts(1_037_706_294, 0)
            // Standard Error: 359_069
            .saturating_add(Weight::from_parts(345_841_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_230_838_000 picoseconds.
        Weight::from_parts(1_258_630_000, 0)
            // Standard Error: 53_585
            .saturating_add(Weight::from_parts(13_428_686, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 289_933_000 picoseconds.
        Weight::from_parts(337_752_459, 0)
            // Standard Error: 190_957
            .saturating_add(Weight::from_parts(246_828_260, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 283_818_000 picoseconds.
        Weight::from_parts(348_958_080, 0)
            // Standard Error: 226_576
            .saturating_add(Weight::from_parts(246_542_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_573_000 picoseconds.
        Weight::from_parts(357_903_892, 0)
            // Standard Error: 209_949
            .saturating_add(Weight::from_parts(320_577_890, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 356_411_000 picoseconds.
        Weight::from_parts(367_935_000, 0)
            // Standard Error: 4_015_415
            .saturating_add(Weight::from_parts(1_243_784_283, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_947_000 picoseconds.
        Weight::from_parts(153_588_605, 0)
            // Standard Error: 532_326
            .saturating_add(Weight::from_parts(397_945_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 793_468_000 picoseconds.
        Weight::from_parts(824_505_000, 0)
            // Standard Error: 58_979
            .saturating_add(Weight::from_parts(21_249_410, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_320_000 picoseconds.
        Weight::from_parts(408_176_203, 0)
            // Standard Error: 387_970
            .saturating_add(Weight::from_parts(511_077_784, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 804_142_000 picoseconds.
        Weight::from_parts(837_843_000, 0)
            // Standard Error: 59_235
            .saturating_add(Weight::from_parts(21_613_341, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 958_469_000 picoseconds.
        Weight::from_parts(1_069_301_474, 0)
            // Standard Error: 401_938
            .saturating_add(Weight::from_parts(511_197_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 929_825_000 picoseconds.
        Weight::from_parts(1_025_599_096, 0)
            // Standard Error: 696_532
            .saturating_add(Weight::from_parts(530_726_212, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_913_000 picoseconds.
        Weight::from_parts(329_834_742, 0)
            // Standard Error: 200_128
            .saturating_add(Weight::from_parts(257_383_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_361_986_000 picoseconds.
        Weight::from_parts(5_542_583_480, 0)
            // Standard Error: 1_005_864
            .saturating_add(Weight::from_parts(454_022_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 940_065_000 picoseconds.
        Weight::from_parts(969_839_000, 0)
            // Standard Error: 46_049
            .saturating_add(Weight::from_parts(31_268_864, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_399_044_000 picoseconds.
        Weight::from_parts(5_511_853_678, 0)
            // Standard Error: 951_733
            .saturating_add(Weight::from_parts(520_230_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_454_788_000 picoseconds.
        Weight::from_parts(5_456_058_093, 0)
            // Standard Error: 1_341_645
            .saturating_add(Weight::from_parts(565_335_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 465_462_000 picoseconds.
        Weight::from_parts(560_982_753, 0)
            // Standard Error: 361_805
            .saturating_add(Weight::from_parts(504_990_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 955_854_000 picoseconds.
        Weight::from_parts(1_005_351_000, 0)
            // Standard Error: 62_076
            .saturating_add(Weight::from_parts(21_509_577, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_616_337_000 picoseconds.
        Weight::from_parts(5_691_584_026, 0)
            // Standard Error: 1_164_872
            .saturating_add(Weight::from_parts(544_143_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_480_000 picoseconds.
        Weight::from_parts(344_450_246, 0)
            // Standard Error: 3_155_782
            .saturating_add(Weight::from_parts(28_746_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 334_682_000 picoseconds.
        Weight::from_parts(372_424_884, 0)
            // Standard Error: 1_510
            .saturating_add(Weight::from_parts(422_569, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 263_892_000 picoseconds.
        Weight::from_parts(344_999_695, 0)
            // Standard Error: 2_982_317
            .saturating_add(Weight::from_parts(24_247_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 317_617_000 picoseconds.
        Weight::from_parts(368_904_735, 0)
            // Standard Error: 1_349
            .saturating_add(Weight::from_parts(430_846, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 254_854_000 picoseconds.
        Weight::from_parts(338_164_895, 0)
            // Standard Error: 3_091_039
            .saturating_add(Weight::from_parts(51_707_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 270_632_000 picoseconds.
        Weight::from_parts(341_772_779, 0)
            // Standard Error: 3_048_745
            .saturating_add(Weight::from_parts(28_523_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 273_255_000 picoseconds.
        Weight::from_parts(383_832_820, 0)
            // Standard Error: 314_856
            .saturating_add(Weight::from_parts(352_633_697, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 337_743_000 picoseconds.
        Weight::from_parts(73_484_268, 0)
            // Standard Error: 4_129
            .saturating_add(Weight::from_parts(716_935, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 932_282_000 picoseconds.
        Weight::from_parts(1_014_122_091, 0)
            // Standard Error: 5_294_492
            .saturating_add(Weight::from_parts(45_787_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 928_852_000 picoseconds.
        Weight::from_parts(1_048_918_008, 0)
            // Standard Error: 7_287_862
            .saturating_add(Weight::from_parts(66_437_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_649_000 picoseconds.
        Weight::from_parts(373_719_173, 0)
            // Standard Error: 3_155_404
            .saturating_add(Weight::from_parts(11_838_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 356_161_000 picoseconds.
        Weight::from_parts(375_425_597, 0)
            // Standard Error: 1_342
            .saturating_add(Weight::from_parts(430_596, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 306_963_000 picoseconds.
        Weight::from_parts(371_953_759, 0)
            // Standard Error: 2_951_302
            .saturating_add(Weight::from_parts(22_078_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 322_275_000 picoseconds.
        Weight::from_parts(376_438_708, 0)
            // Standard Error: 1_496
            .saturating_add(Weight::from_parts(425_607, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 299_264_000 picoseconds.
        Weight::from_parts(361_984_806, 0)
            // Standard Error: 197_390
            .saturating_add(Weight::from_parts(248_865_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_011_000 picoseconds.
        Weight::from_parts(336_117_158, 0)
            // Standard Error: 205_064
            .saturating_add(Weight::from_parts(253_056_648, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 980_557_000 picoseconds.
        Weight::from_parts(1_059_667_879, 0)
            // Standard Error: 328_031
            .saturating_add(Weight::from_parts(281_844_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_025_546_000 picoseconds.
        Weight::from_parts(1_106_523_953, 0)
            // Standard Error: 3_068
            .saturating_add(Weight::from_parts(158_016, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_283_583_000 picoseconds.
        Weight::from_parts(6_374_484_920, 0)
            // Standard Error: 1_105_954
            .saturating_add(Weight::from_parts(387_517_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_647_794_000 picoseconds.
        Weight::from_parts(6_823_375_518, 0)
            // Standard Error: 10_730
            .saturating_add(Weight::from_parts(13_634_780, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 311_582_000 picoseconds.
        Weight::from_parts(379_554_548, 0)
            // Standard Error: 279_719
            .saturating_add(Weight::from_parts(269_826_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 461_962_000 picoseconds.
        Weight::from_parts(492_501_000, 0)
            // Standard Error: 51_685
            .saturating_add(Weight::from_parts(25_782_283, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_407_000 picoseconds.
        Weight::from_parts(347_782_585, 0)
            // Standard Error: 194_144
            .saturating_add(Weight::from_parts(247_064_773, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 253_506_000 picoseconds.
        Weight::from_parts(337_357_397, 0)
            // Standard Error: 3_051_997
            .saturating_add(Weight::from_parts(41_019_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 258_822_000 picoseconds.
        Weight::from_parts(332_877_106, 0)
            // Standard Error: 2_759_124
            .saturating_add(Weight::from_parts(21_840_893, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 247_637_000 picoseconds.
        Weight::from_parts(332_506_451, 0)
            // Standard Error: 2_821_741
            .saturating_add(Weight::from_parts(9_444_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 255_694_000 picoseconds.
        Weight::from_parts(335_767_608, 0)
            // Standard Error: 3_015_819
            .saturating_add(Weight::from_parts(2_414_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 266_175_000 picoseconds.
        Weight::from_parts(332_500_422, 0)
            // Standard Error: 3_075_929
            .saturating_add(Weight::from_parts(6_262_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 382_970_000 picoseconds.
        Weight::from_parts(443_930_311, 0)
            // Standard Error: 330_144
            .saturating_add(Weight::from_parts(369_420_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 333_766_000 picoseconds.
        Weight::from_parts(385_835_786, 0)
            // Standard Error: 355_922
            .saturating_add(Weight::from_parts(595_990_167, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_795_157_000 picoseconds.
        Weight::from_parts(45_340_853_000, 0)
            // Standard Error: 266_075
            .saturating_add(Weight::from_parts(7_465_076, 0).saturating_mul(p.into()))
            // Standard Error: 266_062
            .saturating_add(Weight::from_parts(177_786_840, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 319_551_000 picoseconds.
        Weight::from_parts(371_987_882, 0)
            // Standard Error: 370_941
            .saturating_add(Weight::from_parts(612_471_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_758_761_000 picoseconds.
        Weight::from_parts(43_934_670_000, 0)
            // Standard Error: 259_894
            .saturating_add(Weight::from_parts(8_165_091, 0).saturating_mul(p.into()))
            // Standard Error: 259_881
            .saturating_add(Weight::from_parts(178_337_546, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 267_873_000 picoseconds.
        Weight::from_parts(359_425_286, 0)
            // Standard Error: 101_612
            .saturating_add(Weight::from_parts(4_469_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 292_020_000 picoseconds.
        Weight::from_parts(314_027_156, 1131)
            // Standard Error: 9_308
            .saturating_add(Weight::from_parts(15_650_656, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 284_489_000 picoseconds.
        Weight::from_parts(307_876_000, 1131)
            // Standard Error: 71_487
            .saturating_add(Weight::from_parts(42_708_701, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_401_693_000 picoseconds.
        Weight::from_parts(8_415_630_246, 5069931)
            // Standard Error: 58_184
            .saturating_add(Weight::from_parts(43_946_052, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 292_665_000 picoseconds.
        Weight::from_parts(184_017_519, 1939)
            // Standard Error: 35_418
            .saturating_add(Weight::from_parts(52_307_099, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 300_402_000 picoseconds.
        Weight::from_parts(361_882_054, 1131)
            // Standard Error: 87_568
            .saturating_add(Weight::from_parts(36_861_315, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 960_665_000 picoseconds.
        Weight::from_parts(1_016_327_045, 1496)
            // Standard Error: 173_980
            .saturating_add(Weight::from_parts(47_631_534, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_476_893_000 picoseconds.
        Weight::from_parts(1_529_105_183, 317931)
            // Standard Error: 174_276
            .saturating_add(Weight::from_parts(47_362_231, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_370_960_000 picoseconds.
        Weight::from_parts(4_385_051_628, 0)
            // Standard Error: 10_587
            .saturating_add(Weight::from_parts(3_318_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_364_773_000 picoseconds.
        Weight::from_parts(4_388_371_143, 0)
            // Standard Error: 11_402
            .saturating_add(Weight::from_parts(3_324_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_634_521_000 picoseconds.
        Weight::from_parts(11_014_591_178, 0)
            // Standard Error: 172_578
            .saturating_add(Weight::from_parts(16_758_157, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_159_385_000 picoseconds.
        Weight::from_parts(11_022_980_875, 0)
            // Standard Error: 239_903
            .saturating_add(Weight::from_parts(13_697_227, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_840_000 picoseconds.
        Weight::from_parts(1_034_136, 0)
            // Standard Error: 13_043
            .saturating_add(Weight::from_parts(3_820_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_211_000 picoseconds.
        Weight::from_parts(2_974_787, 0)
            // Standard Error: 7_303
            .saturating_add(Weight::from_parts(3_117_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_967_000 picoseconds.
        Weight::from_parts(3_411_822, 0)
            // Standard Error: 3_101
            .saturating_add(Weight::from_parts(1_671_961, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_291_000 picoseconds.
        Weight::from_parts(3_429_000, 0)
            // Standard Error: 8_500
            .saturating_add(Weight::from_parts(2_862_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_366_000 picoseconds.
        Weight::from_parts(9_230_207, 0)
            // Standard Error: 21_227
            .saturating_add(Weight::from_parts(4_561_589, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_765_000 picoseconds.
        Weight::from_parts(6_707_153, 0)
            // Standard Error: 1_171
            .saturating_add(Weight::from_parts(160_717, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_421_000 picoseconds.
        Weight::from_parts(6_249_474, 0)
            // Standard Error: 7_561
            .saturating_add(Weight::from_parts(2_603_036, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_603_036 -
            2_408_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_409_000 picoseconds.
        Weight::from_parts(5_520_805, 0)
            // Standard Error: 12_137
            .saturating_add(Weight::from_parts(2_408_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_647_000 picoseconds.
        Weight::from_parts(28_799_516, 0)
            // Standard Error: 36_471
            .saturating_add(Weight::from_parts(8_713_380, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 14_760_000 picoseconds.
        Weight::from_parts(6_549_007, 0)
            // Standard Error: 6_911
            .saturating_add(Weight::from_parts(1_138_525, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_382_000 picoseconds.
        Weight::from_parts(6_796_661, 0)
            // Standard Error: 21
            .saturating_add(Weight::from_parts(192, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_280_000 picoseconds.
        Weight::from_parts(2_445_718, 0)
            // Standard Error: 3_421
            .saturating_add(Weight::from_parts(273_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_434_000 picoseconds.
        Weight::from_parts(3_544_000, 0)
            // Standard Error: 5_218
            .saturating_add(Weight::from_parts(789_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_080_000 picoseconds.
        Weight::from_parts(3_391_000, 0)
            // Standard Error: 5_656
            .saturating_add(Weight::from_parts(816_318, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_504_000 picoseconds.
        Weight::from_parts(4_911_074, 0)
            // Standard Error: 5_038
            .saturating_add(Weight::from_parts(794_596, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_446_000 picoseconds.
        Weight::from_parts(617_169, 0)
            // Standard Error: 11_109
            .saturating_add(Weight::from_parts(1_547_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_232_000 picoseconds.
        Weight::from_parts(2_483_464, 0)
            // Standard Error: 12_789
            .saturating_add(Weight::from_parts(6_850_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_097_000 picoseconds.
        Weight::from_parts(381_182, 0)
            // Standard Error: 11_419
            .saturating_add(Weight::from_parts(3_327_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_060_000 picoseconds.
        Weight::from_parts(171_113, 0)
            // Standard Error: 8_615
            .saturating_add(Weight::from_parts(3_124_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_402_000 picoseconds.
        Weight::from_parts(3_561_000, 0)
            // Standard Error: 6_423
            .saturating_add(Weight::from_parts(3_014_982, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_106_000 picoseconds.
        Weight::from_parts(3_282_000, 0)
            // Standard Error: 6_054
            .saturating_add(Weight::from_parts(2_615_766, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_333_000 picoseconds.
        Weight::from_parts(467_712, 0)
            // Standard Error: 6_019
            .saturating_add(Weight::from_parts(727_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_054_000 picoseconds.
        Weight::from_parts(2_378_304, 0)
            // Standard Error: 3_206
            .saturating_add(Weight::from_parts(407_035, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_412_000 picoseconds.
        Weight::from_parts(3_523_000, 0)
            // Standard Error: 11_551
            .saturating_add(Weight::from_parts(1_844_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_527_000 picoseconds.
        Weight::from_parts(3_700_000, 0)
            // Standard Error: 8_386
            .saturating_add(Weight::from_parts(1_137_715, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_249_000 picoseconds.
        Weight::from_parts(2_179_196, 0)
            // Standard Error: 4_700
            .saturating_add(Weight::from_parts(437_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_396_000 picoseconds.
        Weight::from_parts(2_861_237, 0)
            // Standard Error: 3_587
            .saturating_add(Weight::from_parts(399_361, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_125_000 picoseconds.
        Weight::from_parts(349_448, 0)
            // Standard Error: 6_646
            .saturating_add(Weight::from_parts(658_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_142_000 picoseconds.
        Weight::from_parts(1_993_200, 0)
            // Standard Error: 4_360
            .saturating_add(Weight::from_parts(563_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_109_000 picoseconds.
        Weight::from_parts(909_975, 0)
            // Standard Error: 5_781
            .saturating_add(Weight::from_parts(550_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_253_000 picoseconds.
        Weight::from_parts(2_412_990, 0)
            // Standard Error: 3_386
            .saturating_add(Weight::from_parts(371_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_993_000 picoseconds.
        Weight::from_parts(1_979_153, 0)
            // Standard Error: 4_611
            .saturating_add(Weight::from_parts(258_250, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_128_000 picoseconds.
        Weight::from_parts(2_325_923, 0)
            // Standard Error: 4_415
            .saturating_add(Weight::from_parts(274_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_176_000 picoseconds.
        Weight::from_parts(3_736_000, 0)
            // Standard Error: 9_665
            .saturating_add(Weight::from_parts(1_815_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_254_000 picoseconds.
        Weight::from_parts(3_542_000, 0)
            // Standard Error: 6_202
            .saturating_add(Weight::from_parts(1_106_742, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_348_000 picoseconds.
        Weight::from_parts(3_653_000, 0)
            // Standard Error: 9_548
            .saturating_add(Weight::from_parts(1_821_652, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_223_000 picoseconds.
        Weight::from_parts(3_372_000, 0)
            // Standard Error: 7_769
            .saturating_add(Weight::from_parts(1_166_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_222_000 picoseconds.
        Weight::from_parts(3_383_000, 0)
            // Standard Error: 10_999
            .saturating_add(Weight::from_parts(1_801_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_320_000 picoseconds.
        Weight::from_parts(3_631_000, 0)
            // Standard Error: 8_137
            .saturating_add(Weight::from_parts(1_194_633, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_270_000 picoseconds.
        Weight::from_parts(3_443_000, 0)
            // Standard Error: 10_235
            .saturating_add(Weight::from_parts(1_815_471, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_121_000 picoseconds.
        Weight::from_parts(3_254_000, 0)
            // Standard Error: 8_103
            .saturating_add(Weight::from_parts(1_149_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_231_000 picoseconds.
        Weight::from_parts(3_459_000, 0)
            // Standard Error: 11_623
            .saturating_add(Weight::from_parts(1_871_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_507_000 picoseconds.
        Weight::from_parts(3_615_000, 0)
            // Standard Error: 5_889
            .saturating_add(Weight::from_parts(1_111_845, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_959_000 picoseconds.
        Weight::from_parts(3_146_000, 0)
            // Standard Error: 10_882
            .saturating_add(Weight::from_parts(1_812_293, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_177_000 picoseconds.
        Weight::from_parts(3_332_000, 0)
            // Standard Error: 6_613
            .saturating_add(Weight::from_parts(1_120_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_411_000 picoseconds.
        Weight::from_parts(3_868_000, 0)
            // Standard Error: 11_322
            .saturating_add(Weight::from_parts(1_852_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_136_000 picoseconds.
        Weight::from_parts(3_453_000, 0)
            // Standard Error: 6_583
            .saturating_add(Weight::from_parts(1_107_515, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_405_000 picoseconds.
        Weight::from_parts(3_561_000, 0)
            // Standard Error: 11_202
            .saturating_add(Weight::from_parts(1_874_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_284_000 picoseconds.
        Weight::from_parts(3_655_000, 0)
            // Standard Error: 6_346
            .saturating_add(Weight::from_parts(1_073_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_243_000 picoseconds.
        Weight::from_parts(3_553_000, 0)
            // Standard Error: 11_666
            .saturating_add(Weight::from_parts(1_840_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_264_000 picoseconds.
        Weight::from_parts(3_578_000, 0)
            // Standard Error: 7_052
            .saturating_add(Weight::from_parts(1_138_110, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_393_000 picoseconds.
        Weight::from_parts(3_619_000, 0)
            // Standard Error: 8_614
            .saturating_add(Weight::from_parts(1_796_614, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_139_000 picoseconds.
        Weight::from_parts(3_413_000, 0)
            // Standard Error: 6_771
            .saturating_add(Weight::from_parts(1_115_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_142_000 picoseconds.
        Weight::from_parts(3_363_000, 0)
            // Standard Error: 7_749
            .saturating_add(Weight::from_parts(1_279_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_347_000 picoseconds.
        Weight::from_parts(103_548, 0)
            // Standard Error: 8_341
            .saturating_add(Weight::from_parts(815_538, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_380_000 picoseconds.
        Weight::from_parts(3_507_000, 0)
            // Standard Error: 7_615
            .saturating_add(Weight::from_parts(1_234_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_347_000 picoseconds.
        Weight::from_parts(441_561, 0)
            // Standard Error: 6_087
            .saturating_add(Weight::from_parts(724_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_196_000 picoseconds.
        Weight::from_parts(3_644_000, 0)
            // Standard Error: 9_266
            .saturating_add(Weight::from_parts(1_710_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_264_000 picoseconds.
        Weight::from_parts(3_411_000, 0)
            // Standard Error: 6_589
            .saturating_add(Weight::from_parts(1_280_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_464_000 picoseconds.
        Weight::from_parts(10_118_414, 0)
            // Standard Error: 16_017
            .saturating_add(Weight::from_parts(1_798_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_278_000 picoseconds.
        Weight::from_parts(6_121_365, 0)
            // Standard Error: 13_832
            .saturating_add(Weight::from_parts(1_960_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_434_000 picoseconds.
        Weight::from_parts(7_970_967, 0)
            // Standard Error: 20_649
            .saturating_add(Weight::from_parts(2_148_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_312_000 picoseconds.
        Weight::from_parts(7_752_844, 0)
            // Standard Error: 16_264
            .saturating_add(Weight::from_parts(1_781_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_520_000 picoseconds.
        Weight::from_parts(9_278_635, 0)
            // Standard Error: 28_542
            .saturating_add(Weight::from_parts(7_709_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_237_000 picoseconds.
        Weight::from_parts(6_633_716, 0)
            // Standard Error: 52_385
            .saturating_add(Weight::from_parts(6_401_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_550_000 picoseconds.
        Weight::from_parts(10_886_582, 0)
            // Standard Error: 22_940
            .saturating_add(Weight::from_parts(2_035_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_440_000 picoseconds.
        Weight::from_parts(5_598_623, 0)
            // Standard Error: 14_792
            .saturating_add(Weight::from_parts(1_969_316, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_017_000 picoseconds.
        Weight::from_parts(3_332_000, 0)
            // Standard Error: 7_954
            .saturating_add(Weight::from_parts(1_254_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_050_000 picoseconds.
        Weight::from_parts(729_401, 0)
            // Standard Error: 5_731
            .saturating_add(Weight::from_parts(734_800, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_198_000 picoseconds.
        Weight::from_parts(3_435_000, 0)
            // Standard Error: 8_471
            .saturating_add(Weight::from_parts(1_333_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_235_000 picoseconds.
        Weight::from_parts(3_445_000, 0)
            // Standard Error: 6_516
            .saturating_add(Weight::from_parts(691_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_137_000 picoseconds.
        Weight::from_parts(3_480_000, 0)
            // Standard Error: 6_547
            .saturating_add(Weight::from_parts(1_234_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_345_000 picoseconds.
        Weight::from_parts(1_791_985, 0)
            // Standard Error: 5_108
            .saturating_add(Weight::from_parts(666_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_271_000 picoseconds.
        Weight::from_parts(3_408_000, 0)
            // Standard Error: 6_324
            .saturating_add(Weight::from_parts(1_032_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_051_000 picoseconds.
        Weight::from_parts(703_953, 0)
            // Standard Error: 5_572
            .saturating_add(Weight::from_parts(666_520, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_109_000 picoseconds.
        Weight::from_parts(3_481_000, 0)
            // Standard Error: 6_947
            .saturating_add(Weight::from_parts(1_021_445, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_387_000 picoseconds.
        Weight::from_parts(902_269, 0)
            // Standard Error: 5_705
            .saturating_add(Weight::from_parts(650_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_122_000 picoseconds.
        Weight::from_parts(3_333_000, 0)
            // Standard Error: 7_713
            .saturating_add(Weight::from_parts(1_113_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_388_000 picoseconds.
        Weight::from_parts(3_432_000, 0)
            // Standard Error: 5_508
            .saturating_add(Weight::from_parts(639_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_353_000 picoseconds.
        Weight::from_parts(3_403_000, 0)
            // Standard Error: 6_386
            .saturating_add(Weight::from_parts(1_013_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_164_000 picoseconds.
        Weight::from_parts(1_169_547, 0)
            // Standard Error: 4_975
            .saturating_add(Weight::from_parts(668_661, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_346_000 picoseconds.
        Weight::from_parts(3_817_000, 0)
            // Standard Error: 7_008
            .saturating_add(Weight::from_parts(1_075_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_048_000 picoseconds.
        Weight::from_parts(1_416_167, 0)
            // Standard Error: 4_375
            .saturating_add(Weight::from_parts(657_477, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 930_000 picoseconds.
        Weight::from_parts(995_000, 0)
            // Standard Error: 690
            .saturating_add(Weight::from_parts(245_182, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + c * (1024 ±0)`
        //  Estimated: `3577 + c * (1024 ±0)`
        // Minimum execution time: 3_205_000 picoseconds.
        Weight::from_parts(3_321_000, 3577)
            // Standard Error: 1_474
            .saturating_add(Weight::from_parts(685_930, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 130_766_000 picoseconds.
        Weight::from_parts(156_247_000, 0)
            // Standard Error: 202_466
            .saturating_add(Weight::from_parts(105_969_489, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1050`
        //  Estimated: `42875`
        // Minimum execution time: 83_955_000 picoseconds.
        Weight::from_parts(86_094_000, 42875)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `958`
        //  Estimated: `21477`
        // Minimum execution time: 55_918_000 picoseconds.
        Weight::from_parts(57_673_000, 21477)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `605`
        //  Estimated: `17354`
        // Minimum execution time: 29_691_000 picoseconds.
        Weight::from_parts(31_372_000, 17354)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_200_000 picoseconds.
        Weight::from_parts(4_302_974, 7640)
            // Standard Error: 29_620
            .saturating_add(Weight::from_parts(16_339_798, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1506 + c * (16389 ±0)`
        //  Estimated: `42570 + c * (131112 ±0)`
        // Minimum execution time: 71_538_000 picoseconds.
        Weight::from_parts(72_366_000, 42570)
            // Standard Error: 596_365
            .saturating_add(Weight::from_parts(84_357_389, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `5270`
        // Minimum execution time: 63_763_000 picoseconds.
        Weight::from_parts(49_524_315, 5270)
            // Standard Error: 37_040
            .saturating_add(Weight::from_parts(52_364_351, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `809`
        //  Estimated: `40156`
        // Minimum execution time: 65_520_000 picoseconds.
        Weight::from_parts(98_501_837, 40156)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_588, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306`
        //  Estimated: `35235`
        // Minimum execution time: 10_996_339_000 picoseconds.
        Weight::from_parts(202_788_932, 35235)
            // Standard Error: 159_572
            .saturating_add(Weight::from_parts(52_574_528, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_539, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `349`
        //  Estimated: `23860`
        // Minimum execution time: 56_239_000 picoseconds.
        Weight::from_parts(29_169_702, 23860)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_195, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `452`
        //  Estimated: `27184`
        // Minimum execution time: 59_553_000 picoseconds.
        Weight::from_parts(39_290_485, 27184)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_190, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1049`
        //  Estimated: `42866`
        // Minimum execution time: 87_017_000 picoseconds.
        Weight::from_parts(72_311_846, 42866)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_179, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1152`
        //  Estimated: `46396`
        // Minimum execution time: 95_484_000 picoseconds.
        Weight::from_parts(78_116_075, 46396)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_185, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85981`
        // Minimum execution time: 475_423_000 picoseconds.
        Weight::from_parts(543_177_649, 85981)
            // Standard Error: 7_098
            .saturating_add(Weight::from_parts(29_669, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `85905`
        // Minimum execution time: 523_058_000 picoseconds.
        Weight::from_parts(612_885_876, 85905)
            .saturating_add(RocksDbWeight::get().reads(29_u64))
            .saturating_add(RocksDbWeight::get().writes(23_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 46_204_000 picoseconds.
        Weight::from_parts(46_705_000, 3899)
            // Standard Error: 25_115
            .saturating_add(Weight::from_parts(51_743_915, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 296_068_000 picoseconds.
        Weight::from_parts(271_423_778, 0)
            // Standard Error: 1_090_951
            .saturating_add(Weight::from_parts(386_634_413, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 678_529_000 picoseconds.
        Weight::from_parts(667_314_487, 0)
            // Standard Error: 1_479_205
            .saturating_add(Weight::from_parts(396_533_123, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 280_067_000 picoseconds.
        Weight::from_parts(357_550_696, 0)
            // Standard Error: 15_351
            .saturating_add(Weight::from_parts(4_731_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 401_278_000 picoseconds.
        Weight::from_parts(448_489_984, 0)
            // Standard Error: 15_365
            .saturating_add(Weight::from_parts(4_666_813, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_437_000 picoseconds.
        Weight::from_parts(380_814_911, 0)
            // Standard Error: 307_250
            .saturating_add(Weight::from_parts(258_406_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 300_117_000 picoseconds.
        Weight::from_parts(345_102_213, 0)
            // Standard Error: 229_190
            .saturating_add(Weight::from_parts(247_731_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_289_000 picoseconds.
        Weight::from_parts(349_989_435, 0)
            // Standard Error: 217_438
            .saturating_add(Weight::from_parts(249_427_913, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_642_000 picoseconds.
        Weight::from_parts(352_859_211, 0)
            // Standard Error: 209_363
            .saturating_add(Weight::from_parts(247_578_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 294_115_000 picoseconds.
        Weight::from_parts(343_421_633, 0)
            // Standard Error: 181_004
            .saturating_add(Weight::from_parts(246_938_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 254_658_000 picoseconds.
        Weight::from_parts(329_607_074, 0)
            // Standard Error: 227_862
            .saturating_add(Weight::from_parts(247_901_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 271_553_000 picoseconds.
        Weight::from_parts(339_421_755, 0)
            // Standard Error: 196_001
            .saturating_add(Weight::from_parts(247_436_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 276_150_000 picoseconds.
        Weight::from_parts(344_864_917, 0)
            // Standard Error: 195_731
            .saturating_add(Weight::from_parts(247_515_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 939_340_000 picoseconds.
        Weight::from_parts(1_037_706_294, 0)
            // Standard Error: 359_069
            .saturating_add(Weight::from_parts(345_841_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_230_838_000 picoseconds.
        Weight::from_parts(1_258_630_000, 0)
            // Standard Error: 53_585
            .saturating_add(Weight::from_parts(13_428_686, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 289_933_000 picoseconds.
        Weight::from_parts(337_752_459, 0)
            // Standard Error: 190_957
            .saturating_add(Weight::from_parts(246_828_260, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 283_818_000 picoseconds.
        Weight::from_parts(348_958_080, 0)
            // Standard Error: 226_576
            .saturating_add(Weight::from_parts(246_542_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_573_000 picoseconds.
        Weight::from_parts(357_903_892, 0)
            // Standard Error: 209_949
            .saturating_add(Weight::from_parts(320_577_890, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 356_411_000 picoseconds.
        Weight::from_parts(367_935_000, 0)
            // Standard Error: 4_015_415
            .saturating_add(Weight::from_parts(1_243_784_283, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_947_000 picoseconds.
        Weight::from_parts(153_588_605, 0)
            // Standard Error: 532_326
            .saturating_add(Weight::from_parts(397_945_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 793_468_000 picoseconds.
        Weight::from_parts(824_505_000, 0)
            // Standard Error: 58_979
            .saturating_add(Weight::from_parts(21_249_410, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_320_000 picoseconds.
        Weight::from_parts(408_176_203, 0)
            // Standard Error: 387_970
            .saturating_add(Weight::from_parts(511_077_784, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 804_142_000 picoseconds.
        Weight::from_parts(837_843_000, 0)
            // Standard Error: 59_235
            .saturating_add(Weight::from_parts(21_613_341, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 958_469_000 picoseconds.
        Weight::from_parts(1_069_301_474, 0)
            // Standard Error: 401_938
            .saturating_add(Weight::from_parts(511_197_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 929_825_000 picoseconds.
        Weight::from_parts(1_025_599_096, 0)
            // Standard Error: 696_532
            .saturating_add(Weight::from_parts(530_726_212, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_913_000 picoseconds.
        Weight::from_parts(329_834_742, 0)
            // Standard Error: 200_128
            .saturating_add(Weight::from_parts(257_383_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_361_986_000 picoseconds.
        Weight::from_parts(5_542_583_480, 0)
            // Standard Error: 1_005_864
            .saturating_add(Weight::from_parts(454_022_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 940_065_000 picoseconds.
        Weight::from_parts(969_839_000, 0)
            // Standard Error: 46_049
            .saturating_add(Weight::from_parts(31_268_864, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_399_044_000 picoseconds.
        Weight::from_parts(5_511_853_678, 0)
            // Standard Error: 951_733
            .saturating_add(Weight::from_parts(520_230_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_454_788_000 picoseconds.
        Weight::from_parts(5_456_058_093, 0)
            // Standard Error: 1_341_645
            .saturating_add(Weight::from_parts(565_335_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 465_462_000 picoseconds.
        Weight::from_parts(560_982_753, 0)
            // Standard Error: 361_805
            .saturating_add(Weight::from_parts(504_990_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 955_854_000 picoseconds.
        Weight::from_parts(1_005_351_000, 0)
            // Standard Error: 62_076
            .saturating_add(Weight::from_parts(21_509_577, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_616_337_000 picoseconds.
        Weight::from_parts(5_691_584_026, 0)
            // Standard Error: 1_164_872
            .saturating_add(Weight::from_parts(544_143_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_480_000 picoseconds.
        Weight::from_parts(344_450_246, 0)
            // Standard Error: 3_155_782
            .saturating_add(Weight::from_parts(28_746_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 334_682_000 picoseconds.
        Weight::from_parts(372_424_884, 0)
            // Standard Error: 1_510
            .saturating_add(Weight::from_parts(422_569, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 263_892_000 picoseconds.
        Weight::from_parts(344_999_695, 0)
            // Standard Error: 2_982_317
            .saturating_add(Weight::from_parts(24_247_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 317_617_000 picoseconds.
        Weight::from_parts(368_904_735, 0)
            // Standard Error: 1_349
            .saturating_add(Weight::from_parts(430_846, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 254_854_000 picoseconds.
        Weight::from_parts(338_164_895, 0)
            // Standard Error: 3_091_039
            .saturating_add(Weight::from_parts(51_707_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 270_632_000 picoseconds.
        Weight::from_parts(341_772_779, 0)
            // Standard Error: 3_048_745
            .saturating_add(Weight::from_parts(28_523_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 273_255_000 picoseconds.
        Weight::from_parts(383_832_820, 0)
            // Standard Error: 314_856
            .saturating_add(Weight::from_parts(352_633_697, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 337_743_000 picoseconds.
        Weight::from_parts(73_484_268, 0)
            // Standard Error: 4_129
            .saturating_add(Weight::from_parts(716_935, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 932_282_000 picoseconds.
        Weight::from_parts(1_014_122_091, 0)
            // Standard Error: 5_294_492
            .saturating_add(Weight::from_parts(45_787_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 928_852_000 picoseconds.
        Weight::from_parts(1_048_918_008, 0)
            // Standard Error: 7_287_862
            .saturating_add(Weight::from_parts(66_437_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_649_000 picoseconds.
        Weight::from_parts(373_719_173, 0)
            // Standard Error: 3_155_404
            .saturating_add(Weight::from_parts(11_838_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 356_161_000 picoseconds.
        Weight::from_parts(375_425_597, 0)
            // Standard Error: 1_342
            .saturating_add(Weight::from_parts(430_596, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 306_963_000 picoseconds.
        Weight::from_parts(371_953_759, 0)
            // Standard Error: 2_951_302
            .saturating_add(Weight::from_parts(22_078_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 322_275_000 picoseconds.
        Weight::from_parts(376_438_708, 0)
            // Standard Error: 1_496
            .saturating_add(Weight::from_parts(425_607, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 299_264_000 picoseconds.
        Weight::from_parts(361_984_806, 0)
            // Standard Error: 197_390
            .saturating_add(Weight::from_parts(248_865_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_011_000 picoseconds.
        Weight::from_parts(336_117_158, 0)
            // Standard Error: 205_064
            .saturating_add(Weight::from_parts(253_056_648, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 980_557_000 picoseconds.
        Weight::from_parts(1_059_667_879, 0)
            // Standard Error: 328_031
            .saturating_add(Weight::from_parts(281_844_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_025_546_000 picoseconds.
        Weight::from_parts(1_106_523_953, 0)
            // Standard Error: 3_068
            .saturating_add(Weight::from_parts(158_016, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_283_583_000 picoseconds.
        Weight::from_parts(6_374_484_920, 0)
            // Standard Error: 1_105_954
            .saturating_add(Weight::from_parts(387_517_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_647_794_000 picoseconds.
        Weight::from_parts(6_823_375_518, 0)
            // Standard Error: 10_730
            .saturating_add(Weight::from_parts(13_634_780, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 311_582_000 picoseconds.
        Weight::from_parts(379_554_548, 0)
            // Standard Error: 279_719
            .saturating_add(Weight::from_parts(269_826_460, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 461_962_000 picoseconds.
        Weight::from_parts(492_501_000, 0)
            // Standard Error: 51_685
            .saturating_add(Weight::from_parts(25_782_283, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_407_000 picoseconds.
        Weight::from_parts(347_782_585, 0)
            // Standard Error: 194_144
            .saturating_add(Weight::from_parts(247_064_773, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 253_506_000 picoseconds.
        Weight::from_parts(337_357_397, 0)
            // Standard Error: 3_051_997
            .saturating_add(Weight::from_parts(41_019_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 258_822_000 picoseconds.
        Weight::from_parts(332_877_106, 0)
            // Standard Error: 2_759_124
            .saturating_add(Weight::from_parts(21_840_893, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 247_637_000 picoseconds.
        Weight::from_parts(332_506_451, 0)
            // Standard Error: 2_821_741
            .saturating_add(Weight::from_parts(9_444_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 255_694_000 picoseconds.
        Weight::from_parts(335_767_608, 0)
            // Standard Error: 3_015_819
            .saturating_add(Weight::from_parts(2_414_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 266_175_000 picoseconds.
        Weight::from_parts(332_500_422, 0)
            // Standard Error: 3_075_929
            .saturating_add(Weight::from_parts(6_262_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 382_970_000 picoseconds.
        Weight::from_parts(443_930_311, 0)
            // Standard Error: 330_144
            .saturating_add(Weight::from_parts(369_420_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 333_766_000 picoseconds.
        Weight::from_parts(385_835_786, 0)
            // Standard Error: 355_922
            .saturating_add(Weight::from_parts(595_990_167, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_795_157_000 picoseconds.
        Weight::from_parts(45_340_853_000, 0)
            // Standard Error: 266_075
            .saturating_add(Weight::from_parts(7_465_076, 0).saturating_mul(p.into()))
            // Standard Error: 266_062
            .saturating_add(Weight::from_parts(177_786_840, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 319_551_000 picoseconds.
        Weight::from_parts(371_987_882, 0)
            // Standard Error: 370_941
            .saturating_add(Weight::from_parts(612_471_926, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_758_761_000 picoseconds.
        Weight::from_parts(43_934_670_000, 0)
            // Standard Error: 259_894
            .saturating_add(Weight::from_parts(8_165_091, 0).saturating_mul(p.into()))
            // Standard Error: 259_881
            .saturating_add(Weight::from_parts(178_337_546, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 267_873_000 picoseconds.
        Weight::from_parts(359_425_286, 0)
            // Standard Error: 101_612
            .saturating_add(Weight::from_parts(4_469_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 292_020_000 picoseconds.
        Weight::from_parts(314_027_156, 1131)
            // Standard Error: 9_308
            .saturating_add(Weight::from_parts(15_650_656, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 284_489_000 picoseconds.
        Weight::from_parts(307_876_000, 1131)
            // Standard Error: 71_487
            .saturating_add(Weight::from_parts(42_708_701, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_401_693_000 picoseconds.
        Weight::from_parts(8_415_630_246, 5069931)
            // Standard Error: 58_184
            .saturating_add(Weight::from_parts(43_946_052, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 292_665_000 picoseconds.
        Weight::from_parts(184_017_519, 1939)
            // Standard Error: 35_418
            .saturating_add(Weight::from_parts(52_307_099, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 300_402_000 picoseconds.
        Weight::from_parts(361_882_054, 1131)
            // Standard Error: 87_568
            .saturating_add(Weight::from_parts(36_861_315, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 960_665_000 picoseconds.
        Weight::from_parts(1_016_327_045, 1496)
            // Standard Error: 173_980
            .saturating_add(Weight::from_parts(47_631_534, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_476_893_000 picoseconds.
        Weight::from_parts(1_529_105_183, 317931)
            // Standard Error: 174_276
            .saturating_add(Weight::from_parts(47_362_231, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_370_960_000 picoseconds.
        Weight::from_parts(4_385_051_628, 0)
            // Standard Error: 10_587
            .saturating_add(Weight::from_parts(3_318_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_364_773_000 picoseconds.
        Weight::from_parts(4_388_371_143, 0)
            // Standard Error: 11_402
            .saturating_add(Weight::from_parts(3_324_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_634_521_000 picoseconds.
        Weight::from_parts(11_014_591_178, 0)
            // Standard Error: 172_578
            .saturating_add(Weight::from_parts(16_758_157, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_159_385_000 picoseconds.
        Weight::from_parts(11_022_980_875, 0)
            // Standard Error: 239_903
            .saturating_add(Weight::from_parts(13_697_227, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_840_000 picoseconds.
        Weight::from_parts(1_034_136, 0)
            // Standard Error: 13_043
            .saturating_add(Weight::from_parts(3_820_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_211_000 picoseconds.
        Weight::from_parts(2_974_787, 0)
            // Standard Error: 7_303
            .saturating_add(Weight::from_parts(3_117_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_967_000 picoseconds.
        Weight::from_parts(3_411_822, 0)
            // Standard Error: 3_101
            .saturating_add(Weight::from_parts(1_671_961, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_291_000 picoseconds.
        Weight::from_parts(3_429_000, 0)
            // Standard Error: 8_500
            .saturating_add(Weight::from_parts(2_862_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_366_000 picoseconds.
        Weight::from_parts(9_230_207, 0)
            // Standard Error: 21_227
            .saturating_add(Weight::from_parts(4_561_589, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_765_000 picoseconds.
        Weight::from_parts(6_707_153, 0)
            // Standard Error: 1_171
            .saturating_add(Weight::from_parts(160_717, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_421_000 picoseconds.
        Weight::from_parts(6_249_474, 0)
            // Standard Error: 7_561
            .saturating_add(Weight::from_parts(2_603_036, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_603_036 -
            2_408_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_409_000 picoseconds.
        Weight::from_parts(5_520_805, 0)
            // Standard Error: 12_137
            .saturating_add(Weight::from_parts(2_408_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_647_000 picoseconds.
        Weight::from_parts(28_799_516, 0)
            // Standard Error: 36_471
            .saturating_add(Weight::from_parts(8_713_380, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 14_760_000 picoseconds.
        Weight::from_parts(6_549_007, 0)
            // Standard Error: 6_911
            .saturating_add(Weight::from_parts(1_138_525, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_382_000 picoseconds.
        Weight::from_parts(6_796_661, 0)
            // Standard Error: 21
            .saturating_add(Weight::from_parts(192, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_280_000 picoseconds.
        Weight::from_parts(2_445_718, 0)
            // Standard Error: 3_421
            .saturating_add(Weight::from_parts(273_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_434_000 picoseconds.
        Weight::from_parts(3_544_000, 0)
            // Standard Error: 5_218
            .saturating_add(Weight::from_parts(789_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_080_000 picoseconds.
        Weight::from_parts(3_391_000, 0)
            // Standard Error: 5_656
            .saturating_add(Weight::from_parts(816_318, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_504_000 picoseconds.
        Weight::from_parts(4_911_074, 0)
            // Standard Error: 5_038
            .saturating_add(Weight::from_parts(794_596, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_446_000 picoseconds.
        Weight::from_parts(617_169, 0)
            // Standard Error: 11_109
            .saturating_add(Weight::from_parts(1_547_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_232_000 picoseconds.
        Weight::from_parts(2_483_464, 0)
            // Standard Error: 12_789
            .saturating_add(Weight::from_parts(6_850_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_097_000 picoseconds.
        Weight::from_parts(381_182, 0)
            // Standard Error: 11_419
            .saturating_add(Weight::from_parts(3_327_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_060_000 picoseconds.
        Weight::from_parts(171_113, 0)
            // Standard Error: 8_615
            .saturating_add(Weight::from_parts(3_124_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_402_000 picoseconds.
        Weight::from_parts(3_561_000, 0)
            // Standard Error: 6_423
            .saturating_add(Weight::from_parts(3_014_982, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_106_000 picoseconds.
        Weight::from_parts(3_282_000, 0)
            // Standard Error: 6_054
            .saturating_add(Weight::from_parts(2_615_766, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_333_000 picoseconds.
        Weight::from_parts(467_712, 0)
            // Standard Error: 6_019
            .saturating_add(Weight::from_parts(727_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_054_000 picoseconds.
        Weight::from_parts(2_378_304, 0)
            // Standard Error: 3_206
            .saturating_add(Weight::from_parts(407_035, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_412_000 picoseconds.
        Weight::from_parts(3_523_000, 0)
            // Standard Error: 11_551
            .saturating_add(Weight::from_parts(1_844_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_527_000 picoseconds.
        Weight::from_parts(3_700_000, 0)
            // Standard Error: 8_386
            .saturating_add(Weight::from_parts(1_137_715, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_249_000 picoseconds.
        Weight::from_parts(2_179_196, 0)
            // Standard Error: 4_700
            .saturating_add(Weight::from_parts(437_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_396_000 picoseconds.
        Weight::from_parts(2_861_237, 0)
            // Standard Error: 3_587
            .saturating_add(Weight::from_parts(399_361, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_125_000 picoseconds.
        Weight::from_parts(349_448, 0)
            // Standard Error: 6_646
            .saturating_add(Weight::from_parts(658_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_142_000 picoseconds.
        Weight::from_parts(1_993_200, 0)
            // Standard Error: 4_360
            .saturating_add(Weight::from_parts(563_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_109_000 picoseconds.
        Weight::from_parts(909_975, 0)
            // Standard Error: 5_781
            .saturating_add(Weight::from_parts(550_586, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_253_000 picoseconds.
        Weight::from_parts(2_412_990, 0)
            // Standard Error: 3_386
            .saturating_add(Weight::from_parts(371_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_993_000 picoseconds.
        Weight::from_parts(1_979_153, 0)
            // Standard Error: 4_611
            .saturating_add(Weight::from_parts(258_250, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_128_000 picoseconds.
        Weight::from_parts(2_325_923, 0)
            // Standard Error: 4_415
            .saturating_add(Weight::from_parts(274_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_176_000 picoseconds.
        Weight::from_parts(3_736_000, 0)
            // Standard Error: 9_665
            .saturating_add(Weight::from_parts(1_815_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_254_000 picoseconds.
        Weight::from_parts(3_542_000, 0)
            // Standard Error: 6_202
            .saturating_add(Weight::from_parts(1_106_742, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_348_000 picoseconds.
        Weight::from_parts(3_653_000, 0)
            // Standard Error: 9_548
            .saturating_add(Weight::from_parts(1_821_652, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_223_000 picoseconds.
        Weight::from_parts(3_372_000, 0)
            // Standard Error: 7_769
            .saturating_add(Weight::from_parts(1_166_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_222_000 picoseconds.
        Weight::from_parts(3_383_000, 0)
            // Standard Error: 10_999
            .saturating_add(Weight::from_parts(1_801_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_320_000 picoseconds.
        Weight::from_parts(3_631_000, 0)
            // Standard Error: 8_137
            .saturating_add(Weight::from_parts(1_194_633, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_270_000 picoseconds.
        Weight::from_parts(3_443_000, 0)
            // Standard Error: 10_235
            .saturating_add(Weight::from_parts(1_815_471, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_121_000 picoseconds.
        Weight::from_parts(3_254_000, 0)
            // Standard Error: 8_103
            .saturating_add(Weight::from_parts(1_149_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_231_000 picoseconds.
        Weight::from_parts(3_459_000, 0)
            // Standard Error: 11_623
            .saturating_add(Weight::from_parts(1_871_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_507_000 picoseconds.
        Weight::from_parts(3_615_000, 0)
            // Standard Error: 5_889
            .saturating_add(Weight::from_parts(1_111_845, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_959_000 picoseconds.
        Weight::from_parts(3_146_000, 0)
            // Standard Error: 10_882
            .saturating_add(Weight::from_parts(1_812_293, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_177_000 picoseconds.
        Weight::from_parts(3_332_000, 0)
            // Standard Error: 6_613
            .saturating_add(Weight::from_parts(1_120_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_411_000 picoseconds.
        Weight::from_parts(3_868_000, 0)
            // Standard Error: 11_322
            .saturating_add(Weight::from_parts(1_852_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_136_000 picoseconds.
        Weight::from_parts(3_453_000, 0)
            // Standard Error: 6_583
            .saturating_add(Weight::from_parts(1_107_515, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_405_000 picoseconds.
        Weight::from_parts(3_561_000, 0)
            // Standard Error: 11_202
            .saturating_add(Weight::from_parts(1_874_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_284_000 picoseconds.
        Weight::from_parts(3_655_000, 0)
            // Standard Error: 6_346
            .saturating_add(Weight::from_parts(1_073_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_243_000 picoseconds.
        Weight::from_parts(3_553_000, 0)
            // Standard Error: 11_666
            .saturating_add(Weight::from_parts(1_840_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_264_000 picoseconds.
        Weight::from_parts(3_578_000, 0)
            // Standard Error: 7_052
            .saturating_add(Weight::from_parts(1_138_110, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_393_000 picoseconds.
        Weight::from_parts(3_619_000, 0)
            // Standard Error: 8_614
            .saturating_add(Weight::from_parts(1_796_614, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_139_000 picoseconds.
        Weight::from_parts(3_413_000, 0)
            // Standard Error: 6_771
            .saturating_add(Weight::from_parts(1_115_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_142_000 picoseconds.
        Weight::from_parts(3_363_000, 0)
            // Standard Error: 7_749
            .saturating_add(Weight::from_parts(1_279_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_347_000 picoseconds.
        Weight::from_parts(103_548, 0)
            // Standard Error: 8_341
            .saturating_add(Weight::from_parts(815_538, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_380_000 picoseconds.
        Weight::from_parts(3_507_000, 0)
            // Standard Error: 7_615
            .saturating_add(Weight::from_parts(1_234_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_347_000 picoseconds.
        Weight::from_parts(441_561, 0)
            // Standard Error: 6_087
            .saturating_add(Weight::from_parts(724_189, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_196_000 picoseconds.
        Weight::from_parts(3_644_000, 0)
            // Standard Error: 9_266
            .saturating_add(Weight::from_parts(1_710_406, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_264_000 picoseconds.
        Weight::from_parts(3_411_000, 0)
            // Standard Error: 6_589
            .saturating_add(Weight::from_parts(1_280_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_464_000 picoseconds.
        Weight::from_parts(10_118_414, 0)
            // Standard Error: 16_017
            .saturating_add(Weight::from_parts(1_798_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_278_000 picoseconds.
        Weight::from_parts(6_121_365, 0)
            // Standard Error: 13_832
            .saturating_add(Weight::from_parts(1_960_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_434_000 picoseconds.
        Weight::from_parts(7_970_967, 0)
            // Standard Error: 20_649
            .saturating_add(Weight::from_parts(2_148_536, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_312_000 picoseconds.
        Weight::from_parts(7_752_844, 0)
            // Standard Error: 16_264
            .saturating_add(Weight::from_parts(1_781_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_520_000 picoseconds.
        Weight::from_parts(9_278_635, 0)
            // Standard Error: 28_542
            .saturating_add(Weight::from_parts(7_709_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_237_000 picoseconds.
        Weight::from_parts(6_633_716, 0)
            // Standard Error: 52_385
            .saturating_add(Weight::from_parts(6_401_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_550_000 picoseconds.
        Weight::from_parts(10_886_582, 0)
            // Standard Error: 22_940
            .saturating_add(Weight::from_parts(2_035_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_440_000 picoseconds.
        Weight::from_parts(5_598_623, 0)
            // Standard Error: 14_792
            .saturating_add(Weight::from_parts(1_969_316, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_017_000 picoseconds.
        Weight::from_parts(3_332_000, 0)
            // Standard Error: 7_954
            .saturating_add(Weight::from_parts(1_254_888, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_050_000 picoseconds.
        Weight::from_parts(729_401, 0)
            // Standard Error: 5_731
            .saturating_add(Weight::from_parts(734_800, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_198_000 picoseconds.
        Weight::from_parts(3_435_000, 0)
            // Standard Error: 8_471
            .saturating_add(Weight::from_parts(1_333_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_235_000 picoseconds.
        Weight::from_parts(3_445_000, 0)
            // Standard Error: 6_516
            .saturating_add(Weight::from_parts(691_896, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_137_000 picoseconds.
        Weight::from_parts(3_480_000, 0)
            // Standard Error: 6_547
            .saturating_add(Weight::from_parts(1_234_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_345_000 picoseconds.
        Weight::from_parts(1_791_985, 0)
            // Standard Error: 5_108
            .saturating_add(Weight::from_parts(666_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_271_000 picoseconds.
        Weight::from_parts(3_408_000, 0)
            // Standard Error: 6_324
            .saturating_add(Weight::from_parts(1_032_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_051_000 picoseconds.
        Weight::from_parts(703_953, 0)
            // Standard Error: 5_572
            .saturating_add(Weight::from_parts(666_520, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_109_000 picoseconds.
        Weight::from_parts(3_481_000, 0)
            // Standard Error: 6_947
            .saturating_add(Weight::from_parts(1_021_445, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_387_000 picoseconds.
        Weight::from_parts(902_269, 0)
            // Standard Error: 5_705
            .saturating_add(Weight::from_parts(650_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_122_000 picoseconds.
        Weight::from_parts(3_333_000, 0)
            // Standard Error: 7_713
            .saturating_add(Weight::from_parts(1_113_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_388_000 picoseconds.
        Weight::from_parts(3_432_000, 0)
            // Standard Error: 5_508
            .saturating_add(Weight::from_parts(639_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_353_000 picoseconds.
        Weight::from_parts(3_403_000, 0)
            // Standard Error: 6_386
            .saturating_add(Weight::from_parts(1_013_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_164_000 picoseconds.
        Weight::from_parts(1_169_547, 0)
            // Standard Error: 4_975
            .saturating_add(Weight::from_parts(668_661, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_346_000 picoseconds.
        Weight::from_parts(3_817_000, 0)
            // Standard Error: 7_008
            .saturating_add(Weight::from_parts(1_075_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_048_000 picoseconds.
        Weight::from_parts(1_416_167, 0)
            // Standard Error: 4_375
            .saturating_add(Weight::from_parts(657_477, 0).saturating_mul(r.into()))
    }
}
