// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_in_handle,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_gas_available,gr_message_id,gr_pay_program_rent,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,initial_allocation,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,pay_program_rent,reinstrument_per_kb,resume_session_commit,resume_session_init,resume_session_push,send_message,send_reply,tasks_pause_program,tasks_pause_program_uninited,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_remove_resume_session,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_resume_session() -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn tasks_pause_program(c: u32, ) -> Weight;
    fn tasks_pause_program_uninited(c: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_711_000 picoseconds.
        Weight::from_parts(110_753_586, 0)
            // Standard Error: 79_314
            .saturating_add(Weight::from_parts(13_383_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_619_000 picoseconds.
        Weight::from_parts(115_317_258, 0)
            // Standard Error: 90_253
            .saturating_add(Weight::from_parts(11_638_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_533_000 picoseconds.
        Weight::from_parts(110_769_528, 0)
            // Standard Error: 94_554
            .saturating_add(Weight::from_parts(9_973_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_487_000 picoseconds.
        Weight::from_parts(107_668_288, 0)
            // Standard Error: 80_757
            .saturating_add(Weight::from_parts(16_853_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_660_000 picoseconds.
        Weight::from_parts(609_719_068, 0)
            // Standard Error: 642_180
            .saturating_add(Weight::from_parts(13_806_670, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 577_778_000 picoseconds.
        Weight::from_parts(611_075_450, 0)
            // Standard Error: 737_165
            .saturating_add(Weight::from_parts(21_935_856, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_414_000 picoseconds.
        Weight::from_parts(118_249_508, 0)
            // Standard Error: 86_352
            .saturating_add(Weight::from_parts(3_353_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_505_000 picoseconds.
        Weight::from_parts(117_409_508, 0)
            // Standard Error: 84_771
            .saturating_add(Weight::from_parts(8_635_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_299_000 picoseconds.
        Weight::from_parts(105_862_588, 0)
            // Standard Error: 2_507_419
            .saturating_add(Weight::from_parts(169_883_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_092_000 picoseconds.
        Weight::from_parts(105_908_694, 0)
            // Standard Error: 2_587_224
            .saturating_add(Weight::from_parts(162_967_868, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_414_000 picoseconds.
        Weight::from_parts(106_539_882, 0)
            // Standard Error: 1_418_536
            .saturating_add(Weight::from_parts(104_555_156, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_215_000 picoseconds.
        Weight::from_parts(106_024_798, 0)
            // Standard Error: 2_099_606
            .saturating_add(Weight::from_parts(136_358_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_070_000 picoseconds.
        Weight::from_parts(104_796_248, 0)
            // Standard Error: 2_586_285
            .saturating_add(Weight::from_parts(161_698_916, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 948_000 picoseconds.
        Weight::from_parts(1_040_000, 0)
            // Standard Error: 775
            .saturating_add(Weight::from_parts(208_176, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_319_000 picoseconds.
        Weight::from_parts(3_444_000, 3610)
            // Standard Error: 855
            .saturating_add(Weight::from_parts(733_484, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_174_000 picoseconds.
        Weight::from_parts(99_637_457, 0)
            // Standard Error: 14_870
            .saturating_add(Weight::from_parts(2_568_044, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1372`
        //  Estimated: `51905`
        // Minimum execution time: 107_139_000 picoseconds.
        Weight::from_parts(109_386_000, 51905)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `992`
        //  Estimated: `21579`
        // Minimum execution time: 56_065_000 picoseconds.
        Weight::from_parts(57_692_000, 21579)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17486`
        // Minimum execution time: 30_120_000 picoseconds.
        Weight::from_parts(30_965_000, 17486)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_018_000 picoseconds.
        Weight::from_parts(7_775_084, 7640)
            // Standard Error: 35_415
            .saturating_add(Weight::from_parts(14_245_029, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1593 + c * (16389 ±0)`
        //  Estimated: `43266 + c * (131112 ±0)`
        // Minimum execution time: 71_435_000 picoseconds.
        Weight::from_parts(72_889_000, 43266)
            // Standard Error: 161_407
            .saturating_add(Weight::from_parts(54_636_395, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 87_439_000 picoseconds.
        Weight::from_parts(58_533_907, 5402)
            // Standard Error: 49_058
            .saturating_add(Weight::from_parts(60_028_986, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 93_744_000 picoseconds.
        Weight::from_parts(134_431_926, 50600)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_621, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 11_155_105_000 picoseconds.
        Weight::from_parts(488_669_801, 45152)
            // Standard Error: 161_988
            .saturating_add(Weight::from_parts(59_685_479, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_538, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `31266`
        // Minimum execution time: 73_564_000 picoseconds.
        Weight::from_parts(46_921_979, 31266)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_111, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1371`
        //  Estimated: `54435`
        // Minimum execution time: 124_711_000 picoseconds.
        Weight::from_parts(106_032_158, 54435)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_118, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 375_977_000 picoseconds.
        Weight::from_parts(394_896_238, 121468)
            .saturating_add(T::DbWeight::get().reads(35_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 395_472_000 picoseconds.
        Weight::from_parts(414_213_883, 121468)
            // Standard Error: 1_935
            .saturating_add(Weight::from_parts(1_860, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(35_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 67_589_000 picoseconds.
        Weight::from_parts(68_114_000, 3899)
            // Standard Error: 34_374
            .saturating_add(Weight::from_parts(58_490_342, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_290_000 picoseconds.
        Weight::from_parts(98_051_000, 0)
            // Standard Error: 3_674_974
            .saturating_add(Weight::from_parts(692_844_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 473_577_000 picoseconds.
        Weight::from_parts(425_044_188, 0)
            // Standard Error: 7_044
            .saturating_add(Weight::from_parts(28_873_796, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 206_366_000 picoseconds.
        Weight::from_parts(207_349_350, 0)
            // Standard Error: 270_169
            .saturating_add(Weight::from_parts(63_805_905, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_908_000 picoseconds.
        Weight::from_parts(107_648_854, 0)
            // Standard Error: 4_003
            .saturating_add(Weight::from_parts(2_304_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 179_663_000 picoseconds.
        Weight::from_parts(232_151_302, 0)
            // Standard Error: 18_587
            .saturating_add(Weight::from_parts(1_769_501, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_038_000 picoseconds.
        Weight::from_parts(121_080_383, 0)
            // Standard Error: 359_485
            .saturating_add(Weight::from_parts(89_648_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_016_000 picoseconds.
        Weight::from_parts(93_318_665, 0)
            // Standard Error: 321_057
            .saturating_add(Weight::from_parts(81_958_539, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_129_000 picoseconds.
        Weight::from_parts(106_854_081, 0)
            // Standard Error: 218_338
            .saturating_add(Weight::from_parts(77_570_721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_078_000 picoseconds.
        Weight::from_parts(94_730_793, 0)
            // Standard Error: 324_777
            .saturating_add(Weight::from_parts(79_957_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_516_000 picoseconds.
        Weight::from_parts(78_961_141, 0)
            // Standard Error: 384_233
            .saturating_add(Weight::from_parts(87_508_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_180_000 picoseconds.
        Weight::from_parts(87_060_643, 0)
            // Standard Error: 338_665
            .saturating_add(Weight::from_parts(81_114_908, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_723_000 picoseconds.
        Weight::from_parts(92_147_563, 0)
            // Standard Error: 399_750
            .saturating_add(Weight::from_parts(80_226_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_549_000 picoseconds.
        Weight::from_parts(88_060_819, 0)
            // Standard Error: 351_358
            .saturating_add(Weight::from_parts(80_446_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_457_000 picoseconds.
        Weight::from_parts(636_296_457, 0)
            // Standard Error: 483_647
            .saturating_add(Weight::from_parts(112_986_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 694_858_000 picoseconds.
        Weight::from_parts(709_803_000, 0)
            // Standard Error: 58_365
            .saturating_add(Weight::from_parts(13_172_837, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_181_000 picoseconds.
        Weight::from_parts(82_113_552, 0)
            // Standard Error: 361_593
            .saturating_add(Weight::from_parts(83_933_443, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_878_000 picoseconds.
        Weight::from_parts(91_050_595, 0)
            // Standard Error: 340_221
            .saturating_add(Weight::from_parts(79_306_855, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_859_000 picoseconds.
        Weight::from_parts(112_593_140, 0)
            // Standard Error: 398_933
            .saturating_add(Weight::from_parts(158_218_455, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_128_000 picoseconds.
        Weight::from_parts(103_363_000, 0)
            // Standard Error: 3_679_109
            .saturating_add(Weight::from_parts(749_724_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_918_000 picoseconds.
        Weight::from_parts(163_432_448, 0)
            // Standard Error: 424_726
            .saturating_add(Weight::from_parts(244_083_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 336_805_000 picoseconds.
        Weight::from_parts(339_715_000, 0)
            // Standard Error: 57_353
            .saturating_add(Weight::from_parts(24_758_437, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_423_000 picoseconds.
        Weight::from_parts(173_031_838, 0)
            // Standard Error: 410_623
            .saturating_add(Weight::from_parts(250_326_158, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 344_992_000 picoseconds.
        Weight::from_parts(349_520_000, 0)
            // Standard Error: 59_962
            .saturating_add(Weight::from_parts(24_610_378, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 578_260_000 picoseconds.
        Weight::from_parts(663_499_401, 0)
            // Standard Error: 441_782
            .saturating_add(Weight::from_parts(258_284_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_551_000 picoseconds.
        Weight::from_parts(661_725_628, 0)
            // Standard Error: 444_035
            .saturating_add(Weight::from_parts(265_845_172, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_453_000 picoseconds.
        Weight::from_parts(80_881_845, 0)
            // Standard Error: 340_263
            .saturating_add(Weight::from_parts(93_159_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_790_968_000 picoseconds.
        Weight::from_parts(1_938_187_856, 0)
            // Standard Error: 337_498
            .saturating_add(Weight::from_parts(145_115_674, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 307_420_000 picoseconds.
        Weight::from_parts(313_741_000, 0)
            // Standard Error: 57_291
            .saturating_add(Weight::from_parts(34_249_097, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_777_201_000 picoseconds.
        Weight::from_parts(1_945_879_929, 0)
            // Standard Error: 338_205
            .saturating_add(Weight::from_parts(205_730_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_787_114_000 picoseconds.
        Weight::from_parts(1_959_605_606, 0)
            // Standard Error: 327_694
            .saturating_add(Weight::from_parts(207_633_911, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 268_341_000 picoseconds.
        Weight::from_parts(337_734_342, 0)
            // Standard Error: 388_989
            .saturating_add(Weight::from_parts(256_640_791, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 514_248_000 picoseconds.
        Weight::from_parts(528_771_000, 0)
            // Standard Error: 57_919
            .saturating_add(Weight::from_parts(25_017_742, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_943_566_000 picoseconds.
        Weight::from_parts(2_113_407_434, 0)
            // Standard Error: 489_819
            .saturating_add(Weight::from_parts(225_593_659, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 115_518_000 picoseconds.
        Weight::from_parts(105_636_149, 0)
            // Standard Error: 1_060
            .saturating_add(Weight::from_parts(490_810, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 121_214_000 picoseconds.
        Weight::from_parts(105_362_894, 0)
            // Standard Error: 1_055
            .saturating_add(Weight::from_parts(487_653, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_817_000 picoseconds.
        Weight::from_parts(132_570_463, 0)
            // Standard Error: 368_221
            .saturating_add(Weight::from_parts(127_546_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_170_000 picoseconds.
        Weight::from_parts(112_494_000, 0)
            // Standard Error: 2_482
            .saturating_add(Weight::from_parts(688_231, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 121_482_000 picoseconds.
        Weight::from_parts(111_457_022, 0)
            // Standard Error: 1_063
            .saturating_add(Weight::from_parts(485_504, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_636_000 picoseconds.
        Weight::from_parts(105_004_936, 0)
            // Standard Error: 1_167
            .saturating_add(Weight::from_parts(490_058, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_023_000 picoseconds.
        Weight::from_parts(100_104_286, 0)
            // Standard Error: 261_229
            .saturating_add(Weight::from_parts(79_975_096, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_277_000 picoseconds.
        Weight::from_parts(89_963_384, 0)
            // Standard Error: 355_702
            .saturating_add(Weight::from_parts(79_419_904, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_524_000 picoseconds.
        Weight::from_parts(92_121_459, 0)
            // Standard Error: 336_846
            .saturating_add(Weight::from_parts(82_284_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_965_000 picoseconds.
        Weight::from_parts(626_076_270, 0)
            // Standard Error: 469_755
            .saturating_add(Weight::from_parts(102_986_836, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 601_260_000 picoseconds.
        Weight::from_parts(626_280_325, 0)
            // Standard Error: 2_141
            .saturating_add(Weight::from_parts(131_281, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_272_455_000 picoseconds.
        Weight::from_parts(2_481_227_076, 0)
            // Standard Error: 595_892
            .saturating_add(Weight::from_parts(120_315_955, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_130_000 picoseconds.
        Weight::from_parts(2_530_827_718, 0)
            // Standard Error: 15_772
            .saturating_add(Weight::from_parts(12_311_431, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_540_000 picoseconds.
        Weight::from_parts(113_909_079, 0)
            // Standard Error: 341_835
            .saturating_add(Weight::from_parts(101_988_694, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 158_129_000 picoseconds.
        Weight::from_parts(161_417_000, 0)
            // Standard Error: 52_998
            .saturating_add(Weight::from_parts(30_350_784, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_308_000 picoseconds.
        Weight::from_parts(91_581_381, 0)
            // Standard Error: 312_905
            .saturating_add(Weight::from_parts(78_230_765, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 171_991_000 picoseconds.
        Weight::from_parts(238_890_965, 0)
            // Standard Error: 251_775
            .saturating_add(Weight::from_parts(137_669_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_159_000 picoseconds.
        Weight::from_parts(175_132_568, 0)
            // Standard Error: 376_534
            .saturating_add(Weight::from_parts(331_058_523, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 49_940_168_000 picoseconds.
        Weight::from_parts(50_182_742_000, 0)
            // Standard Error: 310_833
            .saturating_add(Weight::from_parts(9_447_968, 0).saturating_mul(p.into()))
            // Standard Error: 310_817
            .saturating_add(Weight::from_parts(177_877_948, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_309_000 picoseconds.
        Weight::from_parts(174_660_915, 0)
            // Standard Error: 352_025
            .saturating_add(Weight::from_parts(337_031_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_828_718_000 picoseconds.
        Weight::from_parts(50_990_303_000, 0)
            // Standard Error: 308_086
            .saturating_add(Weight::from_parts(9_337_959, 0).saturating_mul(p.into()))
            // Standard Error: 308_070
            .saturating_add(Weight::from_parts(177_541_220, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_837_000 picoseconds.
        Weight::from_parts(115_275_443, 0)
            // Standard Error: 26_418
            .saturating_add(Weight::from_parts(1_680_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 98_765_000 picoseconds.
        Weight::from_parts(79_245_555, 1131)
            // Standard Error: 38_437
            .saturating_add(Weight::from_parts(19_479_549, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 95_556_000 picoseconds.
        Weight::from_parts(99_389_000, 1131)
            // Standard Error: 41_311
            .saturating_add(Weight::from_parts(47_628_716, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 9_706_000_000 picoseconds.
        Weight::from_parts(10_075_819_214, 5069931)
            // Standard Error: 89_397
            .saturating_add(Weight::from_parts(43_480_750, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 98_782_000 picoseconds.
        Weight::from_parts(101_797_000, 1939)
            // Standard Error: 36_184
            .saturating_add(Weight::from_parts(58_378_622, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 103_884_000 picoseconds.
        Weight::from_parts(114_897_039, 1131)
            // Standard Error: 82_768
            .saturating_add(Weight::from_parts(47_389_557, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 615_875_000 picoseconds.
        Weight::from_parts(633_440_805, 1496)
            // Standard Error: 277_030
            .saturating_add(Weight::from_parts(56_382_321, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_249_344_000 picoseconds.
        Weight::from_parts(1_276_053_178, 317931)
            // Standard Error: 308_561
            .saturating_add(Weight::from_parts(53_842_013, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_180_000 picoseconds.
        Weight::from_parts(5_850_216, 0)
            // Standard Error: 78_307
            .saturating_add(Weight::from_parts(98_343_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_479_207_000 picoseconds.
        Weight::from_parts(4_227_530_372, 0)
            // Standard Error: 75_369
            .saturating_add(Weight::from_parts(5_153_543, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_433_165_000 picoseconds.
        Weight::from_parts(4_172_795_339, 0)
            // Standard Error: 81_707
            .saturating_add(Weight::from_parts(5_333_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_708_906_000 picoseconds.
        Weight::from_parts(11_550_760_752, 0)
            // Standard Error: 180_093
            .saturating_add(Weight::from_parts(11_774_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_838_378_000 picoseconds.
        Weight::from_parts(12_359_412_177, 0)
            // Standard Error: 198_599
            .saturating_add(Weight::from_parts(8_248_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_448_000 picoseconds.
        Weight::from_parts(2_530_000, 0)
            // Standard Error: 7_641
            .saturating_add(Weight::from_parts(3_821_776, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_396_000 picoseconds.
        Weight::from_parts(557_860, 0)
            // Standard Error: 9_036
            .saturating_add(Weight::from_parts(3_199_861, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_343_000 picoseconds.
        Weight::from_parts(3_363_800, 0)
            // Standard Error: 1_184
            .saturating_add(Weight::from_parts(1_578_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_338_000 picoseconds.
        Weight::from_parts(2_401_000, 0)
            // Standard Error: 8_636
            .saturating_add(Weight::from_parts(2_945_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(5_646_626, 0)
            // Standard Error: 22_026
            .saturating_add(Weight::from_parts(4_977_943, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_206_000 picoseconds.
        Weight::from_parts(5_398_988, 0)
            // Standard Error: 1_909
            .saturating_add(Weight::from_parts(171_510, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(5_460_795, 0)
            // Standard Error: 7_767
            .saturating_add(Weight::from_parts(2_568_181, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_568_181 -
            2_443_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(4_695_140, 0)
            // Standard Error: 12_158
            .saturating_add(Weight::from_parts(2_443_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_883_000 picoseconds.
        Weight::from_parts(20_806_951, 0)
            // Standard Error: 28_734
            .saturating_add(Weight::from_parts(9_927_314, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_243_000 picoseconds.
        Weight::from_parts(6_058_590, 0)
            // Standard Error: 6_974
            .saturating_add(Weight::from_parts(1_209_539, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_571_000 picoseconds.
        Weight::from_parts(5_891_635, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_971_000 picoseconds.
        Weight::from_parts(5_390_865, 0)
            // Standard Error: 2_709
            .saturating_add(Weight::from_parts(418_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_946_000 picoseconds.
        Weight::from_parts(2_900_407, 0)
            // Standard Error: 6_946
            .saturating_add(Weight::from_parts(1_128_031, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_953_000 picoseconds.
        Weight::from_parts(3_884_849, 0)
            // Standard Error: 6_394
            .saturating_add(Weight::from_parts(1_065_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_657_000 picoseconds.
        Weight::from_parts(2_410_779, 0)
            // Standard Error: 7_856
            .saturating_add(Weight::from_parts(888_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_488_000 picoseconds.
        Weight::from_parts(463_680, 0)
            // Standard Error: 10_430
            .saturating_add(Weight::from_parts(1_556_776, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_768_000 picoseconds.
        Weight::from_parts(666_674, 0)
            // Standard Error: 15_618
            .saturating_add(Weight::from_parts(7_383_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(2_454_000, 0)
            // Standard Error: 7_007
            .saturating_add(Weight::from_parts(3_432_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_456_000, 0)
            // Standard Error: 7_576
            .saturating_add(Weight::from_parts(3_159_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_427_000, 0)
            // Standard Error: 7_278
            .saturating_add(Weight::from_parts(3_174_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_565_000, 0)
            // Standard Error: 5_110
            .saturating_add(Weight::from_parts(2_700_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_343_000 picoseconds.
        Weight::from_parts(2_428_000, 0)
            // Standard Error: 4_518
            .saturating_add(Weight::from_parts(619_514, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_366_000 picoseconds.
        Weight::from_parts(1_152_712, 0)
            // Standard Error: 4_495
            .saturating_add(Weight::from_parts(465_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_443_000, 0)
            // Standard Error: 10_183
            .saturating_add(Weight::from_parts(1_940_158, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_340_000 picoseconds.
        Weight::from_parts(2_416_000, 0)
            // Standard Error: 7_461
            .saturating_add(Weight::from_parts(1_243_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_419_000 picoseconds.
        Weight::from_parts(1_267_422, 0)
            // Standard Error: 3_910
            .saturating_add(Weight::from_parts(437_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_349_000 picoseconds.
        Weight::from_parts(1_481_553, 0)
            // Standard Error: 3_341
            .saturating_add(Weight::from_parts(421_176, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_445_000, 0)
            // Standard Error: 3_685
            .saturating_add(Weight::from_parts(558_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_418_000 picoseconds.
        Weight::from_parts(2_537_000, 0)
            // Standard Error: 4_366
            .saturating_add(Weight::from_parts(582_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_425_000 picoseconds.
        Weight::from_parts(361_903, 0)
            // Standard Error: 5_359
            .saturating_add(Weight::from_parts(568_819, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_395_000 picoseconds.
        Weight::from_parts(1_858_519, 0)
            // Standard Error: 3_223
            .saturating_add(Weight::from_parts(362_047, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_358_000 picoseconds.
        Weight::from_parts(2_897_877, 0)
            // Standard Error: 1_865
            .saturating_add(Weight::from_parts(169_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_388_000 picoseconds.
        Weight::from_parts(2_871_148, 0)
            // Standard Error: 1_858
            .saturating_add(Weight::from_parts(174_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_390_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 9_672
            .saturating_add(Weight::from_parts(1_882_704, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_360_000 picoseconds.
        Weight::from_parts(2_456_000, 0)
            // Standard Error: 7_471
            .saturating_add(Weight::from_parts(1_231_517, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_465_000 picoseconds.
        Weight::from_parts(2_527_000, 0)
            // Standard Error: 9_958
            .saturating_add(Weight::from_parts(1_896_452, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_388_000 picoseconds.
        Weight::from_parts(2_464_000, 0)
            // Standard Error: 7_397
            .saturating_add(Weight::from_parts(1_246_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 11_956
            .saturating_add(Weight::from_parts(1_945_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_329_000 picoseconds.
        Weight::from_parts(2_462_000, 0)
            // Standard Error: 7_258
            .saturating_add(Weight::from_parts(1_181_194, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_486_000 picoseconds.
        Weight::from_parts(2_570_000, 0)
            // Standard Error: 9_750
            .saturating_add(Weight::from_parts(1_948_365, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_484_000, 0)
            // Standard Error: 7_413
            .saturating_add(Weight::from_parts(1_260_954, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_461_000, 0)
            // Standard Error: 11_563
            .saturating_add(Weight::from_parts(1_964_789, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_476_000 picoseconds.
        Weight::from_parts(2_519_000, 0)
            // Standard Error: 8_178
            .saturating_add(Weight::from_parts(1_185_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_346_000 picoseconds.
        Weight::from_parts(2_430_000, 0)
            // Standard Error: 10_685
            .saturating_add(Weight::from_parts(1_891_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_446_000, 0)
            // Standard Error: 7_188
            .saturating_add(Weight::from_parts(1_205_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_000 picoseconds.
        Weight::from_parts(2_494_000, 0)
            // Standard Error: 9_698
            .saturating_add(Weight::from_parts(1_894_311, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(2_468_000, 0)
            // Standard Error: 7_360
            .saturating_add(Weight::from_parts(1_206_042, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_349_000 picoseconds.
        Weight::from_parts(2_442_000, 0)
            // Standard Error: 11_194
            .saturating_add(Weight::from_parts(1_936_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 7_517
            .saturating_add(Weight::from_parts(1_214_348, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_408_000 picoseconds.
        Weight::from_parts(2_469_000, 0)
            // Standard Error: 10_637
            .saturating_add(Weight::from_parts(1_941_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_514_000 picoseconds.
        Weight::from_parts(2_567_000, 0)
            // Standard Error: 8_382
            .saturating_add(Weight::from_parts(1_271_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(2_486_000, 0)
            // Standard Error: 10_460
            .saturating_add(Weight::from_parts(1_955_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 7_882
            .saturating_add(Weight::from_parts(1_250_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(2_478_000, 0)
            // Standard Error: 8_379
            .saturating_add(Weight::from_parts(1_347_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(2_480_000, 0)
            // Standard Error: 5_209
            .saturating_add(Weight::from_parts(673_890, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_587_000, 0)
            // Standard Error: 8_566
            .saturating_add(Weight::from_parts(1_371_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_357_000 picoseconds.
        Weight::from_parts(2_421_000, 0)
            // Standard Error: 5_972
            .saturating_add(Weight::from_parts(718_398, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(2_452_000, 0)
            // Standard Error: 10_323
            .saturating_add(Weight::from_parts(1_911_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_460_000, 0)
            // Standard Error: 7_917
            .saturating_add(Weight::from_parts(1_294_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_381_000 picoseconds.
        Weight::from_parts(2_658_890, 0)
            // Standard Error: 16_419
            .saturating_add(Weight::from_parts(2_782_889, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_481_000 picoseconds.
        Weight::from_parts(2_254_379, 0)
            // Standard Error: 11_937
            .saturating_add(Weight::from_parts(2_443_954, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_880_937, 0)
            // Standard Error: 20_773
            .saturating_add(Weight::from_parts(2_963_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_455_000 picoseconds.
        Weight::from_parts(4_280_804, 0)
            // Standard Error: 19_765
            .saturating_add(Weight::from_parts(2_336_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_330_000 picoseconds.
        Weight::from_parts(2_117_687, 0)
            // Standard Error: 28_941
            .saturating_add(Weight::from_parts(9_380_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_291_000 picoseconds.
        Weight::from_parts(2_237_098, 0)
            // Standard Error: 48_033
            .saturating_add(Weight::from_parts(7_431_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(5_060_626, 0)
            // Standard Error: 21_854
            .saturating_add(Weight::from_parts(2_856_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(981_137, 0)
            // Standard Error: 14_755
            .saturating_add(Weight::from_parts(2_576_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 8_337
            .saturating_add(Weight::from_parts(1_331_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(2_450_000, 0)
            // Standard Error: 5_102
            .saturating_add(Weight::from_parts(669_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_425_000, 0)
            // Standard Error: 9_056
            .saturating_add(Weight::from_parts(1_349_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 6_117
            .saturating_add(Weight::from_parts(741_997, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_340_000 picoseconds.
        Weight::from_parts(2_458_000, 0)
            // Standard Error: 7_608
            .saturating_add(Weight::from_parts(1_392_470, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(2_416_000, 0)
            // Standard Error: 6_034
            .saturating_add(Weight::from_parts(704_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_455_000 picoseconds.
        Weight::from_parts(2_539_000, 0)
            // Standard Error: 7_249
            .saturating_add(Weight::from_parts(1_132_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_351_000 picoseconds.
        Weight::from_parts(2_463_000, 0)
            // Standard Error: 4_348
            .saturating_add(Weight::from_parts(604_599, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_301_000 picoseconds.
        Weight::from_parts(2_478_000, 0)
            // Standard Error: 7_675
            .saturating_add(Weight::from_parts(1_149_980, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_357_000 picoseconds.
        Weight::from_parts(2_392_000, 0)
            // Standard Error: 4_493
            .saturating_add(Weight::from_parts(630_110, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_381_000 picoseconds.
        Weight::from_parts(2_455_000, 0)
            // Standard Error: 7_146
            .saturating_add(Weight::from_parts(1_116_964, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 4_394
            .saturating_add(Weight::from_parts(625_267, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_503_000, 0)
            // Standard Error: 7_572
            .saturating_add(Weight::from_parts(1_146_316, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(2_449_000, 0)
            // Standard Error: 5_043
            .saturating_add(Weight::from_parts(628_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_358_000 picoseconds.
        Weight::from_parts(2_482_000, 0)
            // Standard Error: 8_981
            .saturating_add(Weight::from_parts(1_199_358, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_425_000, 0)
            // Standard Error: 4_315
            .saturating_add(Weight::from_parts(632_002, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 5_916_000 picoseconds.
        Weight::from_parts(6_203_000, 4169)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1107`
        //  Estimated: `24053`
        // Minimum execution time: 64_082_000 picoseconds.
        Weight::from_parts(66_770_000, 24053)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 47_860_000 picoseconds.
        Weight::from_parts(49_670_000, 22158)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 75_467_000 picoseconds.
        Weight::from_parts(79_488_000, 34619)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 32_477_000 picoseconds.
        Weight::from_parts(33_942_000, 20509)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 49_393_000 picoseconds.
        Weight::from_parts(51_613_000, 26636)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_467_000 picoseconds.
        Weight::from_parts(3_697_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1626`
        //  Estimated: `58232`
        // Minimum execution time: 109_316_000 picoseconds.
        Weight::from_parts(111_989_000, 58232)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 89_973_000 picoseconds.
        Weight::from_parts(92_364_000, 46962)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2303 + c * (16400 ±0)`
        //  Estimated: `19878 + c * (84480 ±0)`
        // Minimum execution time: 29_468_000 picoseconds.
        Weight::from_parts(30_089_000, 19878)
            // Standard Error: 74_351
            .saturating_add(Weight::from_parts(39_695_443, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3132 + c * (42 ±0)`
        //  Estimated: `60608 + c * (2947 ±0)`
        // Minimum execution time: 91_473_000 picoseconds.
        Weight::from_parts(84_457_931, 60608)
            // Standard Error: 2_348
            .saturating_add(Weight::from_parts(1_087_799, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_711_000 picoseconds.
        Weight::from_parts(110_753_586, 0)
            // Standard Error: 79_314
            .saturating_add(Weight::from_parts(13_383_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_619_000 picoseconds.
        Weight::from_parts(115_317_258, 0)
            // Standard Error: 90_253
            .saturating_add(Weight::from_parts(11_638_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_533_000 picoseconds.
        Weight::from_parts(110_769_528, 0)
            // Standard Error: 94_554
            .saturating_add(Weight::from_parts(9_973_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_487_000 picoseconds.
        Weight::from_parts(107_668_288, 0)
            // Standard Error: 80_757
            .saturating_add(Weight::from_parts(16_853_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_660_000 picoseconds.
        Weight::from_parts(609_719_068, 0)
            // Standard Error: 642_180
            .saturating_add(Weight::from_parts(13_806_670, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 577_778_000 picoseconds.
        Weight::from_parts(611_075_450, 0)
            // Standard Error: 737_165
            .saturating_add(Weight::from_parts(21_935_856, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_414_000 picoseconds.
        Weight::from_parts(118_249_508, 0)
            // Standard Error: 86_352
            .saturating_add(Weight::from_parts(3_353_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_505_000 picoseconds.
        Weight::from_parts(117_409_508, 0)
            // Standard Error: 84_771
            .saturating_add(Weight::from_parts(8_635_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_299_000 picoseconds.
        Weight::from_parts(105_862_588, 0)
            // Standard Error: 2_507_419
            .saturating_add(Weight::from_parts(169_883_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_092_000 picoseconds.
        Weight::from_parts(105_908_694, 0)
            // Standard Error: 2_587_224
            .saturating_add(Weight::from_parts(162_967_868, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_414_000 picoseconds.
        Weight::from_parts(106_539_882, 0)
            // Standard Error: 1_418_536
            .saturating_add(Weight::from_parts(104_555_156, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_215_000 picoseconds.
        Weight::from_parts(106_024_798, 0)
            // Standard Error: 2_099_606
            .saturating_add(Weight::from_parts(136_358_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_070_000 picoseconds.
        Weight::from_parts(104_796_248, 0)
            // Standard Error: 2_586_285
            .saturating_add(Weight::from_parts(161_698_916, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 948_000 picoseconds.
        Weight::from_parts(1_040_000, 0)
            // Standard Error: 775
            .saturating_add(Weight::from_parts(208_176, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_319_000 picoseconds.
        Weight::from_parts(3_444_000, 3610)
            // Standard Error: 855
            .saturating_add(Weight::from_parts(733_484, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_174_000 picoseconds.
        Weight::from_parts(99_637_457, 0)
            // Standard Error: 14_870
            .saturating_add(Weight::from_parts(2_568_044, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1372`
        //  Estimated: `51905`
        // Minimum execution time: 107_139_000 picoseconds.
        Weight::from_parts(109_386_000, 51905)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `992`
        //  Estimated: `21579`
        // Minimum execution time: 56_065_000 picoseconds.
        Weight::from_parts(57_692_000, 21579)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17486`
        // Minimum execution time: 30_120_000 picoseconds.
        Weight::from_parts(30_965_000, 17486)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_018_000 picoseconds.
        Weight::from_parts(7_775_084, 7640)
            // Standard Error: 35_415
            .saturating_add(Weight::from_parts(14_245_029, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1593 + c * (16389 ±0)`
        //  Estimated: `43266 + c * (131112 ±0)`
        // Minimum execution time: 71_435_000 picoseconds.
        Weight::from_parts(72_889_000, 43266)
            // Standard Error: 161_407
            .saturating_add(Weight::from_parts(54_636_395, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 87_439_000 picoseconds.
        Weight::from_parts(58_533_907, 5402)
            // Standard Error: 49_058
            .saturating_add(Weight::from_parts(60_028_986, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 93_744_000 picoseconds.
        Weight::from_parts(134_431_926, 50600)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_621, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 11_155_105_000 picoseconds.
        Weight::from_parts(488_669_801, 45152)
            // Standard Error: 161_988
            .saturating_add(Weight::from_parts(59_685_479, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_538, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `31266`
        // Minimum execution time: 73_564_000 picoseconds.
        Weight::from_parts(46_921_979, 31266)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_111, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1371`
        //  Estimated: `54435`
        // Minimum execution time: 124_711_000 picoseconds.
        Weight::from_parts(106_032_158, 54435)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_118, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 375_977_000 picoseconds.
        Weight::from_parts(394_896_238, 121468)
            .saturating_add(RocksDbWeight::get().reads(35_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 395_472_000 picoseconds.
        Weight::from_parts(414_213_883, 121468)
            // Standard Error: 1_935
            .saturating_add(Weight::from_parts(1_860, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(35_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 67_589_000 picoseconds.
        Weight::from_parts(68_114_000, 3899)
            // Standard Error: 34_374
            .saturating_add(Weight::from_parts(58_490_342, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_290_000 picoseconds.
        Weight::from_parts(98_051_000, 0)
            // Standard Error: 3_674_974
            .saturating_add(Weight::from_parts(692_844_604, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 473_577_000 picoseconds.
        Weight::from_parts(425_044_188, 0)
            // Standard Error: 7_044
            .saturating_add(Weight::from_parts(28_873_796, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 206_366_000 picoseconds.
        Weight::from_parts(207_349_350, 0)
            // Standard Error: 270_169
            .saturating_add(Weight::from_parts(63_805_905, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_908_000 picoseconds.
        Weight::from_parts(107_648_854, 0)
            // Standard Error: 4_003
            .saturating_add(Weight::from_parts(2_304_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 179_663_000 picoseconds.
        Weight::from_parts(232_151_302, 0)
            // Standard Error: 18_587
            .saturating_add(Weight::from_parts(1_769_501, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_038_000 picoseconds.
        Weight::from_parts(121_080_383, 0)
            // Standard Error: 359_485
            .saturating_add(Weight::from_parts(89_648_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_016_000 picoseconds.
        Weight::from_parts(93_318_665, 0)
            // Standard Error: 321_057
            .saturating_add(Weight::from_parts(81_958_539, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_129_000 picoseconds.
        Weight::from_parts(106_854_081, 0)
            // Standard Error: 218_338
            .saturating_add(Weight::from_parts(77_570_721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_078_000 picoseconds.
        Weight::from_parts(94_730_793, 0)
            // Standard Error: 324_777
            .saturating_add(Weight::from_parts(79_957_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_516_000 picoseconds.
        Weight::from_parts(78_961_141, 0)
            // Standard Error: 384_233
            .saturating_add(Weight::from_parts(87_508_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_180_000 picoseconds.
        Weight::from_parts(87_060_643, 0)
            // Standard Error: 338_665
            .saturating_add(Weight::from_parts(81_114_908, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_723_000 picoseconds.
        Weight::from_parts(92_147_563, 0)
            // Standard Error: 399_750
            .saturating_add(Weight::from_parts(80_226_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_549_000 picoseconds.
        Weight::from_parts(88_060_819, 0)
            // Standard Error: 351_358
            .saturating_add(Weight::from_parts(80_446_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_457_000 picoseconds.
        Weight::from_parts(636_296_457, 0)
            // Standard Error: 483_647
            .saturating_add(Weight::from_parts(112_986_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 694_858_000 picoseconds.
        Weight::from_parts(709_803_000, 0)
            // Standard Error: 58_365
            .saturating_add(Weight::from_parts(13_172_837, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_181_000 picoseconds.
        Weight::from_parts(82_113_552, 0)
            // Standard Error: 361_593
            .saturating_add(Weight::from_parts(83_933_443, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_878_000 picoseconds.
        Weight::from_parts(91_050_595, 0)
            // Standard Error: 340_221
            .saturating_add(Weight::from_parts(79_306_855, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_859_000 picoseconds.
        Weight::from_parts(112_593_140, 0)
            // Standard Error: 398_933
            .saturating_add(Weight::from_parts(158_218_455, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_128_000 picoseconds.
        Weight::from_parts(103_363_000, 0)
            // Standard Error: 3_679_109
            .saturating_add(Weight::from_parts(749_724_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_918_000 picoseconds.
        Weight::from_parts(163_432_448, 0)
            // Standard Error: 424_726
            .saturating_add(Weight::from_parts(244_083_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 336_805_000 picoseconds.
        Weight::from_parts(339_715_000, 0)
            // Standard Error: 57_353
            .saturating_add(Weight::from_parts(24_758_437, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_423_000 picoseconds.
        Weight::from_parts(173_031_838, 0)
            // Standard Error: 410_623
            .saturating_add(Weight::from_parts(250_326_158, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 344_992_000 picoseconds.
        Weight::from_parts(349_520_000, 0)
            // Standard Error: 59_962
            .saturating_add(Weight::from_parts(24_610_378, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 578_260_000 picoseconds.
        Weight::from_parts(663_499_401, 0)
            // Standard Error: 441_782
            .saturating_add(Weight::from_parts(258_284_166, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 575_551_000 picoseconds.
        Weight::from_parts(661_725_628, 0)
            // Standard Error: 444_035
            .saturating_add(Weight::from_parts(265_845_172, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_453_000 picoseconds.
        Weight::from_parts(80_881_845, 0)
            // Standard Error: 340_263
            .saturating_add(Weight::from_parts(93_159_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_790_968_000 picoseconds.
        Weight::from_parts(1_938_187_856, 0)
            // Standard Error: 337_498
            .saturating_add(Weight::from_parts(145_115_674, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 307_420_000 picoseconds.
        Weight::from_parts(313_741_000, 0)
            // Standard Error: 57_291
            .saturating_add(Weight::from_parts(34_249_097, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_777_201_000 picoseconds.
        Weight::from_parts(1_945_879_929, 0)
            // Standard Error: 338_205
            .saturating_add(Weight::from_parts(205_730_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_787_114_000 picoseconds.
        Weight::from_parts(1_959_605_606, 0)
            // Standard Error: 327_694
            .saturating_add(Weight::from_parts(207_633_911, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 268_341_000 picoseconds.
        Weight::from_parts(337_734_342, 0)
            // Standard Error: 388_989
            .saturating_add(Weight::from_parts(256_640_791, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 514_248_000 picoseconds.
        Weight::from_parts(528_771_000, 0)
            // Standard Error: 57_919
            .saturating_add(Weight::from_parts(25_017_742, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_943_566_000 picoseconds.
        Weight::from_parts(2_113_407_434, 0)
            // Standard Error: 489_819
            .saturating_add(Weight::from_parts(225_593_659, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 115_518_000 picoseconds.
        Weight::from_parts(105_636_149, 0)
            // Standard Error: 1_060
            .saturating_add(Weight::from_parts(490_810, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 121_214_000 picoseconds.
        Weight::from_parts(105_362_894, 0)
            // Standard Error: 1_055
            .saturating_add(Weight::from_parts(487_653, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_817_000 picoseconds.
        Weight::from_parts(132_570_463, 0)
            // Standard Error: 368_221
            .saturating_add(Weight::from_parts(127_546_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_170_000 picoseconds.
        Weight::from_parts(112_494_000, 0)
            // Standard Error: 2_482
            .saturating_add(Weight::from_parts(688_231, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 121_482_000 picoseconds.
        Weight::from_parts(111_457_022, 0)
            // Standard Error: 1_063
            .saturating_add(Weight::from_parts(485_504, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_636_000 picoseconds.
        Weight::from_parts(105_004_936, 0)
            // Standard Error: 1_167
            .saturating_add(Weight::from_parts(490_058, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_023_000 picoseconds.
        Weight::from_parts(100_104_286, 0)
            // Standard Error: 261_229
            .saturating_add(Weight::from_parts(79_975_096, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_277_000 picoseconds.
        Weight::from_parts(89_963_384, 0)
            // Standard Error: 355_702
            .saturating_add(Weight::from_parts(79_419_904, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_524_000 picoseconds.
        Weight::from_parts(92_121_459, 0)
            // Standard Error: 336_846
            .saturating_add(Weight::from_parts(82_284_339, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_965_000 picoseconds.
        Weight::from_parts(626_076_270, 0)
            // Standard Error: 469_755
            .saturating_add(Weight::from_parts(102_986_836, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 601_260_000 picoseconds.
        Weight::from_parts(626_280_325, 0)
            // Standard Error: 2_141
            .saturating_add(Weight::from_parts(131_281, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_272_455_000 picoseconds.
        Weight::from_parts(2_481_227_076, 0)
            // Standard Error: 595_892
            .saturating_add(Weight::from_parts(120_315_955, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_130_000 picoseconds.
        Weight::from_parts(2_530_827_718, 0)
            // Standard Error: 15_772
            .saturating_add(Weight::from_parts(12_311_431, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_540_000 picoseconds.
        Weight::from_parts(113_909_079, 0)
            // Standard Error: 341_835
            .saturating_add(Weight::from_parts(101_988_694, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 158_129_000 picoseconds.
        Weight::from_parts(161_417_000, 0)
            // Standard Error: 52_998
            .saturating_add(Weight::from_parts(30_350_784, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_308_000 picoseconds.
        Weight::from_parts(91_581_381, 0)
            // Standard Error: 312_905
            .saturating_add(Weight::from_parts(78_230_765, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 171_991_000 picoseconds.
        Weight::from_parts(238_890_965, 0)
            // Standard Error: 251_775
            .saturating_add(Weight::from_parts(137_669_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_159_000 picoseconds.
        Weight::from_parts(175_132_568, 0)
            // Standard Error: 376_534
            .saturating_add(Weight::from_parts(331_058_523, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 49_940_168_000 picoseconds.
        Weight::from_parts(50_182_742_000, 0)
            // Standard Error: 310_833
            .saturating_add(Weight::from_parts(9_447_968, 0).saturating_mul(p.into()))
            // Standard Error: 310_817
            .saturating_add(Weight::from_parts(177_877_948, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_309_000 picoseconds.
        Weight::from_parts(174_660_915, 0)
            // Standard Error: 352_025
            .saturating_add(Weight::from_parts(337_031_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_828_718_000 picoseconds.
        Weight::from_parts(50_990_303_000, 0)
            // Standard Error: 308_086
            .saturating_add(Weight::from_parts(9_337_959, 0).saturating_mul(p.into()))
            // Standard Error: 308_070
            .saturating_add(Weight::from_parts(177_541_220, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_837_000 picoseconds.
        Weight::from_parts(115_275_443, 0)
            // Standard Error: 26_418
            .saturating_add(Weight::from_parts(1_680_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 98_765_000 picoseconds.
        Weight::from_parts(79_245_555, 1131)
            // Standard Error: 38_437
            .saturating_add(Weight::from_parts(19_479_549, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 95_556_000 picoseconds.
        Weight::from_parts(99_389_000, 1131)
            // Standard Error: 41_311
            .saturating_add(Weight::from_parts(47_628_716, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 9_706_000_000 picoseconds.
        Weight::from_parts(10_075_819_214, 5069931)
            // Standard Error: 89_397
            .saturating_add(Weight::from_parts(43_480_750, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 98_782_000 picoseconds.
        Weight::from_parts(101_797_000, 1939)
            // Standard Error: 36_184
            .saturating_add(Weight::from_parts(58_378_622, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 103_884_000 picoseconds.
        Weight::from_parts(114_897_039, 1131)
            // Standard Error: 82_768
            .saturating_add(Weight::from_parts(47_389_557, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 615_875_000 picoseconds.
        Weight::from_parts(633_440_805, 1496)
            // Standard Error: 277_030
            .saturating_add(Weight::from_parts(56_382_321, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_249_344_000 picoseconds.
        Weight::from_parts(1_276_053_178, 317931)
            // Standard Error: 308_561
            .saturating_add(Weight::from_parts(53_842_013, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_180_000 picoseconds.
        Weight::from_parts(5_850_216, 0)
            // Standard Error: 78_307
            .saturating_add(Weight::from_parts(98_343_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_479_207_000 picoseconds.
        Weight::from_parts(4_227_530_372, 0)
            // Standard Error: 75_369
            .saturating_add(Weight::from_parts(5_153_543, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_433_165_000 picoseconds.
        Weight::from_parts(4_172_795_339, 0)
            // Standard Error: 81_707
            .saturating_add(Weight::from_parts(5_333_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_708_906_000 picoseconds.
        Weight::from_parts(11_550_760_752, 0)
            // Standard Error: 180_093
            .saturating_add(Weight::from_parts(11_774_338, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_838_378_000 picoseconds.
        Weight::from_parts(12_359_412_177, 0)
            // Standard Error: 198_599
            .saturating_add(Weight::from_parts(8_248_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_448_000 picoseconds.
        Weight::from_parts(2_530_000, 0)
            // Standard Error: 7_641
            .saturating_add(Weight::from_parts(3_821_776, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_396_000 picoseconds.
        Weight::from_parts(557_860, 0)
            // Standard Error: 9_036
            .saturating_add(Weight::from_parts(3_199_861, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_343_000 picoseconds.
        Weight::from_parts(3_363_800, 0)
            // Standard Error: 1_184
            .saturating_add(Weight::from_parts(1_578_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_338_000 picoseconds.
        Weight::from_parts(2_401_000, 0)
            // Standard Error: 8_636
            .saturating_add(Weight::from_parts(2_945_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(5_646_626, 0)
            // Standard Error: 22_026
            .saturating_add(Weight::from_parts(4_977_943, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_206_000 picoseconds.
        Weight::from_parts(5_398_988, 0)
            // Standard Error: 1_909
            .saturating_add(Weight::from_parts(171_510, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(5_460_795, 0)
            // Standard Error: 7_767
            .saturating_add(Weight::from_parts(2_568_181, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_568_181 -
            2_443_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(4_695_140, 0)
            // Standard Error: 12_158
            .saturating_add(Weight::from_parts(2_443_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_883_000 picoseconds.
        Weight::from_parts(20_806_951, 0)
            // Standard Error: 28_734
            .saturating_add(Weight::from_parts(9_927_314, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_243_000 picoseconds.
        Weight::from_parts(6_058_590, 0)
            // Standard Error: 6_974
            .saturating_add(Weight::from_parts(1_209_539, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_571_000 picoseconds.
        Weight::from_parts(5_891_635, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_971_000 picoseconds.
        Weight::from_parts(5_390_865, 0)
            // Standard Error: 2_709
            .saturating_add(Weight::from_parts(418_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_946_000 picoseconds.
        Weight::from_parts(2_900_407, 0)
            // Standard Error: 6_946
            .saturating_add(Weight::from_parts(1_128_031, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_953_000 picoseconds.
        Weight::from_parts(3_884_849, 0)
            // Standard Error: 6_394
            .saturating_add(Weight::from_parts(1_065_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_657_000 picoseconds.
        Weight::from_parts(2_410_779, 0)
            // Standard Error: 7_856
            .saturating_add(Weight::from_parts(888_629, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_488_000 picoseconds.
        Weight::from_parts(463_680, 0)
            // Standard Error: 10_430
            .saturating_add(Weight::from_parts(1_556_776, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_768_000 picoseconds.
        Weight::from_parts(666_674, 0)
            // Standard Error: 15_618
            .saturating_add(Weight::from_parts(7_383_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(2_454_000, 0)
            // Standard Error: 7_007
            .saturating_add(Weight::from_parts(3_432_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_456_000, 0)
            // Standard Error: 7_576
            .saturating_add(Weight::from_parts(3_159_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_427_000, 0)
            // Standard Error: 7_278
            .saturating_add(Weight::from_parts(3_174_865, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_565_000, 0)
            // Standard Error: 5_110
            .saturating_add(Weight::from_parts(2_700_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_343_000 picoseconds.
        Weight::from_parts(2_428_000, 0)
            // Standard Error: 4_518
            .saturating_add(Weight::from_parts(619_514, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_366_000 picoseconds.
        Weight::from_parts(1_152_712, 0)
            // Standard Error: 4_495
            .saturating_add(Weight::from_parts(465_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_443_000, 0)
            // Standard Error: 10_183
            .saturating_add(Weight::from_parts(1_940_158, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_340_000 picoseconds.
        Weight::from_parts(2_416_000, 0)
            // Standard Error: 7_461
            .saturating_add(Weight::from_parts(1_243_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_419_000 picoseconds.
        Weight::from_parts(1_267_422, 0)
            // Standard Error: 3_910
            .saturating_add(Weight::from_parts(437_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_349_000 picoseconds.
        Weight::from_parts(1_481_553, 0)
            // Standard Error: 3_341
            .saturating_add(Weight::from_parts(421_176, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_445_000, 0)
            // Standard Error: 3_685
            .saturating_add(Weight::from_parts(558_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_418_000 picoseconds.
        Weight::from_parts(2_537_000, 0)
            // Standard Error: 4_366
            .saturating_add(Weight::from_parts(582_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_425_000 picoseconds.
        Weight::from_parts(361_903, 0)
            // Standard Error: 5_359
            .saturating_add(Weight::from_parts(568_819, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_395_000 picoseconds.
        Weight::from_parts(1_858_519, 0)
            // Standard Error: 3_223
            .saturating_add(Weight::from_parts(362_047, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_358_000 picoseconds.
        Weight::from_parts(2_897_877, 0)
            // Standard Error: 1_865
            .saturating_add(Weight::from_parts(169_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_388_000 picoseconds.
        Weight::from_parts(2_871_148, 0)
            // Standard Error: 1_858
            .saturating_add(Weight::from_parts(174_022, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_390_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 9_672
            .saturating_add(Weight::from_parts(1_882_704, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_360_000 picoseconds.
        Weight::from_parts(2_456_000, 0)
            // Standard Error: 7_471
            .saturating_add(Weight::from_parts(1_231_517, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_465_000 picoseconds.
        Weight::from_parts(2_527_000, 0)
            // Standard Error: 9_958
            .saturating_add(Weight::from_parts(1_896_452, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_388_000 picoseconds.
        Weight::from_parts(2_464_000, 0)
            // Standard Error: 7_397
            .saturating_add(Weight::from_parts(1_246_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 11_956
            .saturating_add(Weight::from_parts(1_945_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_329_000 picoseconds.
        Weight::from_parts(2_462_000, 0)
            // Standard Error: 7_258
            .saturating_add(Weight::from_parts(1_181_194, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_486_000 picoseconds.
        Weight::from_parts(2_570_000, 0)
            // Standard Error: 9_750
            .saturating_add(Weight::from_parts(1_948_365, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_484_000, 0)
            // Standard Error: 7_413
            .saturating_add(Weight::from_parts(1_260_954, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_461_000, 0)
            // Standard Error: 11_563
            .saturating_add(Weight::from_parts(1_964_789, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_476_000 picoseconds.
        Weight::from_parts(2_519_000, 0)
            // Standard Error: 8_178
            .saturating_add(Weight::from_parts(1_185_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_346_000 picoseconds.
        Weight::from_parts(2_430_000, 0)
            // Standard Error: 10_685
            .saturating_add(Weight::from_parts(1_891_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_446_000, 0)
            // Standard Error: 7_188
            .saturating_add(Weight::from_parts(1_205_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_000 picoseconds.
        Weight::from_parts(2_494_000, 0)
            // Standard Error: 9_698
            .saturating_add(Weight::from_parts(1_894_311, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(2_468_000, 0)
            // Standard Error: 7_360
            .saturating_add(Weight::from_parts(1_206_042, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_349_000 picoseconds.
        Weight::from_parts(2_442_000, 0)
            // Standard Error: 11_194
            .saturating_add(Weight::from_parts(1_936_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 7_517
            .saturating_add(Weight::from_parts(1_214_348, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_408_000 picoseconds.
        Weight::from_parts(2_469_000, 0)
            // Standard Error: 10_637
            .saturating_add(Weight::from_parts(1_941_275, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_514_000 picoseconds.
        Weight::from_parts(2_567_000, 0)
            // Standard Error: 8_382
            .saturating_add(Weight::from_parts(1_271_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(2_486_000, 0)
            // Standard Error: 10_460
            .saturating_add(Weight::from_parts(1_955_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 7_882
            .saturating_add(Weight::from_parts(1_250_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(2_478_000, 0)
            // Standard Error: 8_379
            .saturating_add(Weight::from_parts(1_347_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(2_480_000, 0)
            // Standard Error: 5_209
            .saturating_add(Weight::from_parts(673_890, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_587_000, 0)
            // Standard Error: 8_566
            .saturating_add(Weight::from_parts(1_371_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_357_000 picoseconds.
        Weight::from_parts(2_421_000, 0)
            // Standard Error: 5_972
            .saturating_add(Weight::from_parts(718_398, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(2_452_000, 0)
            // Standard Error: 10_323
            .saturating_add(Weight::from_parts(1_911_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_460_000, 0)
            // Standard Error: 7_917
            .saturating_add(Weight::from_parts(1_294_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_381_000 picoseconds.
        Weight::from_parts(2_658_890, 0)
            // Standard Error: 16_419
            .saturating_add(Weight::from_parts(2_782_889, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_481_000 picoseconds.
        Weight::from_parts(2_254_379, 0)
            // Standard Error: 11_937
            .saturating_add(Weight::from_parts(2_443_954, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_880_937, 0)
            // Standard Error: 20_773
            .saturating_add(Weight::from_parts(2_963_892, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_455_000 picoseconds.
        Weight::from_parts(4_280_804, 0)
            // Standard Error: 19_765
            .saturating_add(Weight::from_parts(2_336_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_330_000 picoseconds.
        Weight::from_parts(2_117_687, 0)
            // Standard Error: 28_941
            .saturating_add(Weight::from_parts(9_380_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_291_000 picoseconds.
        Weight::from_parts(2_237_098, 0)
            // Standard Error: 48_033
            .saturating_add(Weight::from_parts(7_431_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(5_060_626, 0)
            // Standard Error: 21_854
            .saturating_add(Weight::from_parts(2_856_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(981_137, 0)
            // Standard Error: 14_755
            .saturating_add(Weight::from_parts(2_576_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 8_337
            .saturating_add(Weight::from_parts(1_331_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(2_450_000, 0)
            // Standard Error: 5_102
            .saturating_add(Weight::from_parts(669_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_425_000, 0)
            // Standard Error: 9_056
            .saturating_add(Weight::from_parts(1_349_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_398_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 6_117
            .saturating_add(Weight::from_parts(741_997, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_340_000 picoseconds.
        Weight::from_parts(2_458_000, 0)
            // Standard Error: 7_608
            .saturating_add(Weight::from_parts(1_392_470, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(2_416_000, 0)
            // Standard Error: 6_034
            .saturating_add(Weight::from_parts(704_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_455_000 picoseconds.
        Weight::from_parts(2_539_000, 0)
            // Standard Error: 7_249
            .saturating_add(Weight::from_parts(1_132_490, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_351_000 picoseconds.
        Weight::from_parts(2_463_000, 0)
            // Standard Error: 4_348
            .saturating_add(Weight::from_parts(604_599, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_301_000 picoseconds.
        Weight::from_parts(2_478_000, 0)
            // Standard Error: 7_675
            .saturating_add(Weight::from_parts(1_149_980, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_357_000 picoseconds.
        Weight::from_parts(2_392_000, 0)
            // Standard Error: 4_493
            .saturating_add(Weight::from_parts(630_110, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_381_000 picoseconds.
        Weight::from_parts(2_455_000, 0)
            // Standard Error: 7_146
            .saturating_add(Weight::from_parts(1_116_964, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 4_394
            .saturating_add(Weight::from_parts(625_267, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_503_000, 0)
            // Standard Error: 7_572
            .saturating_add(Weight::from_parts(1_146_316, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(2_449_000, 0)
            // Standard Error: 5_043
            .saturating_add(Weight::from_parts(628_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_358_000 picoseconds.
        Weight::from_parts(2_482_000, 0)
            // Standard Error: 8_981
            .saturating_add(Weight::from_parts(1_199_358, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_425_000, 0)
            // Standard Error: 4_315
            .saturating_add(Weight::from_parts(632_002, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 5_916_000 picoseconds.
        Weight::from_parts(6_203_000, 4169)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1107`
        //  Estimated: `24053`
        // Minimum execution time: 64_082_000 picoseconds.
        Weight::from_parts(66_770_000, 24053)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 47_860_000 picoseconds.
        Weight::from_parts(49_670_000, 22158)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 75_467_000 picoseconds.
        Weight::from_parts(79_488_000, 34619)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 32_477_000 picoseconds.
        Weight::from_parts(33_942_000, 20509)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 49_393_000 picoseconds.
        Weight::from_parts(51_613_000, 26636)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_467_000 picoseconds.
        Weight::from_parts(3_697_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1626`
        //  Estimated: `58232`
        // Minimum execution time: 109_316_000 picoseconds.
        Weight::from_parts(111_989_000, 58232)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 89_973_000 picoseconds.
        Weight::from_parts(92_364_000, 46962)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2303 + c * (16400 ±0)`
        //  Estimated: `19878 + c * (84480 ±0)`
        // Minimum execution time: 29_468_000 picoseconds.
        Weight::from_parts(30_089_000, 19878)
            // Standard Error: 74_351
            .saturating_add(Weight::from_parts(39_695_443, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3132 + c * (42 ±0)`
        //  Estimated: `60608 + c * (2947 ±0)`
        // Minimum execution time: 91_473_000 picoseconds.
        Weight::from_parts(84_457_931, 60608)
            // Standard Error: 2_348
            .saturating_add(Weight::from_parts(1_087_799, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}
