// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-21, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_in_handle,alloc_per_page,claim_value,create_program,db_read_per_byte,db_write_per_byte,free,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_byte,gr_create_program_wgas,gr_create_program_wgas_per_byte,gr_debug,gr_debug_per_byte,gr_env_vars,gr_gas_available,gr_message_id,gr_pay_program_rent,gr_program_id,gr_random,gr_read,gr_read_per_byte,gr_reply_code,gr_reply_deposit,gr_reply_per_byte,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_byte,gr_reply_push_per_byte,gr_reply_to,gr_reply_wgas_per_byte,gr_reservation_reply_commit_per_byte,gr_reservation_reply_per_byte,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_byte,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_byte,gr_send_push,gr_send_push_input,gr_send_push_input_per_byte,gr_send_push_per_byte,gr_send_wgas,gr_send_wgas_per_byte,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,initial_allocation,instantiate_module_per_byte,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,pay_program_rent,reinstrument_per_byte,resume_session_commit,resume_session_init,resume_session_push,send_message,send_reply,tasks_pause_program,tasks_pause_program_uninited,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_remove_resume_session,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_byte(c: u32, ) -> Weight;
    fn db_read_per_byte(c: u32, ) -> Weight;
    fn instantiate_module_per_byte(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_byte(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_byte(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_byte(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_byte(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_byte(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_byte(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_byte(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_byte(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_byte(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_byte(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_byte(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_byte(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_byte(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_byte(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_byte(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_byte(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_resume_session() -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn tasks_pause_program(c: u32, ) -> Weight;
    fn tasks_pause_program_uninited(c: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_763_000 picoseconds.
        Weight::from_parts(115_255_946, 0)
            // Standard Error: 81_765
            .saturating_add(Weight::from_parts(11_471_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_982_000 picoseconds.
        Weight::from_parts(112_837_280, 0)
            // Standard Error: 83_744
            .saturating_add(Weight::from_parts(11_655_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_679_000 picoseconds.
        Weight::from_parts(112_716_114, 0)
            // Standard Error: 79_297
            .saturating_add(Weight::from_parts(12_071_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_022_000 picoseconds.
        Weight::from_parts(107_983_958, 0)
            // Standard Error: 82_702
            .saturating_add(Weight::from_parts(17_259_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 724_058_000 picoseconds.
        Weight::from_parts(746_717_880, 0)
            // Standard Error: 516_712
            .saturating_add(Weight::from_parts(13_440_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 717_664_000 picoseconds.
        Weight::from_parts(740_682_668, 0)
            // Standard Error: 441_746
            .saturating_add(Weight::from_parts(16_082_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_230_000 picoseconds.
        Weight::from_parts(112_253_712, 0)
            // Standard Error: 79_840
            .saturating_add(Weight::from_parts(8_576_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_978_000 picoseconds.
        Weight::from_parts(111_853_074, 0)
            // Standard Error: 90_039
            .saturating_add(Weight::from_parts(16_463_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_096_000 picoseconds.
        Weight::from_parts(105_150_944, 0)
            // Standard Error: 2_214_411
            .saturating_add(Weight::from_parts(540_483_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_966_000 picoseconds.
        Weight::from_parts(104_831_992, 0)
            // Standard Error: 2_724_818
            .saturating_add(Weight::from_parts(534_806_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_996_000 picoseconds.
        Weight::from_parts(104_528_240, 0)
            // Standard Error: 2_236_909
            .saturating_add(Weight::from_parts(538_937_482, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_143_000 picoseconds.
        Weight::from_parts(109_857_984, 0)
            // Standard Error: 2_206_134
            .saturating_add(Weight::from_parts(533_656_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_734_000 picoseconds.
        Weight::from_parts(107_566_904, 0)
            // Standard Error: 2_221_037
            .saturating_add(Weight::from_parts(534_995_568, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 524288]`.
    fn db_write_per_byte(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_025_000 picoseconds.
        Weight::from_parts(1_059_000, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(242, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn db_read_per_byte(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1 ±0)`
        //  Estimated: `3610 + c * (1 ±0)`
        // Minimum execution time: 3_060_000 picoseconds.
        Weight::from_parts(3_227_000, 3610)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(726, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn instantiate_module_per_byte(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_530_000 picoseconds.
        Weight::from_parts(99_440_658, 0)
            // Standard Error: 7
            .saturating_add(Weight::from_parts(2_354, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1354`
        //  Estimated: `51743`
        // Minimum execution time: 105_483_000 picoseconds.
        Weight::from_parts(108_998_000, 51743)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `996`
        //  Estimated: `21591`
        // Minimum execution time: 54_636_000 picoseconds.
        Weight::from_parts(56_673_000, 21591)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17474`
        // Minimum execution time: 28_955_000 picoseconds.
        Weight::from_parts(30_418_000, 17474)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `330`
        //  Estimated: `4125`
        // Minimum execution time: 8_526_000 picoseconds.
        Weight::from_parts(9_658_026, 4125)
            // Standard Error: 8_183
            .saturating_add(Weight::from_parts(14_447_160, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3184 + c * (16400 ±0)`
        //  Estimated: `44029 + c * (117282 ±0)`
        // Minimum execution time: 69_004_000 picoseconds.
        Weight::from_parts(69_173_000, 44029)
            // Standard Error: 51_535
            .saturating_add(Weight::from_parts(39_261_636, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(8_u64))
            .saturating_add(Weight::from_parts(0, 117282).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 86_739_000 picoseconds.
        Weight::from_parts(68_804_665, 5402)
            // Standard Error: 45_286
            .saturating_add(Weight::from_parts(61_912_853, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 2097152]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1116`
        //  Estimated: `50655`
        // Minimum execution time: 95_644_000 picoseconds.
        Weight::from_parts(118_453_429, 50655)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_587, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 2097152]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 5_421_908_000 picoseconds.
        Weight::from_parts(46_009_014, 45152)
            // Standard Error: 91
            .saturating_add(Weight::from_parts(61_728, 0).saturating_mul(c.into()))
            // Standard Error: 11
            .saturating_add(Weight::from_parts(2_538, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `513`
        //  Estimated: `31140`
        // Minimum execution time: 73_530_000 picoseconds.
        Weight::from_parts(47_210_421, 31140)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_102, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1353`
        //  Estimated: `54273`
        // Minimum execution time: 123_358_000 picoseconds.
        Weight::from_parts(105_195_521, 54273)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_110, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `123826`
        // Minimum execution time: 273_290_000 picoseconds.
        Weight::from_parts(281_966_610, 123826)
            // Standard Error: 1_030
            .saturating_add(Weight::from_parts(6_654, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(34_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `123826`
        // Minimum execution time: 287_423_000 picoseconds.
        Weight::from_parts(300_193_279, 123826)
            .saturating_add(T::DbWeight::get().reads(34_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument_per_byte(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `203 + c * (1 ±0)`
        //  Estimated: `3887 + c * (2 ±0)`
        // Minimum execution time: 68_433_000 picoseconds.
        Weight::from_parts(69_028_000, 3887)
            // Standard Error: 41
            .saturating_add(Weight::from_parts(59_964, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_204_000 picoseconds.
        Weight::from_parts(100_481_000, 0)
            // Standard Error: 51_191
            .saturating_add(Weight::from_parts(9_167_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_207_000 picoseconds.
        Weight::from_parts(111_747_323, 0)
            // Standard Error: 648
            .saturating_add(Weight::from_parts(66_514, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 512]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_587_000 picoseconds.
        Weight::from_parts(112_666_566, 0)
            // Standard Error: 1_158
            .saturating_add(Weight::from_parts(807_838, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_466_000 picoseconds.
        Weight::from_parts(108_404_921, 0)
            // Standard Error: 4_985
            .saturating_add(Weight::from_parts(2_479_218, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 178_085_000 picoseconds.
        Weight::from_parts(224_011_103, 0)
            // Standard Error: 15_506
            .saturating_add(Weight::from_parts(2_143_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_782_000 picoseconds.
        Weight::from_parts(129_329_433, 0)
            // Standard Error: 4_680
            .saturating_add(Weight::from_parts(1_177_131, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_132_000 picoseconds.
        Weight::from_parts(88_007_385, 0)
            // Standard Error: 4_426
            .saturating_add(Weight::from_parts(1_096_716, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_115_000 picoseconds.
        Weight::from_parts(92_730_873, 0)
            // Standard Error: 3_933
            .saturating_add(Weight::from_parts(1_082_639, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_908_000 picoseconds.
        Weight::from_parts(92_063_659, 0)
            // Standard Error: 3_771
            .saturating_add(Weight::from_parts(1_067_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_438_000 picoseconds.
        Weight::from_parts(94_402_908, 0)
            // Standard Error: 3_739
            .saturating_add(Weight::from_parts(1_082_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_804_000 picoseconds.
        Weight::from_parts(94_640_616, 0)
            // Standard Error: 3_846
            .saturating_add(Weight::from_parts(1_079_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_227_000 picoseconds.
        Weight::from_parts(95_435_113, 0)
            // Standard Error: 4_144
            .saturating_add(Weight::from_parts(1_070_237, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_825_000 picoseconds.
        Weight::from_parts(103_317_611, 0)
            // Standard Error: 4_052
            .saturating_add(Weight::from_parts(1_072_963, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 727_152_000 picoseconds.
        Weight::from_parts(779_961_563, 0)
            // Standard Error: 5_208
            .saturating_add(Weight::from_parts(1_810_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_read_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 743_681_000 picoseconds.
        Weight::from_parts(798_430_571, 0)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(430, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_100_000 picoseconds.
        Weight::from_parts(109_493_812, 0)
            // Standard Error: 4_588
            .saturating_add(Weight::from_parts(1_211_616, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_781_000 picoseconds.
        Weight::from_parts(94_444_703, 0)
            // Standard Error: 4_320
            .saturating_add(Weight::from_parts(1_086_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_582_000 picoseconds.
        Weight::from_parts(98_775_923, 0)
            // Standard Error: 3_652
            .saturating_add(Weight::from_parts(1_062_452, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 1600]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_316_000 picoseconds.
        Weight::from_parts(113_057_046, 0)
            // Standard Error: 4_472
            .saturating_add(Weight::from_parts(2_172_301, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_625_000 picoseconds.
        Weight::from_parts(104_694_000, 0)
            // Standard Error: 60_908
            .saturating_add(Weight::from_parts(11_132_378, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_772_000 picoseconds.
        Weight::from_parts(167_224_207, 0)
            // Standard Error: 4_906
            .saturating_add(Weight::from_parts(3_254_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_send_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 118_139_000 picoseconds.
        Weight::from_parts(107_906_150, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(476, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_747_000 picoseconds.
        Weight::from_parts(192_373_084, 0)
            // Standard Error: 4_921
            .saturating_add(Weight::from_parts(3_311_863, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_send_wgas_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_765_000 picoseconds.
        Weight::from_parts(105_754_305, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(482, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 731_333_000 picoseconds.
        Weight::from_parts(803_330_857, 0)
            // Standard Error: 5_122
            .saturating_add(Weight::from_parts(3_416_901, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 726_604_000 picoseconds.
        Weight::from_parts(840_804_738, 0)
            // Standard Error: 5_534
            .saturating_add(Weight::from_parts(3_395_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_641_000 picoseconds.
        Weight::from_parts(90_547_776, 0)
            // Standard Error: 4_274
            .saturating_add(Weight::from_parts(1_167_800, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_851_174_000 picoseconds.
        Weight::from_parts(1_954_356_159, 0)
            // Standard Error: 4_121
            .saturating_add(Weight::from_parts(2_165_760, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_send_push_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 118_614_000 picoseconds.
        Weight::from_parts(112_607_583, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(618, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_849_057_000 picoseconds.
        Weight::from_parts(1_967_910_155, 0)
            // Standard Error: 4_291
            .saturating_add(Weight::from_parts(2_796_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_861_277_000 picoseconds.
        Weight::from_parts(1_987_687_603, 0)
            // Standard Error: 4_536
            .saturating_add(Weight::from_parts(2_826_424, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 257_144_000 picoseconds.
        Weight::from_parts(337_918_115, 0)
            // Standard Error: 4_622
            .saturating_add(Weight::from_parts(3_441_230, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_reservation_send_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 270_111_000 picoseconds.
        Weight::from_parts(273_485_712, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(474, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_011_583_000 picoseconds.
        Weight::from_parts(2_112_114_704, 0)
            // Standard Error: 6_427
            .saturating_add(Weight::from_parts(3_041_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_reply_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_837_000 picoseconds.
        Weight::from_parts(104_000_952, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(481, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_reply_wgas_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_100_000 picoseconds.
        Weight::from_parts(111_640_124, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(473, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_216_000 picoseconds.
        Weight::from_parts(146_944_239, 0)
            // Standard Error: 5_560
            .saturating_add(Weight::from_parts(1_945_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8388608]`.
    fn gr_reply_push_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_458_000 picoseconds.
        Weight::from_parts(121_683_000, 0)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(692, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_reservation_reply_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_796_000 picoseconds.
        Weight::from_parts(110_128_215, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(476, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_reservation_reply_commit_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_357_000 picoseconds.
        Weight::from_parts(104_558_339, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(479, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_543_000 picoseconds.
        Weight::from_parts(95_698_567, 0)
            // Standard Error: 4_097
            .saturating_add(Weight::from_parts(1_081_167, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_205_000 picoseconds.
        Weight::from_parts(96_650_966, 0)
            // Standard Error: 4_170
            .saturating_add(Weight::from_parts(1_045_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_121_000 picoseconds.
        Weight::from_parts(99_804_131, 0)
            // Standard Error: 3_826
            .saturating_add(Weight::from_parts(1_074_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 728_135_000 picoseconds.
        Weight::from_parts(755_932_617, 0)
            // Standard Error: 5_025
            .saturating_add(Weight::from_parts(1_313_653, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_reply_push_input_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 738_440_000 picoseconds.
        Weight::from_parts(765_658_140, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(140, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_464_304_000 picoseconds.
        Weight::from_parts(2_626_752_524, 0)
            // Standard Error: 6_220
            .saturating_add(Weight::from_parts(1_584_103, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_send_push_input_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_200_000 picoseconds.
        Weight::from_parts(2_617_114_088, 0)
            // Standard Error: 4
            .saturating_add(Weight::from_parts(160, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_208_000 picoseconds.
        Weight::from_parts(111_911_118, 0)
            // Standard Error: 4_615
            .saturating_add(Weight::from_parts(1_465_576, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_debug_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_282_000 picoseconds.
        Weight::from_parts(102_493_050, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(563, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_476_000 picoseconds.
        Weight::from_parts(93_498_476, 0)
            // Standard Error: 4_375
            .saturating_add(Weight::from_parts(1_054_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 178_556_000 picoseconds.
        Weight::from_parts(236_738_148, 0)
            // Standard Error: 3_705
            .saturating_add(Weight::from_parts(1_961_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_609_000 picoseconds.
        Weight::from_parts(169_853_279, 0)
            // Standard Error: 4_763
            .saturating_add(Weight::from_parts(4_306_148, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2097152]`.
    /// The range of component `s` is `[1, 2097152]`.
    fn gr_create_program_per_byte(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_121_113_000 picoseconds.
        Weight::from_parts(75_476_246, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(484, 0).saturating_mul(p.into()))
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_542, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_167_000 picoseconds.
        Weight::from_parts(191_508_251, 0)
            // Standard Error: 4_414
            .saturating_add(Weight::from_parts(4_352_314, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2097152]`.
    /// The range of component `s` is `[1, 2097152]`.
    fn gr_create_program_wgas_per_byte(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_075_469_000 picoseconds.
        Weight::from_parts(92_597_857, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(476, 0).saturating_mul(p.into()))
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_528, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_604_000 picoseconds.
        Weight::from_parts(115_397_628, 0)
            // Standard Error: 4_383
            .saturating_add(Weight::from_parts(1_771_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 97_981_000 picoseconds.
        Weight::from_parts(100_116_000, 1131)
            // Standard Error: 33_167
            .saturating_add(Weight::from_parts(15_452_462, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 95_920_000 picoseconds.
        Weight::from_parts(98_221_000, 1131)
            // Standard Error: 37_416
            .saturating_add(Weight::from_parts(43_655_072, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_114_339_000 picoseconds.
        Weight::from_parts(8_177_491_284, 5069931)
            // Standard Error: 66_457
            .saturating_add(Weight::from_parts(43_170_514, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 99_811_000 picoseconds.
        Weight::from_parts(103_043_000, 1946)
            // Standard Error: 60_822
            .saturating_add(Weight::from_parts(54_997_470, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 105_309_000 picoseconds.
        Weight::from_parts(113_088_468, 1131)
            // Standard Error: 68_166
            .saturating_add(Weight::from_parts(42_761_400, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 762_626_000 picoseconds.
        Weight::from_parts(783_527_691, 1496)
            // Standard Error: 228_267
            .saturating_add(Weight::from_parts(50_457_619, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_236_396_000 picoseconds.
        Weight::from_parts(1_235_721_455, 317931)
            // Standard Error: 223_111
            .saturating_add(Weight::from_parts(51_213_528, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_115_000 picoseconds.
        Weight::from_parts(3_232_000, 0)
            // Standard Error: 4_961
            .saturating_add(Weight::from_parts(1_272_332, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[5000, 50000]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_983_000 picoseconds.
        Weight::from_parts(3_027_543_715, 0)
            // Standard Error: 1_123
            .saturating_add(Weight::from_parts(44_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[5000, 50000]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_608_000 picoseconds.
        Weight::from_parts(3_031_269_030, 0)
            // Standard Error: 1_128
            .saturating_add(Weight::from_parts(44_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[5000, 50000]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_940_501_000 picoseconds.
        Weight::from_parts(5_716_336_496, 0)
            // Standard Error: 3_231
            .saturating_add(Weight::from_parts(166_567, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[5000, 50000]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_896_777_000 picoseconds.
        Weight::from_parts(6_000_433_455, 0)
            // Standard Error: 3_501
            .saturating_add(Weight::from_parts(148_222, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_308_000 picoseconds.
        Weight::from_parts(1_880_860, 0)
            // Standard Error: 32
            .saturating_add(Weight::from_parts(6_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_219_845, 0)
            // Standard Error: 29
            .saturating_add(Weight::from_parts(5_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_211_000 picoseconds.
        Weight::from_parts(2_636_775, 0)
            // Standard Error: 6
            .saturating_add(Weight::from_parts(3_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_484_624, 0)
            // Standard Error: 25
            .saturating_add(Weight::from_parts(5_103, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_275_000 picoseconds.
        Weight::from_parts(1_909_673, 0)
            // Standard Error: 27
            .saturating_add(Weight::from_parts(9_580, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_412_058, 0)
            // Standard Error: 40
            .saturating_add(Weight::from_parts(220, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(2_653_823, 0)
            // Standard Error: 15
            .saturating_add(Weight::from_parts(5_598, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(5_598 -
            5_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_289_000 picoseconds.
        Weight::from_parts(2_408_359, 0)
            // Standard Error: 24
            .saturating_add(Weight::from_parts(5_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_690_000 picoseconds.
        Weight::from_parts(3_555_583, 0)
            // Standard Error: 135
            .saturating_add(Weight::from_parts(22_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_456_289, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(22, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_522_000 picoseconds.
        Weight::from_parts(5_032_864, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(843, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_583_000 picoseconds.
        Weight::from_parts(4_995_254, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(1_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_536_000 picoseconds.
        Weight::from_parts(4_998_614, 0)
            // Standard Error: 9
            .saturating_add(Weight::from_parts(1_957, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_146_000 picoseconds.
        Weight::from_parts(6_336_763, 0)
            // Standard Error: 9
            .saturating_add(Weight::from_parts(736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_068_000 picoseconds.
        Weight::from_parts(6_589_977, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(1_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_901_000 picoseconds.
        Weight::from_parts(6_492_622, 0)
            // Standard Error: 23
            .saturating_add(Weight::from_parts(13_773, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_297_000 picoseconds.
        Weight::from_parts(2_238_098, 0)
            // Standard Error: 29
            .saturating_add(Weight::from_parts(5_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(1_716_825, 0)
            // Standard Error: 26
            .saturating_add(Weight::from_parts(5_659, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_302_000 picoseconds.
        Weight::from_parts(2_529_916, 0)
            // Standard Error: 23
            .saturating_add(Weight::from_parts(5_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_272_000 picoseconds.
        Weight::from_parts(2_511_320, 0)
            // Standard Error: 19
            .saturating_add(Weight::from_parts(4_650, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(2_546_103, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(720, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_290_000 picoseconds.
        Weight::from_parts(2_487_133, 0)
            // Standard Error: 5
            .saturating_add(Weight::from_parts(658, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(1_965_321, 0)
            // Standard Error: 23
            .saturating_add(Weight::from_parts(1_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_188_000 picoseconds.
        Weight::from_parts(2_432_158, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(1_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_200_000 picoseconds.
        Weight::from_parts(2_576_395, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(664, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_318_000 picoseconds.
        Weight::from_parts(2_496_304, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(675, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_303_000 picoseconds.
        Weight::from_parts(2_682_143, 0)
            // Standard Error: 9
            .saturating_add(Weight::from_parts(723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_289_000 picoseconds.
        Weight::from_parts(2_685_831, 0)
            // Standard Error: 9
            .saturating_add(Weight::from_parts(687, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(2_589_331, 0)
            // Standard Error: 7
            .saturating_add(Weight::from_parts(716, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_649_916, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(624, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_311_000 picoseconds.
        Weight::from_parts(2_544_384, 0)
            // Standard Error: 6
            .saturating_add(Weight::from_parts(462, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_314_000 picoseconds.
        Weight::from_parts(2_598_756, 0)
            // Standard Error: 6
            .saturating_add(Weight::from_parts(472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_298_259, 0)
            // Standard Error: 22
            .saturating_add(Weight::from_parts(1_692, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_225_000 picoseconds.
        Weight::from_parts(2_737_492, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_135_161, 0)
            // Standard Error: 23
            .saturating_add(Weight::from_parts(1_722, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_187_000 picoseconds.
        Weight::from_parts(2_608_829, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(1_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(2_077_803, 0)
            // Standard Error: 23
            .saturating_add(Weight::from_parts(1_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_656_066, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_304_846, 0)
            // Standard Error: 19
            .saturating_add(Weight::from_parts(1_627, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_288_000 picoseconds.
        Weight::from_parts(2_739_315, 0)
            // Standard Error: 9
            .saturating_add(Weight::from_parts(968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_253_000 picoseconds.
        Weight::from_parts(2_265_973, 0)
            // Standard Error: 21
            .saturating_add(Weight::from_parts(1_635, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_238_000 picoseconds.
        Weight::from_parts(2_667_314, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(1_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(2_255_860, 0)
            // Standard Error: 20
            .saturating_add(Weight::from_parts(1_799, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_661_142, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(1_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_233_000 picoseconds.
        Weight::from_parts(2_317_697, 0)
            // Standard Error: 20
            .saturating_add(Weight::from_parts(1_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_638_184, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(1_055, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(1_949_145, 0)
            // Standard Error: 26
            .saturating_add(Weight::from_parts(1_833, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_527_079, 0)
            // Standard Error: 9
            .saturating_add(Weight::from_parts(1_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(1_788_297, 0)
            // Standard Error: 27
            .saturating_add(Weight::from_parts(1_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(2_565_074, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(1_131, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_212_000 picoseconds.
        Weight::from_parts(1_821_427, 0)
            // Standard Error: 26
            .saturating_add(Weight::from_parts(1_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_261_000 picoseconds.
        Weight::from_parts(2_732_472, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(1_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(2_841_436, 0)
            // Standard Error: 16
            .saturating_add(Weight::from_parts(1_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(2_737_124, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_533_855, 0)
            // Standard Error: 15
            .saturating_add(Weight::from_parts(1_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_288_000 picoseconds.
        Weight::from_parts(2_781_665, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(725, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_249_669, 0)
            // Standard Error: 21
            .saturating_add(Weight::from_parts(1_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_494_788, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(1_099, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(1_577_384, 0)
            // Standard Error: 39
            .saturating_add(Weight::from_parts(4_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(1_565_004, 0)
            // Standard Error: 32
            .saturating_add(Weight::from_parts(4_347, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(1_459_263, 0)
            // Standard Error: 40
            .saturating_add(Weight::from_parts(5_034, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(1_574_788, 0)
            // Standard Error: 48
            .saturating_add(Weight::from_parts(3_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_307_000, 0)
            // Standard Error: 110
            .saturating_add(Weight::from_parts(15_424, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 74
            .saturating_add(Weight::from_parts(12_477, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_000 picoseconds.
        Weight::from_parts(1_186_895, 0)
            // Standard Error: 44
            .saturating_add(Weight::from_parts(4_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(1_419_587, 0)
            // Standard Error: 40
            .saturating_add(Weight::from_parts(4_139, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_693_441, 0)
            // Standard Error: 14
            .saturating_add(Weight::from_parts(1_169, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_753_908, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(837, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_249_000 picoseconds.
        Weight::from_parts(2_634_805, 0)
            // Standard Error: 15
            .saturating_add(Weight::from_parts(1_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_241_000 picoseconds.
        Weight::from_parts(2_809_262, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(2_918_724, 0)
            // Standard Error: 19
            .saturating_add(Weight::from_parts(1_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(2_588_444, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_748_320, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_234_000 picoseconds.
        Weight::from_parts(2_752_560, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_265_000 picoseconds.
        Weight::from_parts(2_897_035, 0)
            // Standard Error: 15
            .saturating_add(Weight::from_parts(1_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_252_000 picoseconds.
        Weight::from_parts(2_562_455, 0)
            // Standard Error: 7
            .saturating_add(Weight::from_parts(803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(2_756_017, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(982, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_710_638, 0)
            // Standard Error: 7
            .saturating_add(Weight::from_parts(683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(2_732_908, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(998, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_739_243, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(2_784_364, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(1_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_281_000 picoseconds.
        Weight::from_parts(2_661_378, 0)
            // Standard Error: 7
            .saturating_add(Weight::from_parts(716, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `330`
        //  Estimated: `3795`
        // Minimum execution time: 10_176_000 picoseconds.
        Weight::from_parts(10_739_000, 3795)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `23985`
        // Minimum execution time: 62_362_000 picoseconds.
        Weight::from_parts(76_914_000, 23985)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 46_605_000 picoseconds.
        Weight::from_parts(47_554_000, 22158)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 75_170_000 picoseconds.
        Weight::from_parts(77_841_000, 34619)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 32_625_000 picoseconds.
        Weight::from_parts(33_352_000, 20509)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 46_351_000 picoseconds.
        Weight::from_parts(48_221_000, 26636)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_545_000 picoseconds.
        Weight::from_parts(3_705_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1605`
        //  Estimated: `58022`
        // Minimum execution time: 108_342_000 picoseconds.
        Weight::from_parts(110_222_000, 58022)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 90_799_000 picoseconds.
        Weight::from_parts(97_231_000, 46962)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2314 + c * (16400 ±0)`
        //  Estimated: `19933 + c * (84480 ±0)`
        // Minimum execution time: 30_565_000 picoseconds.
        Weight::from_parts(31_282_000, 19933)
            // Standard Error: 63_875
            .saturating_add(Weight::from_parts(40_458_723, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3140 + c * (42 ±0)`
        //  Estimated: `60717 + c * (2947 ±0)`
        // Minimum execution time: 90_823_000 picoseconds.
        Weight::from_parts(72_159_942, 60717)
            // Standard Error: 2_015
            .saturating_add(Weight::from_parts(1_044_502, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_763_000 picoseconds.
        Weight::from_parts(115_255_946, 0)
            // Standard Error: 81_765
            .saturating_add(Weight::from_parts(11_471_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_982_000 picoseconds.
        Weight::from_parts(112_837_280, 0)
            // Standard Error: 83_744
            .saturating_add(Weight::from_parts(11_655_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_679_000 picoseconds.
        Weight::from_parts(112_716_114, 0)
            // Standard Error: 79_297
            .saturating_add(Weight::from_parts(12_071_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_022_000 picoseconds.
        Weight::from_parts(107_983_958, 0)
            // Standard Error: 82_702
            .saturating_add(Weight::from_parts(17_259_426, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 724_058_000 picoseconds.
        Weight::from_parts(746_717_880, 0)
            // Standard Error: 516_712
            .saturating_add(Weight::from_parts(13_440_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 717_664_000 picoseconds.
        Weight::from_parts(740_682_668, 0)
            // Standard Error: 441_746
            .saturating_add(Weight::from_parts(16_082_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_230_000 picoseconds.
        Weight::from_parts(112_253_712, 0)
            // Standard Error: 79_840
            .saturating_add(Weight::from_parts(8_576_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_978_000 picoseconds.
        Weight::from_parts(111_853_074, 0)
            // Standard Error: 90_039
            .saturating_add(Weight::from_parts(16_463_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_096_000 picoseconds.
        Weight::from_parts(105_150_944, 0)
            // Standard Error: 2_214_411
            .saturating_add(Weight::from_parts(540_483_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_966_000 picoseconds.
        Weight::from_parts(104_831_992, 0)
            // Standard Error: 2_724_818
            .saturating_add(Weight::from_parts(534_806_376, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_996_000 picoseconds.
        Weight::from_parts(104_528_240, 0)
            // Standard Error: 2_236_909
            .saturating_add(Weight::from_parts(538_937_482, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_143_000 picoseconds.
        Weight::from_parts(109_857_984, 0)
            // Standard Error: 2_206_134
            .saturating_add(Weight::from_parts(533_656_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_734_000 picoseconds.
        Weight::from_parts(107_566_904, 0)
            // Standard Error: 2_221_037
            .saturating_add(Weight::from_parts(534_995_568, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 524288]`.
    fn db_write_per_byte(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_025_000 picoseconds.
        Weight::from_parts(1_059_000, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(242, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn db_read_per_byte(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1 ±0)`
        //  Estimated: `3610 + c * (1 ±0)`
        // Minimum execution time: 3_060_000 picoseconds.
        Weight::from_parts(3_227_000, 3610)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(726, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn instantiate_module_per_byte(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_530_000 picoseconds.
        Weight::from_parts(99_440_658, 0)
            // Standard Error: 7
            .saturating_add(Weight::from_parts(2_354, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1354`
        //  Estimated: `51743`
        // Minimum execution time: 105_483_000 picoseconds.
        Weight::from_parts(108_998_000, 51743)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `996`
        //  Estimated: `21591`
        // Minimum execution time: 54_636_000 picoseconds.
        Weight::from_parts(56_673_000, 21591)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17474`
        // Minimum execution time: 28_955_000 picoseconds.
        Weight::from_parts(30_418_000, 17474)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `330`
        //  Estimated: `4125`
        // Minimum execution time: 8_526_000 picoseconds.
        Weight::from_parts(9_658_026, 4125)
            // Standard Error: 8_183
            .saturating_add(Weight::from_parts(14_447_160, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3184 + c * (16400 ±0)`
        //  Estimated: `44029 + c * (117282 ±0)`
        // Minimum execution time: 69_004_000 picoseconds.
        Weight::from_parts(69_173_000, 44029)
            // Standard Error: 51_535
            .saturating_add(Weight::from_parts(39_261_636, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
            .saturating_add(Weight::from_parts(0, 117282).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 86_739_000 picoseconds.
        Weight::from_parts(68_804_665, 5402)
            // Standard Error: 45_286
            .saturating_add(Weight::from_parts(61_912_853, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 2097152]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1116`
        //  Estimated: `50655`
        // Minimum execution time: 95_644_000 picoseconds.
        Weight::from_parts(118_453_429, 50655)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_587, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 2097152]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 5_421_908_000 picoseconds.
        Weight::from_parts(46_009_014, 45152)
            // Standard Error: 91
            .saturating_add(Weight::from_parts(61_728, 0).saturating_mul(c.into()))
            // Standard Error: 11
            .saturating_add(Weight::from_parts(2_538, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `513`
        //  Estimated: `31140`
        // Minimum execution time: 73_530_000 picoseconds.
        Weight::from_parts(47_210_421, 31140)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_102, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1353`
        //  Estimated: `54273`
        // Minimum execution time: 123_358_000 picoseconds.
        Weight::from_parts(105_195_521, 54273)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_110, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `123826`
        // Minimum execution time: 273_290_000 picoseconds.
        Weight::from_parts(281_966_610, 123826)
            // Standard Error: 1_030
            .saturating_add(Weight::from_parts(6_654, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(34_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `123826`
        // Minimum execution time: 287_423_000 picoseconds.
        Weight::from_parts(300_193_279, 123826)
            .saturating_add(RocksDbWeight::get().reads(34_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument_per_byte(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `203 + c * (1 ±0)`
        //  Estimated: `3887 + c * (2 ±0)`
        // Minimum execution time: 68_433_000 picoseconds.
        Weight::from_parts(69_028_000, 3887)
            // Standard Error: 41
            .saturating_add(Weight::from_parts(59_964, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_204_000 picoseconds.
        Weight::from_parts(100_481_000, 0)
            // Standard Error: 51_191
            .saturating_add(Weight::from_parts(9_167_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_207_000 picoseconds.
        Weight::from_parts(111_747_323, 0)
            // Standard Error: 648
            .saturating_add(Weight::from_parts(66_514, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 512]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_587_000 picoseconds.
        Weight::from_parts(112_666_566, 0)
            // Standard Error: 1_158
            .saturating_add(Weight::from_parts(807_838, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_466_000 picoseconds.
        Weight::from_parts(108_404_921, 0)
            // Standard Error: 4_985
            .saturating_add(Weight::from_parts(2_479_218, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 178_085_000 picoseconds.
        Weight::from_parts(224_011_103, 0)
            // Standard Error: 15_506
            .saturating_add(Weight::from_parts(2_143_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_782_000 picoseconds.
        Weight::from_parts(129_329_433, 0)
            // Standard Error: 4_680
            .saturating_add(Weight::from_parts(1_177_131, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_132_000 picoseconds.
        Weight::from_parts(88_007_385, 0)
            // Standard Error: 4_426
            .saturating_add(Weight::from_parts(1_096_716, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_115_000 picoseconds.
        Weight::from_parts(92_730_873, 0)
            // Standard Error: 3_933
            .saturating_add(Weight::from_parts(1_082_639, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_908_000 picoseconds.
        Weight::from_parts(92_063_659, 0)
            // Standard Error: 3_771
            .saturating_add(Weight::from_parts(1_067_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_438_000 picoseconds.
        Weight::from_parts(94_402_908, 0)
            // Standard Error: 3_739
            .saturating_add(Weight::from_parts(1_082_114, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_804_000 picoseconds.
        Weight::from_parts(94_640_616, 0)
            // Standard Error: 3_846
            .saturating_add(Weight::from_parts(1_079_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_227_000 picoseconds.
        Weight::from_parts(95_435_113, 0)
            // Standard Error: 4_144
            .saturating_add(Weight::from_parts(1_070_237, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_825_000 picoseconds.
        Weight::from_parts(103_317_611, 0)
            // Standard Error: 4_052
            .saturating_add(Weight::from_parts(1_072_963, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 727_152_000 picoseconds.
        Weight::from_parts(779_961_563, 0)
            // Standard Error: 5_208
            .saturating_add(Weight::from_parts(1_810_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_read_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 743_681_000 picoseconds.
        Weight::from_parts(798_430_571, 0)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(430, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_100_000 picoseconds.
        Weight::from_parts(109_493_812, 0)
            // Standard Error: 4_588
            .saturating_add(Weight::from_parts(1_211_616, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_781_000 picoseconds.
        Weight::from_parts(94_444_703, 0)
            // Standard Error: 4_320
            .saturating_add(Weight::from_parts(1_086_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_582_000 picoseconds.
        Weight::from_parts(98_775_923, 0)
            // Standard Error: 3_652
            .saturating_add(Weight::from_parts(1_062_452, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 1600]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_316_000 picoseconds.
        Weight::from_parts(113_057_046, 0)
            // Standard Error: 4_472
            .saturating_add(Weight::from_parts(2_172_301, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_625_000 picoseconds.
        Weight::from_parts(104_694_000, 0)
            // Standard Error: 60_908
            .saturating_add(Weight::from_parts(11_132_378, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_772_000 picoseconds.
        Weight::from_parts(167_224_207, 0)
            // Standard Error: 4_906
            .saturating_add(Weight::from_parts(3_254_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_send_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 118_139_000 picoseconds.
        Weight::from_parts(107_906_150, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(476, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_747_000 picoseconds.
        Weight::from_parts(192_373_084, 0)
            // Standard Error: 4_921
            .saturating_add(Weight::from_parts(3_311_863, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_send_wgas_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_765_000 picoseconds.
        Weight::from_parts(105_754_305, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(482, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 731_333_000 picoseconds.
        Weight::from_parts(803_330_857, 0)
            // Standard Error: 5_122
            .saturating_add(Weight::from_parts(3_416_901, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 726_604_000 picoseconds.
        Weight::from_parts(840_804_738, 0)
            // Standard Error: 5_534
            .saturating_add(Weight::from_parts(3_395_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_641_000 picoseconds.
        Weight::from_parts(90_547_776, 0)
            // Standard Error: 4_274
            .saturating_add(Weight::from_parts(1_167_800, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_851_174_000 picoseconds.
        Weight::from_parts(1_954_356_159, 0)
            // Standard Error: 4_121
            .saturating_add(Weight::from_parts(2_165_760, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_send_push_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 118_614_000 picoseconds.
        Weight::from_parts(112_607_583, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(618, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_849_057_000 picoseconds.
        Weight::from_parts(1_967_910_155, 0)
            // Standard Error: 4_291
            .saturating_add(Weight::from_parts(2_796_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_861_277_000 picoseconds.
        Weight::from_parts(1_987_687_603, 0)
            // Standard Error: 4_536
            .saturating_add(Weight::from_parts(2_826_424, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 257_144_000 picoseconds.
        Weight::from_parts(337_918_115, 0)
            // Standard Error: 4_622
            .saturating_add(Weight::from_parts(3_441_230, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_reservation_send_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 270_111_000 picoseconds.
        Weight::from_parts(273_485_712, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(474, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_011_583_000 picoseconds.
        Weight::from_parts(2_112_114_704, 0)
            // Standard Error: 6_427
            .saturating_add(Weight::from_parts(3_041_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_reply_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_837_000 picoseconds.
        Weight::from_parts(104_000_952, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(481, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_reply_wgas_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_100_000 picoseconds.
        Weight::from_parts(111_640_124, 0)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(473, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_216_000 picoseconds.
        Weight::from_parts(146_944_239, 0)
            // Standard Error: 5_560
            .saturating_add(Weight::from_parts(1_945_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8388608]`.
    fn gr_reply_push_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_458_000 picoseconds.
        Weight::from_parts(121_683_000, 0)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(692, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_reservation_reply_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_796_000 picoseconds.
        Weight::from_parts(110_128_215, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(476, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_reservation_reply_commit_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_357_000 picoseconds.
        Weight::from_parts(104_558_339, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(479, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_543_000 picoseconds.
        Weight::from_parts(95_698_567, 0)
            // Standard Error: 4_097
            .saturating_add(Weight::from_parts(1_081_167, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_205_000 picoseconds.
        Weight::from_parts(96_650_966, 0)
            // Standard Error: 4_170
            .saturating_add(Weight::from_parts(1_045_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_121_000 picoseconds.
        Weight::from_parts(99_804_131, 0)
            // Standard Error: 3_826
            .saturating_add(Weight::from_parts(1_074_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 728_135_000 picoseconds.
        Weight::from_parts(755_932_617, 0)
            // Standard Error: 5_025
            .saturating_add(Weight::from_parts(1_313_653, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_reply_push_input_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 738_440_000 picoseconds.
        Weight::from_parts(765_658_140, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(140, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_464_304_000 picoseconds.
        Weight::from_parts(2_626_752_524, 0)
            // Standard Error: 6_220
            .saturating_add(Weight::from_parts(1_584_103, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_send_push_input_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_467_200_000 picoseconds.
        Weight::from_parts(2_617_114_088, 0)
            // Standard Error: 4
            .saturating_add(Weight::from_parts(160, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_208_000 picoseconds.
        Weight::from_parts(111_911_118, 0)
            // Standard Error: 4_615
            .saturating_add(Weight::from_parts(1_465_576, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2097152]`.
    fn gr_debug_per_byte(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_282_000 picoseconds.
        Weight::from_parts(102_493_050, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(563, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_476_000 picoseconds.
        Weight::from_parts(93_498_476, 0)
            // Standard Error: 4_375
            .saturating_add(Weight::from_parts(1_054_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 178_556_000 picoseconds.
        Weight::from_parts(236_738_148, 0)
            // Standard Error: 3_705
            .saturating_add(Weight::from_parts(1_961_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_609_000 picoseconds.
        Weight::from_parts(169_853_279, 0)
            // Standard Error: 4_763
            .saturating_add(Weight::from_parts(4_306_148, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2097152]`.
    /// The range of component `s` is `[1, 2097152]`.
    fn gr_create_program_per_byte(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_121_113_000 picoseconds.
        Weight::from_parts(75_476_246, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(484, 0).saturating_mul(p.into()))
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_542, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_167_000 picoseconds.
        Weight::from_parts(191_508_251, 0)
            // Standard Error: 4_414
            .saturating_add(Weight::from_parts(4_352_314, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2097152]`.
    /// The range of component `s` is `[1, 2097152]`.
    fn gr_create_program_wgas_per_byte(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_075_469_000 picoseconds.
        Weight::from_parts(92_597_857, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(476, 0).saturating_mul(p.into()))
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_528, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_604_000 picoseconds.
        Weight::from_parts(115_397_628, 0)
            // Standard Error: 4_383
            .saturating_add(Weight::from_parts(1_771_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 97_981_000 picoseconds.
        Weight::from_parts(100_116_000, 1131)
            // Standard Error: 33_167
            .saturating_add(Weight::from_parts(15_452_462, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 95_920_000 picoseconds.
        Weight::from_parts(98_221_000, 1131)
            // Standard Error: 37_416
            .saturating_add(Weight::from_parts(43_655_072, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_114_339_000 picoseconds.
        Weight::from_parts(8_177_491_284, 5069931)
            // Standard Error: 66_457
            .saturating_add(Weight::from_parts(43_170_514, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 99_811_000 picoseconds.
        Weight::from_parts(103_043_000, 1946)
            // Standard Error: 60_822
            .saturating_add(Weight::from_parts(54_997_470, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 105_309_000 picoseconds.
        Weight::from_parts(113_088_468, 1131)
            // Standard Error: 68_166
            .saturating_add(Weight::from_parts(42_761_400, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 762_626_000 picoseconds.
        Weight::from_parts(783_527_691, 1496)
            // Standard Error: 228_267
            .saturating_add(Weight::from_parts(50_457_619, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_236_396_000 picoseconds.
        Weight::from_parts(1_235_721_455, 317931)
            // Standard Error: 223_111
            .saturating_add(Weight::from_parts(51_213_528, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 1600]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_115_000 picoseconds.
        Weight::from_parts(3_232_000, 0)
            // Standard Error: 4_961
            .saturating_add(Weight::from_parts(1_272_332, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[5000, 50000]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_983_000 picoseconds.
        Weight::from_parts(3_027_543_715, 0)
            // Standard Error: 1_123
            .saturating_add(Weight::from_parts(44_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[5000, 50000]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_608_000 picoseconds.
        Weight::from_parts(3_031_269_030, 0)
            // Standard Error: 1_128
            .saturating_add(Weight::from_parts(44_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[5000, 50000]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_940_501_000 picoseconds.
        Weight::from_parts(5_716_336_496, 0)
            // Standard Error: 3_231
            .saturating_add(Weight::from_parts(166_567, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[5000, 50000]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_896_777_000 picoseconds.
        Weight::from_parts(6_000_433_455, 0)
            // Standard Error: 3_501
            .saturating_add(Weight::from_parts(148_222, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_308_000 picoseconds.
        Weight::from_parts(1_880_860, 0)
            // Standard Error: 32
            .saturating_add(Weight::from_parts(6_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_219_845, 0)
            // Standard Error: 29
            .saturating_add(Weight::from_parts(5_600, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_211_000 picoseconds.
        Weight::from_parts(2_636_775, 0)
            // Standard Error: 6
            .saturating_add(Weight::from_parts(3_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_484_624, 0)
            // Standard Error: 25
            .saturating_add(Weight::from_parts(5_103, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_275_000 picoseconds.
        Weight::from_parts(1_909_673, 0)
            // Standard Error: 27
            .saturating_add(Weight::from_parts(9_580, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_214_000 picoseconds.
        Weight::from_parts(2_412_058, 0)
            // Standard Error: 40
            .saturating_add(Weight::from_parts(220, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(2_653_823, 0)
            // Standard Error: 15
            .saturating_add(Weight::from_parts(5_598, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(5_598 -
            5_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_289_000 picoseconds.
        Weight::from_parts(2_408_359, 0)
            // Standard Error: 24
            .saturating_add(Weight::from_parts(5_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_690_000 picoseconds.
        Weight::from_parts(3_555_583, 0)
            // Standard Error: 135
            .saturating_add(Weight::from_parts(22_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_456_289, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(22, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_522_000 picoseconds.
        Weight::from_parts(5_032_864, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(843, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_583_000 picoseconds.
        Weight::from_parts(4_995_254, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(1_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_536_000 picoseconds.
        Weight::from_parts(4_998_614, 0)
            // Standard Error: 9
            .saturating_add(Weight::from_parts(1_957, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_146_000 picoseconds.
        Weight::from_parts(6_336_763, 0)
            // Standard Error: 9
            .saturating_add(Weight::from_parts(736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_068_000 picoseconds.
        Weight::from_parts(6_589_977, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(1_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_901_000 picoseconds.
        Weight::from_parts(6_492_622, 0)
            // Standard Error: 23
            .saturating_add(Weight::from_parts(13_773, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_297_000 picoseconds.
        Weight::from_parts(2_238_098, 0)
            // Standard Error: 29
            .saturating_add(Weight::from_parts(5_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(1_716_825, 0)
            // Standard Error: 26
            .saturating_add(Weight::from_parts(5_659, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_302_000 picoseconds.
        Weight::from_parts(2_529_916, 0)
            // Standard Error: 23
            .saturating_add(Weight::from_parts(5_084, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_272_000 picoseconds.
        Weight::from_parts(2_511_320, 0)
            // Standard Error: 19
            .saturating_add(Weight::from_parts(4_650, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_213_000 picoseconds.
        Weight::from_parts(2_546_103, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(720, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_290_000 picoseconds.
        Weight::from_parts(2_487_133, 0)
            // Standard Error: 5
            .saturating_add(Weight::from_parts(658, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(1_965_321, 0)
            // Standard Error: 23
            .saturating_add(Weight::from_parts(1_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_188_000 picoseconds.
        Weight::from_parts(2_432_158, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(1_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_200_000 picoseconds.
        Weight::from_parts(2_576_395, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(664, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_318_000 picoseconds.
        Weight::from_parts(2_496_304, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(675, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_303_000 picoseconds.
        Weight::from_parts(2_682_143, 0)
            // Standard Error: 9
            .saturating_add(Weight::from_parts(723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_289_000 picoseconds.
        Weight::from_parts(2_685_831, 0)
            // Standard Error: 9
            .saturating_add(Weight::from_parts(687, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(2_589_331, 0)
            // Standard Error: 7
            .saturating_add(Weight::from_parts(716, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_649_916, 0)
            // Standard Error: 8
            .saturating_add(Weight::from_parts(624, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_311_000 picoseconds.
        Weight::from_parts(2_544_384, 0)
            // Standard Error: 6
            .saturating_add(Weight::from_parts(462, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_314_000 picoseconds.
        Weight::from_parts(2_598_756, 0)
            // Standard Error: 6
            .saturating_add(Weight::from_parts(472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_298_259, 0)
            // Standard Error: 22
            .saturating_add(Weight::from_parts(1_692, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_225_000 picoseconds.
        Weight::from_parts(2_737_492, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_135_161, 0)
            // Standard Error: 23
            .saturating_add(Weight::from_parts(1_722, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_187_000 picoseconds.
        Weight::from_parts(2_608_829, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(1_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(2_077_803, 0)
            // Standard Error: 23
            .saturating_add(Weight::from_parts(1_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_656_066, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_304_846, 0)
            // Standard Error: 19
            .saturating_add(Weight::from_parts(1_627, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_288_000 picoseconds.
        Weight::from_parts(2_739_315, 0)
            // Standard Error: 9
            .saturating_add(Weight::from_parts(968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_253_000 picoseconds.
        Weight::from_parts(2_265_973, 0)
            // Standard Error: 21
            .saturating_add(Weight::from_parts(1_635, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_238_000 picoseconds.
        Weight::from_parts(2_667_314, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(1_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(2_255_860, 0)
            // Standard Error: 20
            .saturating_add(Weight::from_parts(1_799, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_661_142, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(1_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_233_000 picoseconds.
        Weight::from_parts(2_317_697, 0)
            // Standard Error: 20
            .saturating_add(Weight::from_parts(1_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_638_184, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(1_055, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(1_949_145, 0)
            // Standard Error: 26
            .saturating_add(Weight::from_parts(1_833, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_527_079, 0)
            // Standard Error: 9
            .saturating_add(Weight::from_parts(1_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(1_788_297, 0)
            // Standard Error: 27
            .saturating_add(Weight::from_parts(1_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(2_565_074, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(1_131, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_212_000 picoseconds.
        Weight::from_parts(1_821_427, 0)
            // Standard Error: 26
            .saturating_add(Weight::from_parts(1_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_261_000 picoseconds.
        Weight::from_parts(2_732_472, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(1_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(2_841_436, 0)
            // Standard Error: 16
            .saturating_add(Weight::from_parts(1_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(2_737_124, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_533_855, 0)
            // Standard Error: 15
            .saturating_add(Weight::from_parts(1_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_288_000 picoseconds.
        Weight::from_parts(2_781_665, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(725, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_249_669, 0)
            // Standard Error: 21
            .saturating_add(Weight::from_parts(1_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_494_788, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(1_099, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(1_577_384, 0)
            // Standard Error: 39
            .saturating_add(Weight::from_parts(4_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(1_565_004, 0)
            // Standard Error: 32
            .saturating_add(Weight::from_parts(4_347, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(1_459_263, 0)
            // Standard Error: 40
            .saturating_add(Weight::from_parts(5_034, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(1_574_788, 0)
            // Standard Error: 48
            .saturating_add(Weight::from_parts(3_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_307_000, 0)
            // Standard Error: 110
            .saturating_add(Weight::from_parts(15_424, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 74
            .saturating_add(Weight::from_parts(12_477, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_000 picoseconds.
        Weight::from_parts(1_186_895, 0)
            // Standard Error: 44
            .saturating_add(Weight::from_parts(4_969, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(1_419_587, 0)
            // Standard Error: 40
            .saturating_add(Weight::from_parts(4_139, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_693_441, 0)
            // Standard Error: 14
            .saturating_add(Weight::from_parts(1_169, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_753_908, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(837, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_249_000 picoseconds.
        Weight::from_parts(2_634_805, 0)
            // Standard Error: 15
            .saturating_add(Weight::from_parts(1_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_241_000 picoseconds.
        Weight::from_parts(2_809_262, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(2_918_724, 0)
            // Standard Error: 19
            .saturating_add(Weight::from_parts(1_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(2_588_444, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_176_000 picoseconds.
        Weight::from_parts(2_748_320, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_234_000 picoseconds.
        Weight::from_parts(2_752_560, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_265_000 picoseconds.
        Weight::from_parts(2_897_035, 0)
            // Standard Error: 15
            .saturating_add(Weight::from_parts(1_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_252_000 picoseconds.
        Weight::from_parts(2_562_455, 0)
            // Standard Error: 7
            .saturating_add(Weight::from_parts(803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(2_756_017, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(982, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_710_638, 0)
            // Standard Error: 7
            .saturating_add(Weight::from_parts(683, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(2_732_908, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(998, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_739_243, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(2_784_364, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(1_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 5000]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_281_000 picoseconds.
        Weight::from_parts(2_661_378, 0)
            // Standard Error: 7
            .saturating_add(Weight::from_parts(716, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `330`
        //  Estimated: `3795`
        // Minimum execution time: 10_176_000 picoseconds.
        Weight::from_parts(10_739_000, 3795)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `23985`
        // Minimum execution time: 62_362_000 picoseconds.
        Weight::from_parts(76_914_000, 23985)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 46_605_000 picoseconds.
        Weight::from_parts(47_554_000, 22158)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 75_170_000 picoseconds.
        Weight::from_parts(77_841_000, 34619)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 32_625_000 picoseconds.
        Weight::from_parts(33_352_000, 20509)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 46_351_000 picoseconds.
        Weight::from_parts(48_221_000, 26636)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_545_000 picoseconds.
        Weight::from_parts(3_705_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1605`
        //  Estimated: `58022`
        // Minimum execution time: 108_342_000 picoseconds.
        Weight::from_parts(110_222_000, 58022)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 90_799_000 picoseconds.
        Weight::from_parts(97_231_000, 46962)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2314 + c * (16400 ±0)`
        //  Estimated: `19933 + c * (84480 ±0)`
        // Minimum execution time: 30_565_000 picoseconds.
        Weight::from_parts(31_282_000, 19933)
            // Standard Error: 63_875
            .saturating_add(Weight::from_parts(40_458_723, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3140 + c * (42 ±0)`
        //  Estimated: `60717 + c * (2947 ±0)`
        // Minimum execution time: 90_823_000 picoseconds.
        Weight::from_parts(72_159_942, 60717)
            // Standard Error: 2_015
            .saturating_add(Weight::from_parts(1_044_502, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}
