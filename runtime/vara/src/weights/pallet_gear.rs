// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_in_handle,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_gas_available,gr_message_id,gr_pay_program_rent,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,initial_allocation,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,pay_program_rent,reinstrument_per_kb,resume_session_commit,resume_session_init,resume_session_push,send_message,send_reply,tasks_pause_program,tasks_pause_program_uninited,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_remove_resume_session,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_resume_session() -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn tasks_pause_program(c: u32, ) -> Weight;
    fn tasks_pause_program_uninited(c: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_481_000 picoseconds.
        Weight::from_parts(99_630_512, 0)
            // Standard Error: 75_924
            .saturating_add(Weight::from_parts(23_053_014, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_084_000 picoseconds.
        Weight::from_parts(100_989_768, 0)
            // Standard Error: 77_579
            .saturating_add(Weight::from_parts(19_975_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_220_000 picoseconds.
        Weight::from_parts(101_639_276, 0)
            // Standard Error: 78_950
            .saturating_add(Weight::from_parts(19_516_538, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_519_000 picoseconds.
        Weight::from_parts(104_542_944, 0)
            // Standard Error: 85_434
            .saturating_add(Weight::from_parts(16_283_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_839_000 picoseconds.
        Weight::from_parts(578_640_448, 0)
            // Standard Error: 265_785
            .saturating_add(Weight::from_parts(23_277_228, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 566_517_000 picoseconds.
        Weight::from_parts(578_394_370, 0)
            // Standard Error: 310_713
            .saturating_add(Weight::from_parts(23_740_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_298_000 picoseconds.
        Weight::from_parts(110_601_892, 0)
            // Standard Error: 74_798
            .saturating_add(Weight::from_parts(13_256_496, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_170_000 picoseconds.
        Weight::from_parts(110_509_198, 0)
            // Standard Error: 75_072
            .saturating_add(Weight::from_parts(8_446_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_097_000 picoseconds.
        Weight::from_parts(104_586_244, 0)
            // Standard Error: 2_206_364
            .saturating_add(Weight::from_parts(539_716_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_581_000 picoseconds.
        Weight::from_parts(99_821_258, 0)
            // Standard Error: 2_040_137
            .saturating_add(Weight::from_parts(531_583_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_087_000 picoseconds.
        Weight::from_parts(98_818_474, 0)
            // Standard Error: 2_031_704
            .saturating_add(Weight::from_parts(511_188_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_983_000 picoseconds.
        Weight::from_parts(103_407_974, 0)
            // Standard Error: 2_262_032
            .saturating_add(Weight::from_parts(537_941_706, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_211_000 picoseconds.
        Weight::from_parts(99_567_606, 0)
            // Standard Error: 2_243_437
            .saturating_add(Weight::from_parts(546_603_328, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 913_000 picoseconds.
        Weight::from_parts(988_000, 0)
            // Standard Error: 808
            .saturating_add(Weight::from_parts(208_070, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_317_000 picoseconds.
        Weight::from_parts(3_371_000, 3610)
            // Standard Error: 1_078
            .saturating_add(Weight::from_parts(683_725, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_579_000 picoseconds.
        Weight::from_parts(84_317_104, 0)
            // Standard Error: 8_351
            .saturating_add(Weight::from_parts(2_389_227, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1372`
        //  Estimated: `51905`
        // Minimum execution time: 107_507_000 picoseconds.
        Weight::from_parts(111_275_000, 51905)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `992`
        //  Estimated: `21579`
        // Minimum execution time: 56_209_000 picoseconds.
        Weight::from_parts(57_312_000, 21579)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17486`
        // Minimum execution time: 29_853_000 picoseconds.
        Weight::from_parts(30_508_000, 17486)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_125_000 picoseconds.
        Weight::from_parts(7_328_750, 7640)
            // Standard Error: 31_392
            .saturating_add(Weight::from_parts(13_296_411, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1593 + c * (16389 ±0)`
        //  Estimated: `43266 + c * (131112 ±0)`
        // Minimum execution time: 71_309_000 picoseconds.
        Weight::from_parts(72_000_000, 43266)
            // Standard Error: 164_824
            .saturating_add(Weight::from_parts(53_991_920, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 77_057_000 picoseconds.
        Weight::from_parts(41_092_099, 5402)
            // Standard Error: 46_331
            .saturating_add(Weight::from_parts(59_385_089, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 93_750_000 picoseconds.
        Weight::from_parts(135_988_081, 50600)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_601, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 11_058_028_000 picoseconds.
        Weight::from_parts(61_156_523, 45152)
            // Standard Error: 151_318
            .saturating_add(Weight::from_parts(60_095_790, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_590, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `31266`
        // Minimum execution time: 74_169_000 picoseconds.
        Weight::from_parts(55_329_402, 31266)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_029, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1371`
        //  Estimated: `54435`
        // Minimum execution time: 123_953_000 picoseconds.
        Weight::from_parts(102_637_678, 54435)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_058, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 364_818_000 picoseconds.
        Weight::from_parts(378_805_720, 121468)
            // Standard Error: 1_617
            .saturating_add(Weight::from_parts(22_341, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(35_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 384_136_000 picoseconds.
        Weight::from_parts(401_096_451, 121468)
            // Standard Error: 1_778
            .saturating_add(Weight::from_parts(7_580, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(35_u64))
            .saturating_add(T::DbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 57_952_000 picoseconds.
        Weight::from_parts(58_459_000, 3899)
            // Standard Error: 31_966
            .saturating_add(Weight::from_parts(57_251_256, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_344_000 picoseconds.
        Weight::from_parts(95_470_000, 0)
            // Standard Error: 3_698_034
            .saturating_add(Weight::from_parts(695_592_141, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 477_022_000 picoseconds.
        Weight::from_parts(416_066_225, 0)
            // Standard Error: 6_775
            .saturating_add(Weight::from_parts(29_002_726, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 205_619_000 picoseconds.
        Weight::from_parts(207_970_847, 0)
            // Standard Error: 276_100
            .saturating_add(Weight::from_parts(64_532_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_943_000 picoseconds.
        Weight::from_parts(108_787_625, 0)
            // Standard Error: 4_056
            .saturating_add(Weight::from_parts(2_331_687, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 180_061_000 picoseconds.
        Weight::from_parts(240_089_561, 0)
            // Standard Error: 19_695
            .saturating_add(Weight::from_parts(1_725_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_167_000 picoseconds.
        Weight::from_parts(114_668_235, 0)
            // Standard Error: 327_816
            .saturating_add(Weight::from_parts(95_835_449, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_801_000 picoseconds.
        Weight::from_parts(94_087_662, 0)
            // Standard Error: 295_899
            .saturating_add(Weight::from_parts(80_358_803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_883_000 picoseconds.
        Weight::from_parts(91_458_205, 0)
            // Standard Error: 277_911
            .saturating_add(Weight::from_parts(79_609_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_001_000 picoseconds.
        Weight::from_parts(102_977_333, 0)
            // Standard Error: 241_685
            .saturating_add(Weight::from_parts(78_147_656, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_109_000 picoseconds.
        Weight::from_parts(92_161_673, 0)
            // Standard Error: 307_089
            .saturating_add(Weight::from_parts(79_032_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_315_000 picoseconds.
        Weight::from_parts(90_290_936, 0)
            // Standard Error: 311_079
            .saturating_add(Weight::from_parts(79_012_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_434_000 picoseconds.
        Weight::from_parts(92_258_883, 0)
            // Standard Error: 340_259
            .saturating_add(Weight::from_parts(79_497_977, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_509_000 picoseconds.
        Weight::from_parts(93_232_951, 0)
            // Standard Error: 311_415
            .saturating_add(Weight::from_parts(78_578_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 560_638_000 picoseconds.
        Weight::from_parts(622_793_170, 0)
            // Standard Error: 442_308
            .saturating_add(Weight::from_parts(115_520_309, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 699_618_000 picoseconds.
        Weight::from_parts(708_164_000, 0)
            // Standard Error: 60_311
            .saturating_add(Weight::from_parts(13_065_351, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_193_000 picoseconds.
        Weight::from_parts(88_273_331, 0)
            // Standard Error: 341_296
            .saturating_add(Weight::from_parts(79_488_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_761_000 picoseconds.
        Weight::from_parts(92_808_053, 0)
            // Standard Error: 291_078
            .saturating_add(Weight::from_parts(79_328_368, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_311_000 picoseconds.
        Weight::from_parts(115_529_332, 0)
            // Standard Error: 372_545
            .saturating_add(Weight::from_parts(158_756_414, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_299_000 picoseconds.
        Weight::from_parts(101_073_000, 0)
            // Standard Error: 4_427_069
            .saturating_add(Weight::from_parts(804_033_285, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_702_000 picoseconds.
        Weight::from_parts(157_572_374, 0)
            // Standard Error: 440_582
            .saturating_add(Weight::from_parts(237_330_822, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_067_000 picoseconds.
        Weight::from_parts(335_243_000, 0)
            // Standard Error: 66_195
            .saturating_add(Weight::from_parts(21_168_225, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_664_000 picoseconds.
        Weight::from_parts(160_031_051, 0)
            // Standard Error: 420_743
            .saturating_add(Weight::from_parts(242_377_960, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 336_245_000 picoseconds.
        Weight::from_parts(344_823_000, 0)
            // Standard Error: 66_941
            .saturating_add(Weight::from_parts(21_197_510, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_911_000 picoseconds.
        Weight::from_parts(640_996_354, 0)
            // Standard Error: 438_459
            .saturating_add(Weight::from_parts(256_681_728, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 563_652_000 picoseconds.
        Weight::from_parts(622_166_971, 0)
            // Standard Error: 370_073
            .saturating_add(Weight::from_parts(262_920_632, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_502_000 picoseconds.
        Weight::from_parts(86_484_703, 0)
            // Standard Error: 295_629
            .saturating_add(Weight::from_parts(87_263_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_751_173_000 picoseconds.
        Weight::from_parts(1_872_427_496, 0)
            // Standard Error: 324_033
            .saturating_add(Weight::from_parts(145_731_403, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 302_030_000 picoseconds.
        Weight::from_parts(304_788_000, 0)
            // Standard Error: 59_829
            .saturating_add(Weight::from_parts(29_174_594, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_748_875_000 picoseconds.
        Weight::from_parts(1_850_022_763, 0)
            // Standard Error: 361_778
            .saturating_add(Weight::from_parts(203_156_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_760_367_000 picoseconds.
        Weight::from_parts(1_881_542_241, 0)
            // Standard Error: 363_139
            .saturating_add(Weight::from_parts(201_598_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 258_633_000 picoseconds.
        Weight::from_parts(326_523_468, 0)
            // Standard Error: 376_037
            .saturating_add(Weight::from_parts(253_538_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 505_403_000 picoseconds.
        Weight::from_parts(514_440_000, 0)
            // Standard Error: 53_186
            .saturating_add(Weight::from_parts(20_774_954, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_896_275_000 picoseconds.
        Weight::from_parts(1_982_312_341, 0)
            // Standard Error: 487_511
            .saturating_add(Weight::from_parts(220_195_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_679_000 picoseconds.
        Weight::from_parts(101_734_013, 0)
            // Standard Error: 902
            .saturating_add(Weight::from_parts(429_054, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_678_000 picoseconds.
        Weight::from_parts(104_714_156, 0)
            // Standard Error: 987
            .saturating_add(Weight::from_parts(424_812, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_340_000 picoseconds.
        Weight::from_parts(136_392_905, 0)
            // Standard Error: 407_025
            .saturating_add(Weight::from_parts(129_616_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_253_000 picoseconds.
        Weight::from_parts(114_541_000, 0)
            // Standard Error: 2_554
            .saturating_add(Weight::from_parts(623_965, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_136_000 picoseconds.
        Weight::from_parts(107_957_392, 0)
            // Standard Error: 1_102
            .saturating_add(Weight::from_parts(422_782, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_378_000 picoseconds.
        Weight::from_parts(100_032_293, 0)
            // Standard Error: 940
            .saturating_add(Weight::from_parts(434_378, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_920_000 picoseconds.
        Weight::from_parts(88_887_106, 0)
            // Standard Error: 294_642
            .saturating_add(Weight::from_parts(80_883_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_774_000 picoseconds.
        Weight::from_parts(87_829_824, 0)
            // Standard Error: 365_515
            .saturating_add(Weight::from_parts(79_137_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_809_000 picoseconds.
        Weight::from_parts(96_690_691, 0)
            // Standard Error: 338_102
            .saturating_add(Weight::from_parts(81_117_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_318_000 picoseconds.
        Weight::from_parts(594_676_825, 0)
            // Standard Error: 358_614
            .saturating_add(Weight::from_parts(107_923_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 582_794_000 picoseconds.
        Weight::from_parts(622_222_842, 0)
            // Standard Error: 1_726
            .saturating_add(Weight::from_parts(112_620, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_364_000 picoseconds.
        Weight::from_parts(2_359_736_227, 0)
            // Standard Error: 448_008
            .saturating_add(Weight::from_parts(124_032_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_360_889_000 picoseconds.
        Weight::from_parts(2_233_179_761, 0)
            // Standard Error: 14_113
            .saturating_add(Weight::from_parts(12_229_036, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_111_000 picoseconds.
        Weight::from_parts(128_149_165, 0)
            // Standard Error: 385_484
            .saturating_add(Weight::from_parts(101_793_698, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 152_290_000 picoseconds.
        Weight::from_parts(156_715_000, 0)
            // Standard Error: 54_203
            .saturating_add(Weight::from_parts(25_217_103, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_930_000 picoseconds.
        Weight::from_parts(91_045_401, 0)
            // Standard Error: 270_233
            .saturating_add(Weight::from_parts(77_231_653, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 145_337_000 picoseconds.
        Weight::from_parts(235_857_419, 0)
            // Standard Error: 290_508
            .saturating_add(Weight::from_parts(138_155_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_321_000 picoseconds.
        Weight::from_parts(170_915_527, 0)
            // Standard Error: 403_192
            .saturating_add(Weight::from_parts(327_111_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_624_473_000 picoseconds.
        Weight::from_parts(42_712_353_000, 0)
            // Standard Error: 271_581
            .saturating_add(Weight::from_parts(7_905_911, 0).saturating_mul(p.into()))
            // Standard Error: 271_568
            .saturating_add(Weight::from_parts(179_478_184, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_533_000 picoseconds.
        Weight::from_parts(180_837_775, 0)
            // Standard Error: 370_470
            .saturating_add(Weight::from_parts(327_284_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_988_758_000 picoseconds.
        Weight::from_parts(43_109_126_000, 0)
            // Standard Error: 260_615
            .saturating_add(Weight::from_parts(7_341_122, 0).saturating_mul(p.into()))
            // Standard Error: 260_602
            .saturating_add(Weight::from_parts(179_183_157, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_788_000 picoseconds.
        Weight::from_parts(111_209_592, 0)
            // Standard Error: 35_534
            .saturating_add(Weight::from_parts(1_843_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 90_263_000 picoseconds.
        Weight::from_parts(129_173_708, 1131)
            // Standard Error: 16_257
            .saturating_add(Weight::from_parts(14_577_437, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 91_252_000 picoseconds.
        Weight::from_parts(93_269_000, 1131)
            // Standard Error: 32_971
            .saturating_add(Weight::from_parts(37_670_278, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_445_117_000 picoseconds.
        Weight::from_parts(7_538_616_988, 5069931)
            // Standard Error: 73_053
            .saturating_add(Weight::from_parts(37_745_537, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 97_686_000 picoseconds.
        Weight::from_parts(102_205_000, 1939)
            // Standard Error: 49_897
            .saturating_add(Weight::from_parts(53_574_556, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 100_846_000 picoseconds.
        Weight::from_parts(106_163_078, 1131)
            // Standard Error: 68_220
            .saturating_add(Weight::from_parts(39_081_474, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 594_837_000 picoseconds.
        Weight::from_parts(604_732_953, 1496)
            // Standard Error: 154_748
            .saturating_add(Weight::from_parts(43_565_829, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_083_711_000 picoseconds.
        Weight::from_parts(1_094_819_313, 317931)
            // Standard Error: 130_627
            .saturating_add(Weight::from_parts(43_413_624, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(882_010, 0)
            // Standard Error: 335_227
            .saturating_add(Weight::from_parts(73_952_054, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_448_125_000 picoseconds.
        Weight::from_parts(4_265_180_801, 0)
            // Standard Error: 60_660
            .saturating_add(Weight::from_parts(4_718_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_436_808_000 picoseconds.
        Weight::from_parts(4_224_507_555, 0)
            // Standard Error: 65_797
            .saturating_add(Weight::from_parts(4_920_934, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_819_585_000 picoseconds.
        Weight::from_parts(11_082_681_870, 0)
            // Standard Error: 183_577
            .saturating_add(Weight::from_parts(12_484_050, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_239_350_000 picoseconds.
        Weight::from_parts(10_644_204_565, 0)
            // Standard Error: 134_934
            .saturating_add(Weight::from_parts(13_199_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(2_484_000, 0)
            // Standard Error: 8_771
            .saturating_add(Weight::from_parts(3_782_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_481_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 5_477
            .saturating_add(Weight::from_parts(3_089_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(3_663_736, 0)
            // Standard Error: 1_075
            .saturating_add(Weight::from_parts(1_567_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_475_000 picoseconds.
        Weight::from_parts(2_496_000, 0)
            // Standard Error: 8_733
            .saturating_add(Weight::from_parts(2_897_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(1_240_914, 0)
            // Standard Error: 11_785
            .saturating_add(Weight::from_parts(5_144_091, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_132_000 picoseconds.
        Weight::from_parts(6_428_260, 0)
            // Standard Error: 1_867
            .saturating_add(Weight::from_parts(111_881, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_472_000 picoseconds.
        Weight::from_parts(4_492_966, 0)
            // Standard Error: 6_441
            .saturating_add(Weight::from_parts(2_565_867, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_565_867 -
            2_449_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_488_000 picoseconds.
        Weight::from_parts(4_756_255, 0)
            // Standard Error: 12_434
            .saturating_add(Weight::from_parts(2_449_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_734_000 picoseconds.
        Weight::from_parts(21_623_748, 0)
            // Standard Error: 27_857
            .saturating_add(Weight::from_parts(9_915_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_491_000 picoseconds.
        Weight::from_parts(981_099, 0)
            // Standard Error: 7_310
            .saturating_add(Weight::from_parts(1_260_322, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_348_000 picoseconds.
        Weight::from_parts(5_859_717, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_106_000 picoseconds.
        Weight::from_parts(5_198_794, 0)
            // Standard Error: 3_225
            .saturating_add(Weight::from_parts(397_292, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_889_000 picoseconds.
        Weight::from_parts(3_839_830, 0)
            // Standard Error: 6_659
            .saturating_add(Weight::from_parts(989_590, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_074_000 picoseconds.
        Weight::from_parts(5_487_384, 0)
            // Standard Error: 5_090
            .saturating_add(Weight::from_parts(952_034, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_642_000 picoseconds.
        Weight::from_parts(2_175_665, 0)
            // Standard Error: 10_371
            .saturating_add(Weight::from_parts(774_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_443_000 picoseconds.
        Weight::from_parts(6_658_000, 0)
            // Standard Error: 11_870
            .saturating_add(Weight::from_parts(1_298_236, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_218_000 picoseconds.
        Weight::from_parts(1_209_969, 0)
            // Standard Error: 14_448
            .saturating_add(Weight::from_parts(6_945_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_408_000 picoseconds.
        Weight::from_parts(2_445_000, 0)
            // Standard Error: 8_037
            .saturating_add(Weight::from_parts(3_346_891, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 8_337
            .saturating_add(Weight::from_parts(3_064_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_366_000 picoseconds.
        Weight::from_parts(2_494_000, 0)
            // Standard Error: 7_507
            .saturating_add(Weight::from_parts(3_157_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_384_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 5_482
            .saturating_add(Weight::from_parts(2_665_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_502_000 picoseconds.
        Weight::from_parts(2_604_000, 0)
            // Standard Error: 4_389
            .saturating_add(Weight::from_parts(577_287, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(1_494_081, 0)
            // Standard Error: 3_789
            .saturating_add(Weight::from_parts(407_001, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_338_000 picoseconds.
        Weight::from_parts(2_426_000, 0)
            // Standard Error: 14_248
            .saturating_add(Weight::from_parts(1_876_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_392_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 7_813
            .saturating_add(Weight::from_parts(1_142_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(761_590, 0)
            // Standard Error: 4_261
            .saturating_add(Weight::from_parts(415_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(1_520_839, 0)
            // Standard Error: 3_658
            .saturating_add(Weight::from_parts(398_756, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(487_544, 0)
            // Standard Error: 5_773
            .saturating_add(Weight::from_parts(564_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_454_000 picoseconds.
        Weight::from_parts(250_928, 0)
            // Standard Error: 6_865
            .saturating_add(Weight::from_parts(554_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_419_000 picoseconds.
        Weight::from_parts(126_516, 0)
            // Standard Error: 6_700
            .saturating_add(Weight::from_parts(513_222, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(1_829_563, 0)
            // Standard Error: 3_363
            .saturating_add(Weight::from_parts(348_085, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_487_000 picoseconds.
        Weight::from_parts(2_800_817, 0)
            // Standard Error: 2_060
            .saturating_add(Weight::from_parts(160_788, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_966_789, 0)
            // Standard Error: 1_668
            .saturating_add(Weight::from_parts(176_157, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(2_559_000, 0)
            // Standard Error: 12_325
            .saturating_add(Weight::from_parts(1_844_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_463_000 picoseconds.
        Weight::from_parts(2_552_000, 0)
            // Standard Error: 9_705
            .saturating_add(Weight::from_parts(1_180_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_522_000, 0)
            // Standard Error: 13_287
            .saturating_add(Weight::from_parts(1_849_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_361_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 9_529
            .saturating_add(Weight::from_parts(1_154_619, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(2_463_000, 0)
            // Standard Error: 13_961
            .saturating_add(Weight::from_parts(1_865_168, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_448_000 picoseconds.
        Weight::from_parts(2_516_000, 0)
            // Standard Error: 8_743
            .saturating_add(Weight::from_parts(1_152_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_449_000, 0)
            // Standard Error: 14_071
            .saturating_add(Weight::from_parts(1_779_173, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_430_000 picoseconds.
        Weight::from_parts(2_474_000, 0)
            // Standard Error: 9_717
            .saturating_add(Weight::from_parts(1_164_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_502_000, 0)
            // Standard Error: 11_657
            .saturating_add(Weight::from_parts(1_846_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(2_511_000, 0)
            // Standard Error: 8_545
            .saturating_add(Weight::from_parts(1_139_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 12_874
            .saturating_add(Weight::from_parts(1_850_103, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_427_000, 0)
            // Standard Error: 10_789
            .saturating_add(Weight::from_parts(1_147_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_375_000 picoseconds.
        Weight::from_parts(2_441_000, 0)
            // Standard Error: 13_717
            .saturating_add(Weight::from_parts(1_848_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_335_000 picoseconds.
        Weight::from_parts(2_381_000, 0)
            // Standard Error: 7_769
            .saturating_add(Weight::from_parts(1_159_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_491_000, 0)
            // Standard Error: 11_301
            .saturating_add(Weight::from_parts(1_861_518, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_447_000, 0)
            // Standard Error: 9_437
            .saturating_add(Weight::from_parts(1_164_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(2_471_000, 0)
            // Standard Error: 11_878
            .saturating_add(Weight::from_parts(1_844_047, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_000 picoseconds.
        Weight::from_parts(2_414_000, 0)
            // Standard Error: 9_917
            .saturating_add(Weight::from_parts(1_150_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_439_000, 0)
            // Standard Error: 13_403
            .saturating_add(Weight::from_parts(1_849_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_399_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 8_458
            .saturating_add(Weight::from_parts(1_115_821, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_452_000 picoseconds.
        Weight::from_parts(2_594_000, 0)
            // Standard Error: 9_857
            .saturating_add(Weight::from_parts(1_283_251, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_477_000 picoseconds.
        Weight::from_parts(2_558_000, 0)
            // Standard Error: 4_514
            .saturating_add(Weight::from_parts(610_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(2_503_000, 0)
            // Standard Error: 11_151
            .saturating_add(Weight::from_parts(1_336_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_421_000 picoseconds.
        Weight::from_parts(2_544_000, 0)
            // Standard Error: 4_920
            .saturating_add(Weight::from_parts(627_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_357_000 picoseconds.
        Weight::from_parts(2_427_000, 0)
            // Standard Error: 12_177
            .saturating_add(Weight::from_parts(1_846_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_336_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 6_995
            .saturating_add(Weight::from_parts(1_222_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_364_000 picoseconds.
        Weight::from_parts(2_419_000, 0)
            // Standard Error: 8_491
            .saturating_add(Weight::from_parts(2_725_264, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_355_000 picoseconds.
        Weight::from_parts(2_480_000, 0)
            // Standard Error: 8_055
            .saturating_add(Weight::from_parts(2_371_278, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_426_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 10_885
            .saturating_add(Weight::from_parts(2_879_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_469_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 10_047
            .saturating_add(Weight::from_parts(2_424_155, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_424_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 14_697
            .saturating_add(Weight::from_parts(9_274_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_406_000 picoseconds.
        Weight::from_parts(2_488_000, 0)
            // Standard Error: 24_081
            .saturating_add(Weight::from_parts(7_383_474, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_392_000 picoseconds.
        Weight::from_parts(2_463_000, 0)
            // Standard Error: 9_410
            .saturating_add(Weight::from_parts(2_946_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_476_000, 0)
            // Standard Error: 9_338
            .saturating_add(Weight::from_parts(2_400_001, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_351_000 picoseconds.
        Weight::from_parts(2_462_000, 0)
            // Standard Error: 9_400
            .saturating_add(Weight::from_parts(1_257_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_427_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 5_347
            .saturating_add(Weight::from_parts(610_881, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_360_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 10_753
            .saturating_add(Weight::from_parts(1_238_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_504_000, 0)
            // Standard Error: 6_036
            .saturating_add(Weight::from_parts(605_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_428_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 9_218
            .saturating_add(Weight::from_parts(1_245_262, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_525_000, 0)
            // Standard Error: 5_552
            .saturating_add(Weight::from_parts(621_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_479_000, 0)
            // Standard Error: 7_123
            .saturating_add(Weight::from_parts(1_073_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_355_000 picoseconds.
        Weight::from_parts(2_436_000, 0)
            // Standard Error: 4_172
            .saturating_add(Weight::from_parts(557_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_450_000, 0)
            // Standard Error: 7_266
            .saturating_add(Weight::from_parts(1_083_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_383_000 picoseconds.
        Weight::from_parts(2_539_000, 0)
            // Standard Error: 4_510
            .saturating_add(Weight::from_parts(556_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_412_000 picoseconds.
        Weight::from_parts(2_444_000, 0)
            // Standard Error: 8_699
            .saturating_add(Weight::from_parts(1_050_097, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_308_000 picoseconds.
        Weight::from_parts(260_677, 0)
            // Standard Error: 5_628
            .saturating_add(Weight::from_parts(631_103, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(2_449_000, 0)
            // Standard Error: 8_874
            .saturating_add(Weight::from_parts(1_109_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 4_854
            .saturating_add(Weight::from_parts(554_770, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_506_000, 0)
            // Standard Error: 8_740
            .saturating_add(Weight::from_parts(1_070_052, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_478_000, 0)
            // Standard Error: 4_081
            .saturating_add(Weight::from_parts(557_926, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 5_833_000 picoseconds.
        Weight::from_parts(6_168_000, 4169)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1107`
        //  Estimated: `24053`
        // Minimum execution time: 63_037_000 picoseconds.
        Weight::from_parts(64_556_000, 24053)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 47_339_000 picoseconds.
        Weight::from_parts(48_973_000, 22158)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 75_721_000 picoseconds.
        Weight::from_parts(78_639_000, 34619)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 32_664_000 picoseconds.
        Weight::from_parts(33_742_000, 20509)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 49_632_000 picoseconds.
        Weight::from_parts(52_478_000, 26636)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_316_000 picoseconds.
        Weight::from_parts(3_596_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1626`
        //  Estimated: `58232`
        // Minimum execution time: 110_114_000 picoseconds.
        Weight::from_parts(113_313_000, 58232)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 90_338_000 picoseconds.
        Weight::from_parts(93_736_000, 46962)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2303 + c * (16400 ±0)`
        //  Estimated: `19878 + c * (84480 ±0)`
        // Minimum execution time: 29_878_000 picoseconds.
        Weight::from_parts(30_398_000, 19878)
            // Standard Error: 69_406
            .saturating_add(Weight::from_parts(38_565_614, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3129 + c * (42 ±0)`
        //  Estimated: `60575 + c * (2947 ±0)`
        // Minimum execution time: 89_869_000 picoseconds.
        Weight::from_parts(80_984_880, 60575)
            // Standard Error: 2_062
            .saturating_add(Weight::from_parts(1_040_512, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_481_000 picoseconds.
        Weight::from_parts(99_630_512, 0)
            // Standard Error: 75_924
            .saturating_add(Weight::from_parts(23_053_014, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_084_000 picoseconds.
        Weight::from_parts(100_989_768, 0)
            // Standard Error: 77_579
            .saturating_add(Weight::from_parts(19_975_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_220_000 picoseconds.
        Weight::from_parts(101_639_276, 0)
            // Standard Error: 78_950
            .saturating_add(Weight::from_parts(19_516_538, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_519_000 picoseconds.
        Weight::from_parts(104_542_944, 0)
            // Standard Error: 85_434
            .saturating_add(Weight::from_parts(16_283_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_839_000 picoseconds.
        Weight::from_parts(578_640_448, 0)
            // Standard Error: 265_785
            .saturating_add(Weight::from_parts(23_277_228, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 566_517_000 picoseconds.
        Weight::from_parts(578_394_370, 0)
            // Standard Error: 310_713
            .saturating_add(Weight::from_parts(23_740_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_298_000 picoseconds.
        Weight::from_parts(110_601_892, 0)
            // Standard Error: 74_798
            .saturating_add(Weight::from_parts(13_256_496, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_170_000 picoseconds.
        Weight::from_parts(110_509_198, 0)
            // Standard Error: 75_072
            .saturating_add(Weight::from_parts(8_446_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_097_000 picoseconds.
        Weight::from_parts(104_586_244, 0)
            // Standard Error: 2_206_364
            .saturating_add(Weight::from_parts(539_716_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_581_000 picoseconds.
        Weight::from_parts(99_821_258, 0)
            // Standard Error: 2_040_137
            .saturating_add(Weight::from_parts(531_583_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_087_000 picoseconds.
        Weight::from_parts(98_818_474, 0)
            // Standard Error: 2_031_704
            .saturating_add(Weight::from_parts(511_188_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_983_000 picoseconds.
        Weight::from_parts(103_407_974, 0)
            // Standard Error: 2_262_032
            .saturating_add(Weight::from_parts(537_941_706, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_211_000 picoseconds.
        Weight::from_parts(99_567_606, 0)
            // Standard Error: 2_243_437
            .saturating_add(Weight::from_parts(546_603_328, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 913_000 picoseconds.
        Weight::from_parts(988_000, 0)
            // Standard Error: 808
            .saturating_add(Weight::from_parts(208_070, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_317_000 picoseconds.
        Weight::from_parts(3_371_000, 3610)
            // Standard Error: 1_078
            .saturating_add(Weight::from_parts(683_725, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_579_000 picoseconds.
        Weight::from_parts(84_317_104, 0)
            // Standard Error: 8_351
            .saturating_add(Weight::from_parts(2_389_227, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1372`
        //  Estimated: `51905`
        // Minimum execution time: 107_507_000 picoseconds.
        Weight::from_parts(111_275_000, 51905)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `992`
        //  Estimated: `21579`
        // Minimum execution time: 56_209_000 picoseconds.
        Weight::from_parts(57_312_000, 21579)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638`
        //  Estimated: `17486`
        // Minimum execution time: 29_853_000 picoseconds.
        Weight::from_parts(30_508_000, 17486)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_125_000 picoseconds.
        Weight::from_parts(7_328_750, 7640)
            // Standard Error: 31_392
            .saturating_add(Weight::from_parts(13_296_411, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1593 + c * (16389 ±0)`
        //  Estimated: `43266 + c * (131112 ±0)`
        // Minimum execution time: 71_309_000 picoseconds.
        Weight::from_parts(72_000_000, 43266)
            // Standard Error: 164_824
            .saturating_add(Weight::from_parts(53_991_920, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `5402`
        // Minimum execution time: 77_057_000 picoseconds.
        Weight::from_parts(41_092_099, 5402)
            // Standard Error: 46_331
            .saturating_add(Weight::from_parts(59_385_089, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1111`
        //  Estimated: `50600`
        // Minimum execution time: 93_750_000 picoseconds.
        Weight::from_parts(135_988_081, 50600)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_601, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521`
        //  Estimated: `45152`
        // Minimum execution time: 11_058_028_000 picoseconds.
        Weight::from_parts(61_156_523, 45152)
            // Standard Error: 151_318
            .saturating_add(Weight::from_parts(60_095_790, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_590, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `531`
        //  Estimated: `31266`
        // Minimum execution time: 74_169_000 picoseconds.
        Weight::from_parts(55_329_402, 31266)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_029, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1371`
        //  Estimated: `54435`
        // Minimum execution time: 123_953_000 picoseconds.
        Weight::from_parts(102_637_678, 54435)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_058, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 364_818_000 picoseconds.
        Weight::from_parts(378_805_720, 121468)
            // Standard Error: 1_617
            .saturating_add(Weight::from_parts(22_341, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(35_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1897`
        //  Estimated: `121468`
        // Minimum execution time: 384_136_000 picoseconds.
        Weight::from_parts(401_096_451, 121468)
            // Standard Error: 1_778
            .saturating_add(Weight::from_parts(7_580, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(35_u64))
            .saturating_add(RocksDbWeight::get().writes(26_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 57_952_000 picoseconds.
        Weight::from_parts(58_459_000, 3899)
            // Standard Error: 31_966
            .saturating_add(Weight::from_parts(57_251_256, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_344_000 picoseconds.
        Weight::from_parts(95_470_000, 0)
            // Standard Error: 3_698_034
            .saturating_add(Weight::from_parts(695_592_141, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 477_022_000 picoseconds.
        Weight::from_parts(416_066_225, 0)
            // Standard Error: 6_775
            .saturating_add(Weight::from_parts(29_002_726, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 205_619_000 picoseconds.
        Weight::from_parts(207_970_847, 0)
            // Standard Error: 276_100
            .saturating_add(Weight::from_parts(64_532_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_943_000 picoseconds.
        Weight::from_parts(108_787_625, 0)
            // Standard Error: 4_056
            .saturating_add(Weight::from_parts(2_331_687, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 180_061_000 picoseconds.
        Weight::from_parts(240_089_561, 0)
            // Standard Error: 19_695
            .saturating_add(Weight::from_parts(1_725_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_167_000 picoseconds.
        Weight::from_parts(114_668_235, 0)
            // Standard Error: 327_816
            .saturating_add(Weight::from_parts(95_835_449, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_801_000 picoseconds.
        Weight::from_parts(94_087_662, 0)
            // Standard Error: 295_899
            .saturating_add(Weight::from_parts(80_358_803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_883_000 picoseconds.
        Weight::from_parts(91_458_205, 0)
            // Standard Error: 277_911
            .saturating_add(Weight::from_parts(79_609_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_001_000 picoseconds.
        Weight::from_parts(102_977_333, 0)
            // Standard Error: 241_685
            .saturating_add(Weight::from_parts(78_147_656, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_109_000 picoseconds.
        Weight::from_parts(92_161_673, 0)
            // Standard Error: 307_089
            .saturating_add(Weight::from_parts(79_032_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_315_000 picoseconds.
        Weight::from_parts(90_290_936, 0)
            // Standard Error: 311_079
            .saturating_add(Weight::from_parts(79_012_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_434_000 picoseconds.
        Weight::from_parts(92_258_883, 0)
            // Standard Error: 340_259
            .saturating_add(Weight::from_parts(79_497_977, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_509_000 picoseconds.
        Weight::from_parts(93_232_951, 0)
            // Standard Error: 311_415
            .saturating_add(Weight::from_parts(78_578_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 560_638_000 picoseconds.
        Weight::from_parts(622_793_170, 0)
            // Standard Error: 442_308
            .saturating_add(Weight::from_parts(115_520_309, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 699_618_000 picoseconds.
        Weight::from_parts(708_164_000, 0)
            // Standard Error: 60_311
            .saturating_add(Weight::from_parts(13_065_351, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_193_000 picoseconds.
        Weight::from_parts(88_273_331, 0)
            // Standard Error: 341_296
            .saturating_add(Weight::from_parts(79_488_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_761_000 picoseconds.
        Weight::from_parts(92_808_053, 0)
            // Standard Error: 291_078
            .saturating_add(Weight::from_parts(79_328_368, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_311_000 picoseconds.
        Weight::from_parts(115_529_332, 0)
            // Standard Error: 372_545
            .saturating_add(Weight::from_parts(158_756_414, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_299_000 picoseconds.
        Weight::from_parts(101_073_000, 0)
            // Standard Error: 4_427_069
            .saturating_add(Weight::from_parts(804_033_285, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_702_000 picoseconds.
        Weight::from_parts(157_572_374, 0)
            // Standard Error: 440_582
            .saturating_add(Weight::from_parts(237_330_822, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_067_000 picoseconds.
        Weight::from_parts(335_243_000, 0)
            // Standard Error: 66_195
            .saturating_add(Weight::from_parts(21_168_225, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_664_000 picoseconds.
        Weight::from_parts(160_031_051, 0)
            // Standard Error: 420_743
            .saturating_add(Weight::from_parts(242_377_960, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 336_245_000 picoseconds.
        Weight::from_parts(344_823_000, 0)
            // Standard Error: 66_941
            .saturating_add(Weight::from_parts(21_197_510, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_911_000 picoseconds.
        Weight::from_parts(640_996_354, 0)
            // Standard Error: 438_459
            .saturating_add(Weight::from_parts(256_681_728, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 563_652_000 picoseconds.
        Weight::from_parts(622_166_971, 0)
            // Standard Error: 370_073
            .saturating_add(Weight::from_parts(262_920_632, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_502_000 picoseconds.
        Weight::from_parts(86_484_703, 0)
            // Standard Error: 295_629
            .saturating_add(Weight::from_parts(87_263_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_751_173_000 picoseconds.
        Weight::from_parts(1_872_427_496, 0)
            // Standard Error: 324_033
            .saturating_add(Weight::from_parts(145_731_403, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 302_030_000 picoseconds.
        Weight::from_parts(304_788_000, 0)
            // Standard Error: 59_829
            .saturating_add(Weight::from_parts(29_174_594, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_748_875_000 picoseconds.
        Weight::from_parts(1_850_022_763, 0)
            // Standard Error: 361_778
            .saturating_add(Weight::from_parts(203_156_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_760_367_000 picoseconds.
        Weight::from_parts(1_881_542_241, 0)
            // Standard Error: 363_139
            .saturating_add(Weight::from_parts(201_598_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 258_633_000 picoseconds.
        Weight::from_parts(326_523_468, 0)
            // Standard Error: 376_037
            .saturating_add(Weight::from_parts(253_538_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 505_403_000 picoseconds.
        Weight::from_parts(514_440_000, 0)
            // Standard Error: 53_186
            .saturating_add(Weight::from_parts(20_774_954, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_896_275_000 picoseconds.
        Weight::from_parts(1_982_312_341, 0)
            // Standard Error: 487_511
            .saturating_add(Weight::from_parts(220_195_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_679_000 picoseconds.
        Weight::from_parts(101_734_013, 0)
            // Standard Error: 902
            .saturating_add(Weight::from_parts(429_054, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_678_000 picoseconds.
        Weight::from_parts(104_714_156, 0)
            // Standard Error: 987
            .saturating_add(Weight::from_parts(424_812, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_340_000 picoseconds.
        Weight::from_parts(136_392_905, 0)
            // Standard Error: 407_025
            .saturating_add(Weight::from_parts(129_616_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_253_000 picoseconds.
        Weight::from_parts(114_541_000, 0)
            // Standard Error: 2_554
            .saturating_add(Weight::from_parts(623_965, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_136_000 picoseconds.
        Weight::from_parts(107_957_392, 0)
            // Standard Error: 1_102
            .saturating_add(Weight::from_parts(422_782, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_378_000 picoseconds.
        Weight::from_parts(100_032_293, 0)
            // Standard Error: 940
            .saturating_add(Weight::from_parts(434_378, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_920_000 picoseconds.
        Weight::from_parts(88_887_106, 0)
            // Standard Error: 294_642
            .saturating_add(Weight::from_parts(80_883_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_774_000 picoseconds.
        Weight::from_parts(87_829_824, 0)
            // Standard Error: 365_515
            .saturating_add(Weight::from_parts(79_137_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_809_000 picoseconds.
        Weight::from_parts(96_690_691, 0)
            // Standard Error: 338_102
            .saturating_add(Weight::from_parts(81_117_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 568_318_000 picoseconds.
        Weight::from_parts(594_676_825, 0)
            // Standard Error: 358_614
            .saturating_add(Weight::from_parts(107_923_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 582_794_000 picoseconds.
        Weight::from_parts(622_222_842, 0)
            // Standard Error: 1_726
            .saturating_add(Weight::from_parts(112_620, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_364_000 picoseconds.
        Weight::from_parts(2_359_736_227, 0)
            // Standard Error: 448_008
            .saturating_add(Weight::from_parts(124_032_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_360_889_000 picoseconds.
        Weight::from_parts(2_233_179_761, 0)
            // Standard Error: 14_113
            .saturating_add(Weight::from_parts(12_229_036, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_111_000 picoseconds.
        Weight::from_parts(128_149_165, 0)
            // Standard Error: 385_484
            .saturating_add(Weight::from_parts(101_793_698, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 152_290_000 picoseconds.
        Weight::from_parts(156_715_000, 0)
            // Standard Error: 54_203
            .saturating_add(Weight::from_parts(25_217_103, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_930_000 picoseconds.
        Weight::from_parts(91_045_401, 0)
            // Standard Error: 270_233
            .saturating_add(Weight::from_parts(77_231_653, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 145_337_000 picoseconds.
        Weight::from_parts(235_857_419, 0)
            // Standard Error: 290_508
            .saturating_add(Weight::from_parts(138_155_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_321_000 picoseconds.
        Weight::from_parts(170_915_527, 0)
            // Standard Error: 403_192
            .saturating_add(Weight::from_parts(327_111_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_624_473_000 picoseconds.
        Weight::from_parts(42_712_353_000, 0)
            // Standard Error: 271_581
            .saturating_add(Weight::from_parts(7_905_911, 0).saturating_mul(p.into()))
            // Standard Error: 271_568
            .saturating_add(Weight::from_parts(179_478_184, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_533_000 picoseconds.
        Weight::from_parts(180_837_775, 0)
            // Standard Error: 370_470
            .saturating_add(Weight::from_parts(327_284_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 42_988_758_000 picoseconds.
        Weight::from_parts(43_109_126_000, 0)
            // Standard Error: 260_615
            .saturating_add(Weight::from_parts(7_341_122, 0).saturating_mul(p.into()))
            // Standard Error: 260_602
            .saturating_add(Weight::from_parts(179_183_157, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_788_000 picoseconds.
        Weight::from_parts(111_209_592, 0)
            // Standard Error: 35_534
            .saturating_add(Weight::from_parts(1_843_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 90_263_000 picoseconds.
        Weight::from_parts(129_173_708, 1131)
            // Standard Error: 16_257
            .saturating_add(Weight::from_parts(14_577_437, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 91_252_000 picoseconds.
        Weight::from_parts(93_269_000, 1131)
            // Standard Error: 32_971
            .saturating_add(Weight::from_parts(37_670_278, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_445_117_000 picoseconds.
        Weight::from_parts(7_538_616_988, 5069931)
            // Standard Error: 73_053
            .saturating_add(Weight::from_parts(37_745_537, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 97_686_000 picoseconds.
        Weight::from_parts(102_205_000, 1939)
            // Standard Error: 49_897
            .saturating_add(Weight::from_parts(53_574_556, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 100_846_000 picoseconds.
        Weight::from_parts(106_163_078, 1131)
            // Standard Error: 68_220
            .saturating_add(Weight::from_parts(39_081_474, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 594_837_000 picoseconds.
        Weight::from_parts(604_732_953, 1496)
            // Standard Error: 154_748
            .saturating_add(Weight::from_parts(43_565_829, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_083_711_000 picoseconds.
        Weight::from_parts(1_094_819_313, 317931)
            // Standard Error: 130_627
            .saturating_add(Weight::from_parts(43_413_624, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(882_010, 0)
            // Standard Error: 335_227
            .saturating_add(Weight::from_parts(73_952_054, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_448_125_000 picoseconds.
        Weight::from_parts(4_265_180_801, 0)
            // Standard Error: 60_660
            .saturating_add(Weight::from_parts(4_718_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_436_808_000 picoseconds.
        Weight::from_parts(4_224_507_555, 0)
            // Standard Error: 65_797
            .saturating_add(Weight::from_parts(4_920_934, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_819_585_000 picoseconds.
        Weight::from_parts(11_082_681_870, 0)
            // Standard Error: 183_577
            .saturating_add(Weight::from_parts(12_484_050, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_239_350_000 picoseconds.
        Weight::from_parts(10_644_204_565, 0)
            // Standard Error: 134_934
            .saturating_add(Weight::from_parts(13_199_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(2_484_000, 0)
            // Standard Error: 8_771
            .saturating_add(Weight::from_parts(3_782_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_481_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 5_477
            .saturating_add(Weight::from_parts(3_089_487, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(3_663_736, 0)
            // Standard Error: 1_075
            .saturating_add(Weight::from_parts(1_567_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_475_000 picoseconds.
        Weight::from_parts(2_496_000, 0)
            // Standard Error: 8_733
            .saturating_add(Weight::from_parts(2_897_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(1_240_914, 0)
            // Standard Error: 11_785
            .saturating_add(Weight::from_parts(5_144_091, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_132_000 picoseconds.
        Weight::from_parts(6_428_260, 0)
            // Standard Error: 1_867
            .saturating_add(Weight::from_parts(111_881, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_472_000 picoseconds.
        Weight::from_parts(4_492_966, 0)
            // Standard Error: 6_441
            .saturating_add(Weight::from_parts(2_565_867, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_565_867 -
            2_449_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_488_000 picoseconds.
        Weight::from_parts(4_756_255, 0)
            // Standard Error: 12_434
            .saturating_add(Weight::from_parts(2_449_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_734_000 picoseconds.
        Weight::from_parts(21_623_748, 0)
            // Standard Error: 27_857
            .saturating_add(Weight::from_parts(9_915_089, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_491_000 picoseconds.
        Weight::from_parts(981_099, 0)
            // Standard Error: 7_310
            .saturating_add(Weight::from_parts(1_260_322, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_348_000 picoseconds.
        Weight::from_parts(5_859_717, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_106_000 picoseconds.
        Weight::from_parts(5_198_794, 0)
            // Standard Error: 3_225
            .saturating_add(Weight::from_parts(397_292, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_889_000 picoseconds.
        Weight::from_parts(3_839_830, 0)
            // Standard Error: 6_659
            .saturating_add(Weight::from_parts(989_590, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_074_000 picoseconds.
        Weight::from_parts(5_487_384, 0)
            // Standard Error: 5_090
            .saturating_add(Weight::from_parts(952_034, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_642_000 picoseconds.
        Weight::from_parts(2_175_665, 0)
            // Standard Error: 10_371
            .saturating_add(Weight::from_parts(774_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_443_000 picoseconds.
        Weight::from_parts(6_658_000, 0)
            // Standard Error: 11_870
            .saturating_add(Weight::from_parts(1_298_236, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_218_000 picoseconds.
        Weight::from_parts(1_209_969, 0)
            // Standard Error: 14_448
            .saturating_add(Weight::from_parts(6_945_931, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_408_000 picoseconds.
        Weight::from_parts(2_445_000, 0)
            // Standard Error: 8_037
            .saturating_add(Weight::from_parts(3_346_891, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 8_337
            .saturating_add(Weight::from_parts(3_064_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_366_000 picoseconds.
        Weight::from_parts(2_494_000, 0)
            // Standard Error: 7_507
            .saturating_add(Weight::from_parts(3_157_354, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_384_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 5_482
            .saturating_add(Weight::from_parts(2_665_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_502_000 picoseconds.
        Weight::from_parts(2_604_000, 0)
            // Standard Error: 4_389
            .saturating_add(Weight::from_parts(577_287, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(1_494_081, 0)
            // Standard Error: 3_789
            .saturating_add(Weight::from_parts(407_001, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_338_000 picoseconds.
        Weight::from_parts(2_426_000, 0)
            // Standard Error: 14_248
            .saturating_add(Weight::from_parts(1_876_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_392_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 7_813
            .saturating_add(Weight::from_parts(1_142_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(761_590, 0)
            // Standard Error: 4_261
            .saturating_add(Weight::from_parts(415_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(1_520_839, 0)
            // Standard Error: 3_658
            .saturating_add(Weight::from_parts(398_756, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(487_544, 0)
            // Standard Error: 5_773
            .saturating_add(Weight::from_parts(564_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_454_000 picoseconds.
        Weight::from_parts(250_928, 0)
            // Standard Error: 6_865
            .saturating_add(Weight::from_parts(554_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_419_000 picoseconds.
        Weight::from_parts(126_516, 0)
            // Standard Error: 6_700
            .saturating_add(Weight::from_parts(513_222, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_369_000 picoseconds.
        Weight::from_parts(1_829_563, 0)
            // Standard Error: 3_363
            .saturating_add(Weight::from_parts(348_085, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_487_000 picoseconds.
        Weight::from_parts(2_800_817, 0)
            // Standard Error: 2_060
            .saturating_add(Weight::from_parts(160_788, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_386_000 picoseconds.
        Weight::from_parts(2_966_789, 0)
            // Standard Error: 1_668
            .saturating_add(Weight::from_parts(176_157, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(2_559_000, 0)
            // Standard Error: 12_325
            .saturating_add(Weight::from_parts(1_844_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_463_000 picoseconds.
        Weight::from_parts(2_552_000, 0)
            // Standard Error: 9_705
            .saturating_add(Weight::from_parts(1_180_795, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_387_000 picoseconds.
        Weight::from_parts(2_522_000, 0)
            // Standard Error: 13_287
            .saturating_add(Weight::from_parts(1_849_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_361_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 9_529
            .saturating_add(Weight::from_parts(1_154_619, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(2_463_000, 0)
            // Standard Error: 13_961
            .saturating_add(Weight::from_parts(1_865_168, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_448_000 picoseconds.
        Weight::from_parts(2_516_000, 0)
            // Standard Error: 8_743
            .saturating_add(Weight::from_parts(1_152_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_380_000 picoseconds.
        Weight::from_parts(2_449_000, 0)
            // Standard Error: 14_071
            .saturating_add(Weight::from_parts(1_779_173, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_430_000 picoseconds.
        Weight::from_parts(2_474_000, 0)
            // Standard Error: 9_717
            .saturating_add(Weight::from_parts(1_164_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_502_000, 0)
            // Standard Error: 11_657
            .saturating_add(Weight::from_parts(1_846_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_433_000 picoseconds.
        Weight::from_parts(2_511_000, 0)
            // Standard Error: 8_545
            .saturating_add(Weight::from_parts(1_139_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_492_000, 0)
            // Standard Error: 12_874
            .saturating_add(Weight::from_parts(1_850_103, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_283_000 picoseconds.
        Weight::from_parts(2_427_000, 0)
            // Standard Error: 10_789
            .saturating_add(Weight::from_parts(1_147_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_375_000 picoseconds.
        Weight::from_parts(2_441_000, 0)
            // Standard Error: 13_717
            .saturating_add(Weight::from_parts(1_848_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_335_000 picoseconds.
        Weight::from_parts(2_381_000, 0)
            // Standard Error: 7_769
            .saturating_add(Weight::from_parts(1_159_783, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_491_000, 0)
            // Standard Error: 11_301
            .saturating_add(Weight::from_parts(1_861_518, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_374_000 picoseconds.
        Weight::from_parts(2_447_000, 0)
            // Standard Error: 9_437
            .saturating_add(Weight::from_parts(1_164_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_409_000 picoseconds.
        Weight::from_parts(2_471_000, 0)
            // Standard Error: 11_878
            .saturating_add(Weight::from_parts(1_844_047, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_000 picoseconds.
        Weight::from_parts(2_414_000, 0)
            // Standard Error: 9_917
            .saturating_add(Weight::from_parts(1_150_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_439_000, 0)
            // Standard Error: 13_403
            .saturating_add(Weight::from_parts(1_849_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_399_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 8_458
            .saturating_add(Weight::from_parts(1_115_821, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_452_000 picoseconds.
        Weight::from_parts(2_594_000, 0)
            // Standard Error: 9_857
            .saturating_add(Weight::from_parts(1_283_251, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_477_000 picoseconds.
        Weight::from_parts(2_558_000, 0)
            // Standard Error: 4_514
            .saturating_add(Weight::from_parts(610_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(2_503_000, 0)
            // Standard Error: 11_151
            .saturating_add(Weight::from_parts(1_336_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_421_000 picoseconds.
        Weight::from_parts(2_544_000, 0)
            // Standard Error: 4_920
            .saturating_add(Weight::from_parts(627_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_357_000 picoseconds.
        Weight::from_parts(2_427_000, 0)
            // Standard Error: 12_177
            .saturating_add(Weight::from_parts(1_846_297, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_336_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 6_995
            .saturating_add(Weight::from_parts(1_222_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_364_000 picoseconds.
        Weight::from_parts(2_419_000, 0)
            // Standard Error: 8_491
            .saturating_add(Weight::from_parts(2_725_264, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_355_000 picoseconds.
        Weight::from_parts(2_480_000, 0)
            // Standard Error: 8_055
            .saturating_add(Weight::from_parts(2_371_278, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_426_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 10_885
            .saturating_add(Weight::from_parts(2_879_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_469_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 10_047
            .saturating_add(Weight::from_parts(2_424_155, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_424_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 14_697
            .saturating_add(Weight::from_parts(9_274_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_406_000 picoseconds.
        Weight::from_parts(2_488_000, 0)
            // Standard Error: 24_081
            .saturating_add(Weight::from_parts(7_383_474, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_392_000 picoseconds.
        Weight::from_parts(2_463_000, 0)
            // Standard Error: 9_410
            .saturating_add(Weight::from_parts(2_946_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_476_000, 0)
            // Standard Error: 9_338
            .saturating_add(Weight::from_parts(2_400_001, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_351_000 picoseconds.
        Weight::from_parts(2_462_000, 0)
            // Standard Error: 9_400
            .saturating_add(Weight::from_parts(1_257_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_427_000 picoseconds.
        Weight::from_parts(2_493_000, 0)
            // Standard Error: 5_347
            .saturating_add(Weight::from_parts(610_881, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_360_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 10_753
            .saturating_add(Weight::from_parts(1_238_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_504_000, 0)
            // Standard Error: 6_036
            .saturating_add(Weight::from_parts(605_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_428_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 9_218
            .saturating_add(Weight::from_parts(1_245_262, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_525_000, 0)
            // Standard Error: 5_552
            .saturating_add(Weight::from_parts(621_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_479_000, 0)
            // Standard Error: 7_123
            .saturating_add(Weight::from_parts(1_073_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_355_000 picoseconds.
        Weight::from_parts(2_436_000, 0)
            // Standard Error: 4_172
            .saturating_add(Weight::from_parts(557_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_450_000, 0)
            // Standard Error: 7_266
            .saturating_add(Weight::from_parts(1_083_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_383_000 picoseconds.
        Weight::from_parts(2_539_000, 0)
            // Standard Error: 4_510
            .saturating_add(Weight::from_parts(556_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_412_000 picoseconds.
        Weight::from_parts(2_444_000, 0)
            // Standard Error: 8_699
            .saturating_add(Weight::from_parts(1_050_097, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_308_000 picoseconds.
        Weight::from_parts(260_677, 0)
            // Standard Error: 5_628
            .saturating_add(Weight::from_parts(631_103, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_363_000 picoseconds.
        Weight::from_parts(2_449_000, 0)
            // Standard Error: 8_874
            .saturating_add(Weight::from_parts(1_109_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_431_000 picoseconds.
        Weight::from_parts(2_497_000, 0)
            // Standard Error: 4_854
            .saturating_add(Weight::from_parts(554_770, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_506_000, 0)
            // Standard Error: 8_740
            .saturating_add(Weight::from_parts(1_070_052, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_478_000, 0)
            // Standard Error: 4_081
            .saturating_add(Weight::from_parts(557_926, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 5_833_000 picoseconds.
        Weight::from_parts(6_168_000, 4169)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1107`
        //  Estimated: `24053`
        // Minimum execution time: 63_037_000 picoseconds.
        Weight::from_parts(64_556_000, 24053)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `888`
        //  Estimated: `22158`
        // Minimum execution time: 47_339_000 picoseconds.
        Weight::from_parts(48_973_000, 22158)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1010`
        //  Estimated: `34619`
        // Minimum execution time: 75_721_000 picoseconds.
        Weight::from_parts(78_639_000, 34619)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695`
        //  Estimated: `20509`
        // Minimum execution time: 32_664_000 picoseconds.
        Weight::from_parts(33_742_000, 20509)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `976`
        //  Estimated: `26636`
        // Minimum execution time: 49_632_000 picoseconds.
        Weight::from_parts(52_478_000, 26636)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_316_000 picoseconds.
        Weight::from_parts(3_596_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1626`
        //  Estimated: `58232`
        // Minimum execution time: 110_114_000 picoseconds.
        Weight::from_parts(113_313_000, 58232)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1332`
        //  Estimated: `46962`
        // Minimum execution time: 90_338_000 picoseconds.
        Weight::from_parts(93_736_000, 46962)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2303 + c * (16400 ±0)`
        //  Estimated: `19878 + c * (84480 ±0)`
        // Minimum execution time: 29_878_000 picoseconds.
        Weight::from_parts(30_398_000, 19878)
            // Standard Error: 69_406
            .saturating_add(Weight::from_parts(38_565_614, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3129 + c * (42 ±0)`
        //  Estimated: `60575 + c * (2947 ±0)`
        // Minimum execution time: 89_869_000 picoseconds.
        Weight::from_parts(80_984_880, 60575)
            // Standard Error: 2_062
            .saturating_add(Weight::from_parts(1_040_512, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}
