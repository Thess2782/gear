// This file is part of Gear.

// Copyright (C) 2022-2024 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,reinstrument_per_kb,send_message,send_reply,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(r: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_206_000 picoseconds.
        Weight::from_parts(65_389_824, 0)
            // Standard Error: 43_131
            .saturating_add(Weight::from_parts(23_092_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_866_000 picoseconds.
        Weight::from_parts(67_131_146, 0)
            // Standard Error: 43_698
            .saturating_add(Weight::from_parts(20_831_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_009_000 picoseconds.
        Weight::from_parts(67_453_716, 0)
            // Standard Error: 40_538
            .saturating_add(Weight::from_parts(18_806_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_660_000 picoseconds.
        Weight::from_parts(66_649_716, 0)
            // Standard Error: 41_903
            .saturating_add(Weight::from_parts(21_503_036, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 560_818_000 picoseconds.
        Weight::from_parts(647_253_370, 0)
            // Standard Error: 1_058_810
            .saturating_add(Weight::from_parts(52_361_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 565_556_000 picoseconds.
        Weight::from_parts(662_233_312, 0)
            // Standard Error: 1_099_127
            .saturating_add(Weight::from_parts(56_658_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_826_000 picoseconds.
        Weight::from_parts(78_417_044, 0)
            // Standard Error: 40_612
            .saturating_add(Weight::from_parts(9_286_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_362_000 picoseconds.
        Weight::from_parts(78_962_990, 0)
            // Standard Error: 39_722
            .saturating_add(Weight::from_parts(9_380_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_265_000 picoseconds.
        Weight::from_parts(66_116_900, 0)
            // Standard Error: 48_234
            .saturating_add(Weight::from_parts(25_145_482, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_586_000 picoseconds.
        Weight::from_parts(68_236_920, 0)
            // Standard Error: 46_978
            .saturating_add(Weight::from_parts(12_828_694, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_140_000 picoseconds.
        Weight::from_parts(68_469_120, 0)
            // Standard Error: 44_531
            .saturating_add(Weight::from_parts(8_522_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_563_000 picoseconds.
        Weight::from_parts(65_711_506, 0)
            // Standard Error: 45_858
            .saturating_add(Weight::from_parts(12_404_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_161_000 picoseconds.
        Weight::from_parts(65_707_290, 0)
            // Standard Error: 43_646
            .saturating_add(Weight::from_parts(12_464_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 961_000 picoseconds.
        Weight::from_parts(1_006_000, 0)
            // Standard Error: 889
            .saturating_add(Weight::from_parts(219_684, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_218_000 picoseconds.
        Weight::from_parts(3_339_000, 3610)
            // Standard Error: 977
            .saturating_add(Weight::from_parts(657_732, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 35_281_000 picoseconds.
        Weight::from_parts(32_187_521, 0)
            // Standard Error: 2_745
            .saturating_add(Weight::from_parts(276_508, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1321`
        //  Estimated: `8799`
        // Minimum execution time: 148_836_000 picoseconds.
        Weight::from_parts(150_768_000, 8799)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 103_892_000 picoseconds.
        Weight::from_parts(81_133_392, 3578)
            // Standard Error: 66_779
            .saturating_add(Weight::from_parts(63_103_013, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1005`
        //  Estimated: `4470`
        // Minimum execution time: 136_294_000 picoseconds.
        Weight::from_parts(173_478_040, 4470)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_262, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 9_625_391_000 picoseconds.
        Weight::from_parts(227_157_401, 3844)
            // Standard Error: 113_735
            .saturating_add(Weight::from_parts(65_247_500, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_247, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480`
        //  Estimated: `6196`
        // Minimum execution time: 113_347_000 picoseconds.
        Weight::from_parts(75_195_978, 6196)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(957, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1320`
        //  Estimated: `8799`
        // Minimum execution time: 179_829_000 picoseconds.
        Weight::from_parts(158_101_311, 8799)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(974, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 81_967_000 picoseconds.
        Weight::from_parts(82_618_000, 3682)
            // Standard Error: 31_045
            .saturating_add(Weight::from_parts(62_939_995, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_090_000 picoseconds.
        Weight::from_parts(60_399_000, 0)
            // Standard Error: 2_044_010
            .saturating_add(Weight::from_parts(488_278_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 394_364_000 picoseconds.
        Weight::from_parts(347_382_177, 0)
            // Standard Error: 6_847
            .saturating_add(Weight::from_parts(18_226_260, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 163_457_000 picoseconds.
        Weight::from_parts(154_985_009, 0)
            // Standard Error: 123_911
            .saturating_add(Weight::from_parts(52_065_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 163_407_000 picoseconds.
        Weight::from_parts(163_629_904, 0)
            // Standard Error: 78_146
            .saturating_add(Weight::from_parts(62_704_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 232_880_000 picoseconds.
        Weight::from_parts(225_594_930, 0)
            // Standard Error: 48_290
            .saturating_add(Weight::from_parts(4_674_795, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_707_000 picoseconds.
        Weight::from_parts(73_603_793, 0)
            // Standard Error: 3_447
            .saturating_add(Weight::from_parts(2_209_471, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_483_000 picoseconds.
        Weight::from_parts(115_106_171, 0)
            // Standard Error: 3_041
            .saturating_add(Weight::from_parts(1_935_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_603_000 picoseconds.
        Weight::from_parts(82_123_596, 0)
            // Standard Error: 177_577
            .saturating_add(Weight::from_parts(87_491_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_937_000 picoseconds.
        Weight::from_parts(82_657_643, 0)
            // Standard Error: 111_643
            .saturating_add(Weight::from_parts(77_081_317, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_656_000 picoseconds.
        Weight::from_parts(76_703_403, 0)
            // Standard Error: 66_592
            .saturating_add(Weight::from_parts(77_141_596, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_468_000 picoseconds.
        Weight::from_parts(78_239_322, 0)
            // Standard Error: 66_528
            .saturating_add(Weight::from_parts(76_586_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_272_000 picoseconds.
        Weight::from_parts(77_811_083, 0)
            // Standard Error: 57_611
            .saturating_add(Weight::from_parts(77_383_239, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_817_000 picoseconds.
        Weight::from_parts(77_003_183, 0)
            // Standard Error: 65_627
            .saturating_add(Weight::from_parts(77_793_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_669_000 picoseconds.
        Weight::from_parts(80_002_615, 0)
            // Standard Error: 124_498
            .saturating_add(Weight::from_parts(78_096_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_540_000 picoseconds.
        Weight::from_parts(81_890_211, 0)
            // Standard Error: 68_996
            .saturating_add(Weight::from_parts(75_869_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 559_229_000 picoseconds.
        Weight::from_parts(625_008_608, 0)
            // Standard Error: 190_379
            .saturating_add(Weight::from_parts(127_808_713, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 675_466_000 picoseconds.
        Weight::from_parts(689_825_000, 0)
            // Standard Error: 54_174
            .saturating_add(Weight::from_parts(13_175_281, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_208_000 picoseconds.
        Weight::from_parts(82_907_054, 0)
            // Standard Error: 80_127
            .saturating_add(Weight::from_parts(87_174_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_473_000 picoseconds.
        Weight::from_parts(83_265_789, 0)
            // Standard Error: 91_487
            .saturating_add(Weight::from_parts(76_774_304, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_562_000 picoseconds.
        Weight::from_parts(80_130_994, 0)
            // Standard Error: 107_984
            .saturating_add(Weight::from_parts(78_077_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_450_000 picoseconds.
        Weight::from_parts(82_935_446, 0)
            // Standard Error: 146_429
            .saturating_add(Weight::from_parts(157_968_539, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_387_000 picoseconds.
        Weight::from_parts(66_258_000, 0)
            // Standard Error: 3_850_073
            .saturating_add(Weight::from_parts(758_650_890, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_999_000 picoseconds.
        Weight::from_parts(82_368_435, 0)
            // Standard Error: 155_138
            .saturating_add(Weight::from_parts(254_285_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 310_250_000 picoseconds.
        Weight::from_parts(312_822_000, 0)
            // Standard Error: 48_863
            .saturating_add(Weight::from_parts(34_039_125, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_575_000 picoseconds.
        Weight::from_parts(81_443_062, 0)
            // Standard Error: 156_812
            .saturating_add(Weight::from_parts(258_709_878, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 310_974_000 picoseconds.
        Weight::from_parts(312_389_000, 0)
            // Standard Error: 48_838
            .saturating_add(Weight::from_parts(34_102_838, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 536_182_000 picoseconds.
        Weight::from_parts(607_491_144, 0)
            // Standard Error: 357_136
            .saturating_add(Weight::from_parts(245_077_720, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 543_733_000 picoseconds.
        Weight::from_parts(608_342_002, 0)
            // Standard Error: 385_119
            .saturating_add(Weight::from_parts(247_211_848, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_055_000 picoseconds.
        Weight::from_parts(75_572_169, 0)
            // Standard Error: 47_082
            .saturating_add(Weight::from_parts(82_845_368, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_707_520_000 picoseconds.
        Weight::from_parts(1_732_713_923, 0)
            // Standard Error: 279_822
            .saturating_add(Weight::from_parts(157_477_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_112_000 picoseconds.
        Weight::from_parts(270_811_000, 0)
            // Standard Error: 54_390
            .saturating_add(Weight::from_parts(34_187_756, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_713_988_000 picoseconds.
        Weight::from_parts(1_732_520_790, 0)
            // Standard Error: 189_855
            .saturating_add(Weight::from_parts(208_494_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_713_351_000 picoseconds.
        Weight::from_parts(1_750_734_712, 0)
            // Standard Error: 204_416
            .saturating_add(Weight::from_parts(208_431_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 145_444_000 picoseconds.
        Weight::from_parts(152_363_146, 0)
            // Standard Error: 138_919
            .saturating_add(Weight::from_parts(268_916_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 391_164_000 picoseconds.
        Weight::from_parts(395_402_000, 0)
            // Standard Error: 49_793
            .saturating_add(Weight::from_parts(34_102_261, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_767_043_000 picoseconds.
        Weight::from_parts(1_823_647_145, 0)
            // Standard Error: 286_449
            .saturating_add(Weight::from_parts(222_971_491, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_287_000 picoseconds.
        Weight::from_parts(82_386_462, 0)
            // Standard Error: 1_073
            .saturating_add(Weight::from_parts(595_848, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_578_000 picoseconds.
        Weight::from_parts(71_024_695, 0)
            // Standard Error: 1_111
            .saturating_add(Weight::from_parts(605_274, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_581_000 picoseconds.
        Weight::from_parts(81_913_992, 0)
            // Standard Error: 166_867
            .saturating_add(Weight::from_parts(139_601_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_260_000 picoseconds.
        Weight::from_parts(84_925_000, 0)
            // Standard Error: 2_681
            .saturating_add(Weight::from_parts(682_160, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_279_000 picoseconds.
        Weight::from_parts(78_542_619, 0)
            // Standard Error: 1_155
            .saturating_add(Weight::from_parts(604_610, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_519_000 picoseconds.
        Weight::from_parts(73_973_676, 0)
            // Standard Error: 1_133
            .saturating_add(Weight::from_parts(609_916, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_913_000 picoseconds.
        Weight::from_parts(83_956_873, 0)
            // Standard Error: 68_160
            .saturating_add(Weight::from_parts(77_090_496, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_819_000 picoseconds.
        Weight::from_parts(83_922_032, 0)
            // Standard Error: 65_133
            .saturating_add(Weight::from_parts(74_636_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_866_000 picoseconds.
        Weight::from_parts(85_750_782, 0)
            // Standard Error: 58_713
            .saturating_add(Weight::from_parts(77_754_862, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 552_580_000 picoseconds.
        Weight::from_parts(606_164_245, 0)
            // Standard Error: 184_228
            .saturating_add(Weight::from_parts(100_531_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 565_994_000 picoseconds.
        Weight::from_parts(580_068_568, 0)
            // Standard Error: 1_753
            .saturating_add(Weight::from_parts(122_494, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_217_145_000 picoseconds.
        Weight::from_parts(2_259_034_055, 0)
            // Standard Error: 174_021
            .saturating_add(Weight::from_parts(116_969_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_301_025_000 picoseconds.
        Weight::from_parts(2_253_175_425, 0)
            // Standard Error: 11_880
            .saturating_add(Weight::from_parts(12_751_403, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_360_000 picoseconds.
        Weight::from_parts(84_513_133, 0)
            // Standard Error: 93_555
            .saturating_add(Weight::from_parts(99_372_135, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 124_410_000 picoseconds.
        Weight::from_parts(127_157_000, 0)
            // Standard Error: 48_099
            .saturating_add(Weight::from_parts(30_235_063, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_936_000 picoseconds.
        Weight::from_parts(79_071_732, 0)
            // Standard Error: 71_591
            .saturating_add(Weight::from_parts(74_564_478, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_060_000 picoseconds.
        Weight::from_parts(111_240_000, 0)
            // Standard Error: 1_575_325
            .saturating_add(Weight::from_parts(275_312_675, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_175_000 picoseconds.
        Weight::from_parts(80_954_328, 0)
            // Standard Error: 160_486
            .saturating_add(Weight::from_parts(324_316_021, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_140_719_000 picoseconds.
        Weight::from_parts(50_214_730_000, 0)
            // Standard Error: 281_752
            .saturating_add(Weight::from_parts(8_947_743, 0).saturating_mul(p.into()))
            // Standard Error: 281_738
            .saturating_add(Weight::from_parts(156_270_551, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_509_000 picoseconds.
        Weight::from_parts(75_411_955, 0)
            // Standard Error: 176_814
            .saturating_add(Weight::from_parts(330_534_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_921_044_000 picoseconds.
        Weight::from_parts(51_028_600_000, 0)
            // Standard Error: 296_244
            .saturating_add(Weight::from_parts(8_567_334, 0).saturating_mul(p.into()))
            // Standard Error: 296_230
            .saturating_add(Weight::from_parts(155_705_375, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 67_749_000 picoseconds.
        Weight::from_parts(88_492_871, 1131)
            // Standard Error: 17_592
            .saturating_add(Weight::from_parts(17_295_573, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 65_105_000 picoseconds.
        Weight::from_parts(67_018_000, 1131)
            // Standard Error: 40_877
            .saturating_add(Weight::from_parts(45_685_015, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_604_313_000 picoseconds.
        Weight::from_parts(8_909_493_250, 5069931)
            // Standard Error: 86_865
            .saturating_add(Weight::from_parts(44_800_078, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 65_591_000 picoseconds.
        Weight::from_parts(67_000_000, 1946)
            // Standard Error: 39_795
            .saturating_add(Weight::from_parts(61_025_241, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 68_540_000 picoseconds.
        Weight::from_parts(67_001_048, 1131)
            // Standard Error: 70_423
            .saturating_add(Weight::from_parts(46_433_201, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 649_521_000 picoseconds.
        Weight::from_parts(629_602_807, 1496)
            // Standard Error: 350_664
            .saturating_add(Weight::from_parts(56_127_899, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_133_668_000 picoseconds.
        Weight::from_parts(1_204_877_718, 317931)
            // Standard Error: 333_210
            .saturating_add(Weight::from_parts(53_540_381, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_010_000 picoseconds.
        Weight::from_parts(4_271_000, 0)
            // Standard Error: 255_581
            .saturating_add(Weight::from_parts(90_452_859, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_532_138_000 picoseconds.
        Weight::from_parts(4_587_206_638, 0)
            // Standard Error: 14_802
            .saturating_add(Weight::from_parts(3_263_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_504_873_000 picoseconds.
        Weight::from_parts(4_572_544_568, 0)
            // Standard Error: 15_263
            .saturating_add(Weight::from_parts(3_281_285, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_879_756_000 picoseconds.
        Weight::from_parts(11_556_774_953, 0)
            // Standard Error: 187_926
            .saturating_add(Weight::from_parts(7_846_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_617_179_000 picoseconds.
        Weight::from_parts(11_731_033_537, 0)
            // Standard Error: 128_126
            .saturating_add(Weight::from_parts(6_649_775, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_114_000 picoseconds.
        Weight::from_parts(1_154_000, 0)
            // Standard Error: 22_439
            .saturating_add(Weight::from_parts(3_317_551, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_108_000 picoseconds.
        Weight::from_parts(1_155_000, 0)
            // Standard Error: 13_776
            .saturating_add(Weight::from_parts(2_635_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_138_000 picoseconds.
        Weight::from_parts(1_175_000, 0)
            // Standard Error: 1_545
            .saturating_add(Weight::from_parts(1_569_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_110_000 picoseconds.
        Weight::from_parts(1_165_000, 0)
            // Standard Error: 12_488
            .saturating_add(Weight::from_parts(2_141_319, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_133_000 picoseconds.
        Weight::from_parts(1_187_000, 0)
            // Standard Error: 27_857
            .saturating_add(Weight::from_parts(5_054_098, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_956_000 picoseconds.
        Weight::from_parts(4_748_268, 0)
            // Standard Error: 588
            .saturating_add(Weight::from_parts(45_720, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_132_000 picoseconds.
        Weight::from_parts(853_215, 0)
            // Standard Error: 5_272
            .saturating_add(Weight::from_parts(2_468_920, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_468_920 -
            2_307_513, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_107_000 picoseconds.
        Weight::from_parts(843_784, 0)
            // Standard Error: 11_946
            .saturating_add(Weight::from_parts(2_307_513, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_208_000 picoseconds.
        Weight::from_parts(1_298_000, 0)
            // Standard Error: 25_736
            .saturating_add(Weight::from_parts(7_929_260, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_925_000 picoseconds.
        Weight::from_parts(5_326_000, 0)
            // Standard Error: 7_826
            .saturating_add(Weight::from_parts(658_969, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(2_580_683, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(80, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_556_000 picoseconds.
        Weight::from_parts(6_735_288, 0)
            // Standard Error: 3_160
            .saturating_add(Weight::from_parts(361_565, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_502_000 picoseconds.
        Weight::from_parts(6_490_992, 0)
            // Standard Error: 5_192
            .saturating_add(Weight::from_parts(856_704, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_581_000 picoseconds.
        Weight::from_parts(592_685, 0)
            // Standard Error: 17_166
            .saturating_add(Weight::from_parts(1_358_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_174_000 picoseconds.
        Weight::from_parts(4_480_461, 0)
            // Standard Error: 9_964
            .saturating_add(Weight::from_parts(474_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_110_000 picoseconds.
        Weight::from_parts(1_795_119, 0)
            // Standard Error: 19_568
            .saturating_add(Weight::from_parts(775_032, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_286_000 picoseconds.
        Weight::from_parts(8_982_386, 0)
            // Standard Error: 16_831
            .saturating_add(Weight::from_parts(5_556_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_095_000 picoseconds.
        Weight::from_parts(1_119_000, 0)
            // Standard Error: 16_263
            .saturating_add(Weight::from_parts(2_357_601, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_082_000 picoseconds.
        Weight::from_parts(1_149_000, 0)
            // Standard Error: 12_078
            .saturating_add(Weight::from_parts(2_239_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_111_000 picoseconds.
        Weight::from_parts(1_151_000, 0)
            // Standard Error: 11_080
            .saturating_add(Weight::from_parts(2_190_531, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_089_000 picoseconds.
        Weight::from_parts(1_131_000, 0)
            // Standard Error: 12_224
            .saturating_add(Weight::from_parts(2_090_099, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_120_000 picoseconds.
        Weight::from_parts(1_155_000, 0)
            // Standard Error: 3_151
            .saturating_add(Weight::from_parts(446_523, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_108_000 picoseconds.
        Weight::from_parts(141_933, 0)
            // Standard Error: 4_805
            .saturating_add(Weight::from_parts(349_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_083_000 picoseconds.
        Weight::from_parts(1_121_000, 0)
            // Standard Error: 6_652
            .saturating_add(Weight::from_parts(937_498, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_129_000 picoseconds.
        Weight::from_parts(1_196_000, 0)
            // Standard Error: 6_242
            .saturating_add(Weight::from_parts(649_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_152_000 picoseconds.
        Weight::from_parts(190_711, 0)
            // Standard Error: 4_034
            .saturating_add(Weight::from_parts(348_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_165_000 picoseconds.
        Weight::from_parts(184_103, 0)
            // Standard Error: 4_778
            .saturating_add(Weight::from_parts(364_529, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_148_000 picoseconds.
        Weight::from_parts(1_168_000, 0)
            // Standard Error: 7_111
            .saturating_add(Weight::from_parts(587_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_164_000 picoseconds.
        Weight::from_parts(1_195_000, 0)
            // Standard Error: 7_189
            .saturating_add(Weight::from_parts(586_641, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_081_000 picoseconds.
        Weight::from_parts(1_117_000, 0)
            // Standard Error: 2_923
            .saturating_add(Weight::from_parts(385_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_130_000 picoseconds.
        Weight::from_parts(962_136, 0)
            // Standard Error: 2_461
            .saturating_add(Weight::from_parts(279_085, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_077_000 picoseconds.
        Weight::from_parts(708_187, 0)
            // Standard Error: 2_331
            .saturating_add(Weight::from_parts(201_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_127_000 picoseconds.
        Weight::from_parts(106_450, 0)
            // Standard Error: 9_560
            .saturating_add(Weight::from_parts(298_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_182_000 picoseconds.
        Weight::from_parts(1_227_000, 0)
            // Standard Error: 16_706
            .saturating_add(Weight::from_parts(1_243_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_156_000, 0)
            // Standard Error: 7_053
            .saturating_add(Weight::from_parts(720_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_140_000 picoseconds.
        Weight::from_parts(1_158_000, 0)
            // Standard Error: 14_417
            .saturating_add(Weight::from_parts(1_193_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_128_000 picoseconds.
        Weight::from_parts(1_150_000, 0)
            // Standard Error: 5_892
            .saturating_add(Weight::from_parts(750_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_089_000 picoseconds.
        Weight::from_parts(1_145_000, 0)
            // Standard Error: 21_861
            .saturating_add(Weight::from_parts(1_735_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_108_000 picoseconds.
        Weight::from_parts(1_126_000, 0)
            // Standard Error: 13_927
            .saturating_add(Weight::from_parts(1_044_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_118_000 picoseconds.
        Weight::from_parts(1_147_000, 0)
            // Standard Error: 22_455
            .saturating_add(Weight::from_parts(1_717_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_098_000 picoseconds.
        Weight::from_parts(1_136_000, 0)
            // Standard Error: 16_197
            .saturating_add(Weight::from_parts(1_191_217, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_177_000 picoseconds.
        Weight::from_parts(1_197_000, 0)
            // Standard Error: 19_566
            .saturating_add(Weight::from_parts(1_944_855, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_080_000 picoseconds.
        Weight::from_parts(1_150_000, 0)
            // Standard Error: 9_130
            .saturating_add(Weight::from_parts(789_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_113_000 picoseconds.
        Weight::from_parts(1_130_000, 0)
            // Standard Error: 19_044
            .saturating_add(Weight::from_parts(1_274_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_067_000 picoseconds.
        Weight::from_parts(1_122_000, 0)
            // Standard Error: 11_027
            .saturating_add(Weight::from_parts(833_917, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_100_000 picoseconds.
        Weight::from_parts(1_161_000, 0)
            // Standard Error: 16_417
            .saturating_add(Weight::from_parts(1_161_099, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_097_000 picoseconds.
        Weight::from_parts(1_131_000, 0)
            // Standard Error: 10_483
            .saturating_add(Weight::from_parts(961_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_079_000 picoseconds.
        Weight::from_parts(1_138_000, 0)
            // Standard Error: 13_729
            .saturating_add(Weight::from_parts(1_003_154, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_077_000 picoseconds.
        Weight::from_parts(1_137_000, 0)
            // Standard Error: 8_449
            .saturating_add(Weight::from_parts(703_679, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_131_000 picoseconds.
        Weight::from_parts(1_159_000, 0)
            // Standard Error: 10_794
            .saturating_add(Weight::from_parts(936_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_135_000 picoseconds.
        Weight::from_parts(1_186_000, 0)
            // Standard Error: 15_411
            .saturating_add(Weight::from_parts(895_530, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_122_000 picoseconds.
        Weight::from_parts(1_161_000, 0)
            // Standard Error: 24_030
            .saturating_add(Weight::from_parts(1_412_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_075_000 picoseconds.
        Weight::from_parts(103_943, 0)
            // Standard Error: 3_443
            .saturating_add(Weight::from_parts(576_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(1_152_000, 0)
            // Standard Error: 18_327
            .saturating_add(Weight::from_parts(900_137, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_185_000 picoseconds.
        Weight::from_parts(1_202_000, 0)
            // Standard Error: 6_787
            .saturating_add(Weight::from_parts(459_590, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_174_000, 0)
            // Standard Error: 8_483
            .saturating_add(Weight::from_parts(725_455, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_124_000 picoseconds.
        Weight::from_parts(1_140_000, 0)
            // Standard Error: 6_921
            .saturating_add(Weight::from_parts(455_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_089_000 picoseconds.
        Weight::from_parts(1_169_000, 0)
            // Standard Error: 5_640
            .saturating_add(Weight::from_parts(805_411, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_150_000 picoseconds.
        Weight::from_parts(1_196_000, 0)
            // Standard Error: 10_322
            .saturating_add(Weight::from_parts(678_272, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_067_000 picoseconds.
        Weight::from_parts(1_107_000, 0)
            // Standard Error: 21_579
            .saturating_add(Weight::from_parts(1_869_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_127_000 picoseconds.
        Weight::from_parts(1_159_000, 0)
            // Standard Error: 23_071
            .saturating_add(Weight::from_parts(1_949_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_057_000 picoseconds.
        Weight::from_parts(1_124_000, 0)
            // Standard Error: 19_681
            .saturating_add(Weight::from_parts(2_099_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_132_000 picoseconds.
        Weight::from_parts(1_206_000, 0)
            // Standard Error: 24_923
            .saturating_add(Weight::from_parts(2_303_572, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_095_000 picoseconds.
        Weight::from_parts(1_137_000, 0)
            // Standard Error: 86_269
            .saturating_add(Weight::from_parts(7_971_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_136_000 picoseconds.
        Weight::from_parts(1_184_000, 0)
            // Standard Error: 44_467
            .saturating_add(Weight::from_parts(4_437_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_118_000 picoseconds.
        Weight::from_parts(1_182_000, 0)
            // Standard Error: 29_993
            .saturating_add(Weight::from_parts(2_484_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_088_000 picoseconds.
        Weight::from_parts(1_140_000, 0)
            // Standard Error: 29_284
            .saturating_add(Weight::from_parts(1_921_271, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_116_000 picoseconds.
        Weight::from_parts(1_162_000, 0)
            // Standard Error: 20_917
            .saturating_add(Weight::from_parts(1_176_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_084_000 picoseconds.
        Weight::from_parts(1_110_000, 0)
            // Standard Error: 10_584
            .saturating_add(Weight::from_parts(600_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_139_000 picoseconds.
        Weight::from_parts(1_215_000, 0)
            // Standard Error: 19_982
            .saturating_add(Weight::from_parts(1_153_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_080_000 picoseconds.
        Weight::from_parts(1_112_000, 0)
            // Standard Error: 9_868
            .saturating_add(Weight::from_parts(613_307, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_087_000 picoseconds.
        Weight::from_parts(1_146_000, 0)
            // Standard Error: 21_205
            .saturating_add(Weight::from_parts(1_100_776, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_141_000 picoseconds.
        Weight::from_parts(1_179_000, 0)
            // Standard Error: 14_876
            .saturating_add(Weight::from_parts(888_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_131_000 picoseconds.
        Weight::from_parts(1_192_000, 0)
            // Standard Error: 10_653
            .saturating_add(Weight::from_parts(1_108_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_153_000 picoseconds.
        Weight::from_parts(1_192_000, 0)
            // Standard Error: 9_187
            .saturating_add(Weight::from_parts(616_945, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_063_000 picoseconds.
        Weight::from_parts(1_112_000, 0)
            // Standard Error: 12_897
            .saturating_add(Weight::from_parts(927_676, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_113_000 picoseconds.
        Weight::from_parts(1_180_000, 0)
            // Standard Error: 9_038
            .saturating_add(Weight::from_parts(558_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_139_000 picoseconds.
        Weight::from_parts(1_162_000, 0)
            // Standard Error: 16_661
            .saturating_add(Weight::from_parts(1_263_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_066_000 picoseconds.
        Weight::from_parts(1_119_000, 0)
            // Standard Error: 13_648
            .saturating_add(Weight::from_parts(720_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_086_000 picoseconds.
        Weight::from_parts(1_150_000, 0)
            // Standard Error: 18_500
            .saturating_add(Weight::from_parts(1_171_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(1_199_000, 0)
            // Standard Error: 12_094
            .saturating_add(Weight::from_parts(752_250, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_120_000 picoseconds.
        Weight::from_parts(1_144_000, 0)
            // Standard Error: 8_965
            .saturating_add(Weight::from_parts(996_836, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_129_000 picoseconds.
        Weight::from_parts(1_166_000, 0)
            // Standard Error: 10_848
            .saturating_add(Weight::from_parts(770_048, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `6196`
        // Minimum execution time: 82_033_000 picoseconds.
        Weight::from_parts(87_508_000, 6196)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 49_625_000 picoseconds.
        Weight::from_parts(52_069_000, 4323)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `6196`
        // Minimum execution time: 93_970_000 picoseconds.
        Weight::from_parts(97_303_000, 6196)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 33_866_000 picoseconds.
        Weight::from_parts(35_425_000, 4159)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 49_893_000 picoseconds.
        Weight::from_parts(53_663_000, 4402)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_880_000 picoseconds.
        Weight::from_parts(4_069_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1565`
        //  Estimated: `7505`
        // Minimum execution time: 134_765_000 picoseconds.
        Weight::from_parts(139_166_000, 7505)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 108_281_000 picoseconds.
        Weight::from_parts(113_764_000, 7234)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_206_000 picoseconds.
        Weight::from_parts(65_389_824, 0)
            // Standard Error: 43_131
            .saturating_add(Weight::from_parts(23_092_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_866_000 picoseconds.
        Weight::from_parts(67_131_146, 0)
            // Standard Error: 43_698
            .saturating_add(Weight::from_parts(20_831_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_009_000 picoseconds.
        Weight::from_parts(67_453_716, 0)
            // Standard Error: 40_538
            .saturating_add(Weight::from_parts(18_806_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_660_000 picoseconds.
        Weight::from_parts(66_649_716, 0)
            // Standard Error: 41_903
            .saturating_add(Weight::from_parts(21_503_036, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 560_818_000 picoseconds.
        Weight::from_parts(647_253_370, 0)
            // Standard Error: 1_058_810
            .saturating_add(Weight::from_parts(52_361_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 565_556_000 picoseconds.
        Weight::from_parts(662_233_312, 0)
            // Standard Error: 1_099_127
            .saturating_add(Weight::from_parts(56_658_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 74_826_000 picoseconds.
        Weight::from_parts(78_417_044, 0)
            // Standard Error: 40_612
            .saturating_add(Weight::from_parts(9_286_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 75_362_000 picoseconds.
        Weight::from_parts(78_962_990, 0)
            // Standard Error: 39_722
            .saturating_add(Weight::from_parts(9_380_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_265_000 picoseconds.
        Weight::from_parts(66_116_900, 0)
            // Standard Error: 48_234
            .saturating_add(Weight::from_parts(25_145_482, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_586_000 picoseconds.
        Weight::from_parts(68_236_920, 0)
            // Standard Error: 46_978
            .saturating_add(Weight::from_parts(12_828_694, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_140_000 picoseconds.
        Weight::from_parts(68_469_120, 0)
            // Standard Error: 44_531
            .saturating_add(Weight::from_parts(8_522_906, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_563_000 picoseconds.
        Weight::from_parts(65_711_506, 0)
            // Standard Error: 45_858
            .saturating_add(Weight::from_parts(12_404_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_161_000 picoseconds.
        Weight::from_parts(65_707_290, 0)
            // Standard Error: 43_646
            .saturating_add(Weight::from_parts(12_464_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 961_000 picoseconds.
        Weight::from_parts(1_006_000, 0)
            // Standard Error: 889
            .saturating_add(Weight::from_parts(219_684, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_218_000 picoseconds.
        Weight::from_parts(3_339_000, 3610)
            // Standard Error: 977
            .saturating_add(Weight::from_parts(657_732, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 35_281_000 picoseconds.
        Weight::from_parts(32_187_521, 0)
            // Standard Error: 2_745
            .saturating_add(Weight::from_parts(276_508, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1321`
        //  Estimated: `8799`
        // Minimum execution time: 148_836_000 picoseconds.
        Weight::from_parts(150_768_000, 8799)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 103_892_000 picoseconds.
        Weight::from_parts(81_133_392, 3578)
            // Standard Error: 66_779
            .saturating_add(Weight::from_parts(63_103_013, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1005`
        //  Estimated: `4470`
        // Minimum execution time: 136_294_000 picoseconds.
        Weight::from_parts(173_478_040, 4470)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_262, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 9_625_391_000 picoseconds.
        Weight::from_parts(227_157_401, 3844)
            // Standard Error: 113_735
            .saturating_add(Weight::from_parts(65_247_500, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_247, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480`
        //  Estimated: `6196`
        // Minimum execution time: 113_347_000 picoseconds.
        Weight::from_parts(75_195_978, 6196)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(957, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1320`
        //  Estimated: `8799`
        // Minimum execution time: 179_829_000 picoseconds.
        Weight::from_parts(158_101_311, 8799)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(974, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 81_967_000 picoseconds.
        Weight::from_parts(82_618_000, 3682)
            // Standard Error: 31_045
            .saturating_add(Weight::from_parts(62_939_995, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_090_000 picoseconds.
        Weight::from_parts(60_399_000, 0)
            // Standard Error: 2_044_010
            .saturating_add(Weight::from_parts(488_278_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 394_364_000 picoseconds.
        Weight::from_parts(347_382_177, 0)
            // Standard Error: 6_847
            .saturating_add(Weight::from_parts(18_226_260, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 163_457_000 picoseconds.
        Weight::from_parts(154_985_009, 0)
            // Standard Error: 123_911
            .saturating_add(Weight::from_parts(52_065_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 163_407_000 picoseconds.
        Weight::from_parts(163_629_904, 0)
            // Standard Error: 78_146
            .saturating_add(Weight::from_parts(62_704_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 232_880_000 picoseconds.
        Weight::from_parts(225_594_930, 0)
            // Standard Error: 48_290
            .saturating_add(Weight::from_parts(4_674_795, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_707_000 picoseconds.
        Weight::from_parts(73_603_793, 0)
            // Standard Error: 3_447
            .saturating_add(Weight::from_parts(2_209_471, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_483_000 picoseconds.
        Weight::from_parts(115_106_171, 0)
            // Standard Error: 3_041
            .saturating_add(Weight::from_parts(1_935_020, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_603_000 picoseconds.
        Weight::from_parts(82_123_596, 0)
            // Standard Error: 177_577
            .saturating_add(Weight::from_parts(87_491_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_937_000 picoseconds.
        Weight::from_parts(82_657_643, 0)
            // Standard Error: 111_643
            .saturating_add(Weight::from_parts(77_081_317, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_656_000 picoseconds.
        Weight::from_parts(76_703_403, 0)
            // Standard Error: 66_592
            .saturating_add(Weight::from_parts(77_141_596, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_468_000 picoseconds.
        Weight::from_parts(78_239_322, 0)
            // Standard Error: 66_528
            .saturating_add(Weight::from_parts(76_586_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_272_000 picoseconds.
        Weight::from_parts(77_811_083, 0)
            // Standard Error: 57_611
            .saturating_add(Weight::from_parts(77_383_239, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_817_000 picoseconds.
        Weight::from_parts(77_003_183, 0)
            // Standard Error: 65_627
            .saturating_add(Weight::from_parts(77_793_334, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_669_000 picoseconds.
        Weight::from_parts(80_002_615, 0)
            // Standard Error: 124_498
            .saturating_add(Weight::from_parts(78_096_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_540_000 picoseconds.
        Weight::from_parts(81_890_211, 0)
            // Standard Error: 68_996
            .saturating_add(Weight::from_parts(75_869_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 559_229_000 picoseconds.
        Weight::from_parts(625_008_608, 0)
            // Standard Error: 190_379
            .saturating_add(Weight::from_parts(127_808_713, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 675_466_000 picoseconds.
        Weight::from_parts(689_825_000, 0)
            // Standard Error: 54_174
            .saturating_add(Weight::from_parts(13_175_281, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_208_000 picoseconds.
        Weight::from_parts(82_907_054, 0)
            // Standard Error: 80_127
            .saturating_add(Weight::from_parts(87_174_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_473_000 picoseconds.
        Weight::from_parts(83_265_789, 0)
            // Standard Error: 91_487
            .saturating_add(Weight::from_parts(76_774_304, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_562_000 picoseconds.
        Weight::from_parts(80_130_994, 0)
            // Standard Error: 107_984
            .saturating_add(Weight::from_parts(78_077_827, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_450_000 picoseconds.
        Weight::from_parts(82_935_446, 0)
            // Standard Error: 146_429
            .saturating_add(Weight::from_parts(157_968_539, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_387_000 picoseconds.
        Weight::from_parts(66_258_000, 0)
            // Standard Error: 3_850_073
            .saturating_add(Weight::from_parts(758_650_890, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 63_999_000 picoseconds.
        Weight::from_parts(82_368_435, 0)
            // Standard Error: 155_138
            .saturating_add(Weight::from_parts(254_285_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 310_250_000 picoseconds.
        Weight::from_parts(312_822_000, 0)
            // Standard Error: 48_863
            .saturating_add(Weight::from_parts(34_039_125, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_575_000 picoseconds.
        Weight::from_parts(81_443_062, 0)
            // Standard Error: 156_812
            .saturating_add(Weight::from_parts(258_709_878, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 310_974_000 picoseconds.
        Weight::from_parts(312_389_000, 0)
            // Standard Error: 48_838
            .saturating_add(Weight::from_parts(34_102_838, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 536_182_000 picoseconds.
        Weight::from_parts(607_491_144, 0)
            // Standard Error: 357_136
            .saturating_add(Weight::from_parts(245_077_720, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 543_733_000 picoseconds.
        Weight::from_parts(608_342_002, 0)
            // Standard Error: 385_119
            .saturating_add(Weight::from_parts(247_211_848, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_055_000 picoseconds.
        Weight::from_parts(75_572_169, 0)
            // Standard Error: 47_082
            .saturating_add(Weight::from_parts(82_845_368, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_707_520_000 picoseconds.
        Weight::from_parts(1_732_713_923, 0)
            // Standard Error: 279_822
            .saturating_add(Weight::from_parts(157_477_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_112_000 picoseconds.
        Weight::from_parts(270_811_000, 0)
            // Standard Error: 54_390
            .saturating_add(Weight::from_parts(34_187_756, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_713_988_000 picoseconds.
        Weight::from_parts(1_732_520_790, 0)
            // Standard Error: 189_855
            .saturating_add(Weight::from_parts(208_494_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_713_351_000 picoseconds.
        Weight::from_parts(1_750_734_712, 0)
            // Standard Error: 204_416
            .saturating_add(Weight::from_parts(208_431_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 145_444_000 picoseconds.
        Weight::from_parts(152_363_146, 0)
            // Standard Error: 138_919
            .saturating_add(Weight::from_parts(268_916_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 391_164_000 picoseconds.
        Weight::from_parts(395_402_000, 0)
            // Standard Error: 49_793
            .saturating_add(Weight::from_parts(34_102_261, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_767_043_000 picoseconds.
        Weight::from_parts(1_823_647_145, 0)
            // Standard Error: 286_449
            .saturating_add(Weight::from_parts(222_971_491, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_287_000 picoseconds.
        Weight::from_parts(82_386_462, 0)
            // Standard Error: 1_073
            .saturating_add(Weight::from_parts(595_848, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_578_000 picoseconds.
        Weight::from_parts(71_024_695, 0)
            // Standard Error: 1_111
            .saturating_add(Weight::from_parts(605_274, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_581_000 picoseconds.
        Weight::from_parts(81_913_992, 0)
            // Standard Error: 166_867
            .saturating_add(Weight::from_parts(139_601_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_260_000 picoseconds.
        Weight::from_parts(84_925_000, 0)
            // Standard Error: 2_681
            .saturating_add(Weight::from_parts(682_160, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_279_000 picoseconds.
        Weight::from_parts(78_542_619, 0)
            // Standard Error: 1_155
            .saturating_add(Weight::from_parts(604_610, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_519_000 picoseconds.
        Weight::from_parts(73_973_676, 0)
            // Standard Error: 1_133
            .saturating_add(Weight::from_parts(609_916, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 64_913_000 picoseconds.
        Weight::from_parts(83_956_873, 0)
            // Standard Error: 68_160
            .saturating_add(Weight::from_parts(77_090_496, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_819_000 picoseconds.
        Weight::from_parts(83_922_032, 0)
            // Standard Error: 65_133
            .saturating_add(Weight::from_parts(74_636_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 66_866_000 picoseconds.
        Weight::from_parts(85_750_782, 0)
            // Standard Error: 58_713
            .saturating_add(Weight::from_parts(77_754_862, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 552_580_000 picoseconds.
        Weight::from_parts(606_164_245, 0)
            // Standard Error: 184_228
            .saturating_add(Weight::from_parts(100_531_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 565_994_000 picoseconds.
        Weight::from_parts(580_068_568, 0)
            // Standard Error: 1_753
            .saturating_add(Weight::from_parts(122_494, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_217_145_000 picoseconds.
        Weight::from_parts(2_259_034_055, 0)
            // Standard Error: 174_021
            .saturating_add(Weight::from_parts(116_969_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_301_025_000 picoseconds.
        Weight::from_parts(2_253_175_425, 0)
            // Standard Error: 11_880
            .saturating_add(Weight::from_parts(12_751_403, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_360_000 picoseconds.
        Weight::from_parts(84_513_133, 0)
            // Standard Error: 93_555
            .saturating_add(Weight::from_parts(99_372_135, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 124_410_000 picoseconds.
        Weight::from_parts(127_157_000, 0)
            // Standard Error: 48_099
            .saturating_add(Weight::from_parts(30_235_063, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 62_936_000 picoseconds.
        Weight::from_parts(79_071_732, 0)
            // Standard Error: 71_591
            .saturating_add(Weight::from_parts(74_564_478, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_060_000 picoseconds.
        Weight::from_parts(111_240_000, 0)
            // Standard Error: 1_575_325
            .saturating_add(Weight::from_parts(275_312_675, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_175_000 picoseconds.
        Weight::from_parts(80_954_328, 0)
            // Standard Error: 160_486
            .saturating_add(Weight::from_parts(324_316_021, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_140_719_000 picoseconds.
        Weight::from_parts(50_214_730_000, 0)
            // Standard Error: 281_752
            .saturating_add(Weight::from_parts(8_947_743, 0).saturating_mul(p.into()))
            // Standard Error: 281_738
            .saturating_add(Weight::from_parts(156_270_551, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_509_000 picoseconds.
        Weight::from_parts(75_411_955, 0)
            // Standard Error: 176_814
            .saturating_add(Weight::from_parts(330_534_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_921_044_000 picoseconds.
        Weight::from_parts(51_028_600_000, 0)
            // Standard Error: 296_244
            .saturating_add(Weight::from_parts(8_567_334, 0).saturating_mul(p.into()))
            // Standard Error: 296_230
            .saturating_add(Weight::from_parts(155_705_375, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 67_749_000 picoseconds.
        Weight::from_parts(88_492_871, 1131)
            // Standard Error: 17_592
            .saturating_add(Weight::from_parts(17_295_573, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 65_105_000 picoseconds.
        Weight::from_parts(67_018_000, 1131)
            // Standard Error: 40_877
            .saturating_add(Weight::from_parts(45_685_015, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_604_313_000 picoseconds.
        Weight::from_parts(8_909_493_250, 5069931)
            // Standard Error: 86_865
            .saturating_add(Weight::from_parts(44_800_078, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 65_591_000 picoseconds.
        Weight::from_parts(67_000_000, 1946)
            // Standard Error: 39_795
            .saturating_add(Weight::from_parts(61_025_241, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 68_540_000 picoseconds.
        Weight::from_parts(67_001_048, 1131)
            // Standard Error: 70_423
            .saturating_add(Weight::from_parts(46_433_201, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 649_521_000 picoseconds.
        Weight::from_parts(629_602_807, 1496)
            // Standard Error: 350_664
            .saturating_add(Weight::from_parts(56_127_899, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_133_668_000 picoseconds.
        Weight::from_parts(1_204_877_718, 317931)
            // Standard Error: 333_210
            .saturating_add(Weight::from_parts(53_540_381, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_010_000 picoseconds.
        Weight::from_parts(4_271_000, 0)
            // Standard Error: 255_581
            .saturating_add(Weight::from_parts(90_452_859, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_532_138_000 picoseconds.
        Weight::from_parts(4_587_206_638, 0)
            // Standard Error: 14_802
            .saturating_add(Weight::from_parts(3_263_777, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_504_873_000 picoseconds.
        Weight::from_parts(4_572_544_568, 0)
            // Standard Error: 15_263
            .saturating_add(Weight::from_parts(3_281_285, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_879_756_000 picoseconds.
        Weight::from_parts(11_556_774_953, 0)
            // Standard Error: 187_926
            .saturating_add(Weight::from_parts(7_846_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_617_179_000 picoseconds.
        Weight::from_parts(11_731_033_537, 0)
            // Standard Error: 128_126
            .saturating_add(Weight::from_parts(6_649_775, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_114_000 picoseconds.
        Weight::from_parts(1_154_000, 0)
            // Standard Error: 22_439
            .saturating_add(Weight::from_parts(3_317_551, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_108_000 picoseconds.
        Weight::from_parts(1_155_000, 0)
            // Standard Error: 13_776
            .saturating_add(Weight::from_parts(2_635_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_138_000 picoseconds.
        Weight::from_parts(1_175_000, 0)
            // Standard Error: 1_545
            .saturating_add(Weight::from_parts(1_569_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_110_000 picoseconds.
        Weight::from_parts(1_165_000, 0)
            // Standard Error: 12_488
            .saturating_add(Weight::from_parts(2_141_319, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_133_000 picoseconds.
        Weight::from_parts(1_187_000, 0)
            // Standard Error: 27_857
            .saturating_add(Weight::from_parts(5_054_098, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_956_000 picoseconds.
        Weight::from_parts(4_748_268, 0)
            // Standard Error: 588
            .saturating_add(Weight::from_parts(45_720, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_132_000 picoseconds.
        Weight::from_parts(853_215, 0)
            // Standard Error: 5_272
            .saturating_add(Weight::from_parts(2_468_920, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_468_920 -
            2_307_513, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_107_000 picoseconds.
        Weight::from_parts(843_784, 0)
            // Standard Error: 11_946
            .saturating_add(Weight::from_parts(2_307_513, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_208_000 picoseconds.
        Weight::from_parts(1_298_000, 0)
            // Standard Error: 25_736
            .saturating_add(Weight::from_parts(7_929_260, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_925_000 picoseconds.
        Weight::from_parts(5_326_000, 0)
            // Standard Error: 7_826
            .saturating_add(Weight::from_parts(658_969, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_413_000 picoseconds.
        Weight::from_parts(2_580_683, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(80, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_556_000 picoseconds.
        Weight::from_parts(6_735_288, 0)
            // Standard Error: 3_160
            .saturating_add(Weight::from_parts(361_565, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_502_000 picoseconds.
        Weight::from_parts(6_490_992, 0)
            // Standard Error: 5_192
            .saturating_add(Weight::from_parts(856_704, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_581_000 picoseconds.
        Weight::from_parts(592_685, 0)
            // Standard Error: 17_166
            .saturating_add(Weight::from_parts(1_358_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_174_000 picoseconds.
        Weight::from_parts(4_480_461, 0)
            // Standard Error: 9_964
            .saturating_add(Weight::from_parts(474_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_110_000 picoseconds.
        Weight::from_parts(1_795_119, 0)
            // Standard Error: 19_568
            .saturating_add(Weight::from_parts(775_032, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_286_000 picoseconds.
        Weight::from_parts(8_982_386, 0)
            // Standard Error: 16_831
            .saturating_add(Weight::from_parts(5_556_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_095_000 picoseconds.
        Weight::from_parts(1_119_000, 0)
            // Standard Error: 16_263
            .saturating_add(Weight::from_parts(2_357_601, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_082_000 picoseconds.
        Weight::from_parts(1_149_000, 0)
            // Standard Error: 12_078
            .saturating_add(Weight::from_parts(2_239_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_111_000 picoseconds.
        Weight::from_parts(1_151_000, 0)
            // Standard Error: 11_080
            .saturating_add(Weight::from_parts(2_190_531, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_089_000 picoseconds.
        Weight::from_parts(1_131_000, 0)
            // Standard Error: 12_224
            .saturating_add(Weight::from_parts(2_090_099, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_120_000 picoseconds.
        Weight::from_parts(1_155_000, 0)
            // Standard Error: 3_151
            .saturating_add(Weight::from_parts(446_523, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_108_000 picoseconds.
        Weight::from_parts(141_933, 0)
            // Standard Error: 4_805
            .saturating_add(Weight::from_parts(349_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_083_000 picoseconds.
        Weight::from_parts(1_121_000, 0)
            // Standard Error: 6_652
            .saturating_add(Weight::from_parts(937_498, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_129_000 picoseconds.
        Weight::from_parts(1_196_000, 0)
            // Standard Error: 6_242
            .saturating_add(Weight::from_parts(649_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_152_000 picoseconds.
        Weight::from_parts(190_711, 0)
            // Standard Error: 4_034
            .saturating_add(Weight::from_parts(348_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_165_000 picoseconds.
        Weight::from_parts(184_103, 0)
            // Standard Error: 4_778
            .saturating_add(Weight::from_parts(364_529, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_148_000 picoseconds.
        Weight::from_parts(1_168_000, 0)
            // Standard Error: 7_111
            .saturating_add(Weight::from_parts(587_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_164_000 picoseconds.
        Weight::from_parts(1_195_000, 0)
            // Standard Error: 7_189
            .saturating_add(Weight::from_parts(586_641, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_081_000 picoseconds.
        Weight::from_parts(1_117_000, 0)
            // Standard Error: 2_923
            .saturating_add(Weight::from_parts(385_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_130_000 picoseconds.
        Weight::from_parts(962_136, 0)
            // Standard Error: 2_461
            .saturating_add(Weight::from_parts(279_085, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_077_000 picoseconds.
        Weight::from_parts(708_187, 0)
            // Standard Error: 2_331
            .saturating_add(Weight::from_parts(201_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_127_000 picoseconds.
        Weight::from_parts(106_450, 0)
            // Standard Error: 9_560
            .saturating_add(Weight::from_parts(298_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_182_000 picoseconds.
        Weight::from_parts(1_227_000, 0)
            // Standard Error: 16_706
            .saturating_add(Weight::from_parts(1_243_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_156_000, 0)
            // Standard Error: 7_053
            .saturating_add(Weight::from_parts(720_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_140_000 picoseconds.
        Weight::from_parts(1_158_000, 0)
            // Standard Error: 14_417
            .saturating_add(Weight::from_parts(1_193_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_128_000 picoseconds.
        Weight::from_parts(1_150_000, 0)
            // Standard Error: 5_892
            .saturating_add(Weight::from_parts(750_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_089_000 picoseconds.
        Weight::from_parts(1_145_000, 0)
            // Standard Error: 21_861
            .saturating_add(Weight::from_parts(1_735_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_108_000 picoseconds.
        Weight::from_parts(1_126_000, 0)
            // Standard Error: 13_927
            .saturating_add(Weight::from_parts(1_044_534, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_118_000 picoseconds.
        Weight::from_parts(1_147_000, 0)
            // Standard Error: 22_455
            .saturating_add(Weight::from_parts(1_717_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_098_000 picoseconds.
        Weight::from_parts(1_136_000, 0)
            // Standard Error: 16_197
            .saturating_add(Weight::from_parts(1_191_217, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_177_000 picoseconds.
        Weight::from_parts(1_197_000, 0)
            // Standard Error: 19_566
            .saturating_add(Weight::from_parts(1_944_855, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_080_000 picoseconds.
        Weight::from_parts(1_150_000, 0)
            // Standard Error: 9_130
            .saturating_add(Weight::from_parts(789_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_113_000 picoseconds.
        Weight::from_parts(1_130_000, 0)
            // Standard Error: 19_044
            .saturating_add(Weight::from_parts(1_274_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_067_000 picoseconds.
        Weight::from_parts(1_122_000, 0)
            // Standard Error: 11_027
            .saturating_add(Weight::from_parts(833_917, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_100_000 picoseconds.
        Weight::from_parts(1_161_000, 0)
            // Standard Error: 16_417
            .saturating_add(Weight::from_parts(1_161_099, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_097_000 picoseconds.
        Weight::from_parts(1_131_000, 0)
            // Standard Error: 10_483
            .saturating_add(Weight::from_parts(961_792, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_079_000 picoseconds.
        Weight::from_parts(1_138_000, 0)
            // Standard Error: 13_729
            .saturating_add(Weight::from_parts(1_003_154, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_077_000 picoseconds.
        Weight::from_parts(1_137_000, 0)
            // Standard Error: 8_449
            .saturating_add(Weight::from_parts(703_679, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_131_000 picoseconds.
        Weight::from_parts(1_159_000, 0)
            // Standard Error: 10_794
            .saturating_add(Weight::from_parts(936_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_135_000 picoseconds.
        Weight::from_parts(1_186_000, 0)
            // Standard Error: 15_411
            .saturating_add(Weight::from_parts(895_530, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_122_000 picoseconds.
        Weight::from_parts(1_161_000, 0)
            // Standard Error: 24_030
            .saturating_add(Weight::from_parts(1_412_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_075_000 picoseconds.
        Weight::from_parts(103_943, 0)
            // Standard Error: 3_443
            .saturating_add(Weight::from_parts(576_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(1_152_000, 0)
            // Standard Error: 18_327
            .saturating_add(Weight::from_parts(900_137, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_185_000 picoseconds.
        Weight::from_parts(1_202_000, 0)
            // Standard Error: 6_787
            .saturating_add(Weight::from_parts(459_590, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_125_000 picoseconds.
        Weight::from_parts(1_174_000, 0)
            // Standard Error: 8_483
            .saturating_add(Weight::from_parts(725_455, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_124_000 picoseconds.
        Weight::from_parts(1_140_000, 0)
            // Standard Error: 6_921
            .saturating_add(Weight::from_parts(455_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_089_000 picoseconds.
        Weight::from_parts(1_169_000, 0)
            // Standard Error: 5_640
            .saturating_add(Weight::from_parts(805_411, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_150_000 picoseconds.
        Weight::from_parts(1_196_000, 0)
            // Standard Error: 10_322
            .saturating_add(Weight::from_parts(678_272, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_067_000 picoseconds.
        Weight::from_parts(1_107_000, 0)
            // Standard Error: 21_579
            .saturating_add(Weight::from_parts(1_869_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_127_000 picoseconds.
        Weight::from_parts(1_159_000, 0)
            // Standard Error: 23_071
            .saturating_add(Weight::from_parts(1_949_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_057_000 picoseconds.
        Weight::from_parts(1_124_000, 0)
            // Standard Error: 19_681
            .saturating_add(Weight::from_parts(2_099_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_132_000 picoseconds.
        Weight::from_parts(1_206_000, 0)
            // Standard Error: 24_923
            .saturating_add(Weight::from_parts(2_303_572, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_095_000 picoseconds.
        Weight::from_parts(1_137_000, 0)
            // Standard Error: 86_269
            .saturating_add(Weight::from_parts(7_971_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_136_000 picoseconds.
        Weight::from_parts(1_184_000, 0)
            // Standard Error: 44_467
            .saturating_add(Weight::from_parts(4_437_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_118_000 picoseconds.
        Weight::from_parts(1_182_000, 0)
            // Standard Error: 29_993
            .saturating_add(Weight::from_parts(2_484_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_088_000 picoseconds.
        Weight::from_parts(1_140_000, 0)
            // Standard Error: 29_284
            .saturating_add(Weight::from_parts(1_921_271, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_116_000 picoseconds.
        Weight::from_parts(1_162_000, 0)
            // Standard Error: 20_917
            .saturating_add(Weight::from_parts(1_176_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_084_000 picoseconds.
        Weight::from_parts(1_110_000, 0)
            // Standard Error: 10_584
            .saturating_add(Weight::from_parts(600_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_139_000 picoseconds.
        Weight::from_parts(1_215_000, 0)
            // Standard Error: 19_982
            .saturating_add(Weight::from_parts(1_153_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_080_000 picoseconds.
        Weight::from_parts(1_112_000, 0)
            // Standard Error: 9_868
            .saturating_add(Weight::from_parts(613_307, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_087_000 picoseconds.
        Weight::from_parts(1_146_000, 0)
            // Standard Error: 21_205
            .saturating_add(Weight::from_parts(1_100_776, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_141_000 picoseconds.
        Weight::from_parts(1_179_000, 0)
            // Standard Error: 14_876
            .saturating_add(Weight::from_parts(888_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_131_000 picoseconds.
        Weight::from_parts(1_192_000, 0)
            // Standard Error: 10_653
            .saturating_add(Weight::from_parts(1_108_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_153_000 picoseconds.
        Weight::from_parts(1_192_000, 0)
            // Standard Error: 9_187
            .saturating_add(Weight::from_parts(616_945, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_063_000 picoseconds.
        Weight::from_parts(1_112_000, 0)
            // Standard Error: 12_897
            .saturating_add(Weight::from_parts(927_676, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_113_000 picoseconds.
        Weight::from_parts(1_180_000, 0)
            // Standard Error: 9_038
            .saturating_add(Weight::from_parts(558_882, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_139_000 picoseconds.
        Weight::from_parts(1_162_000, 0)
            // Standard Error: 16_661
            .saturating_add(Weight::from_parts(1_263_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_066_000 picoseconds.
        Weight::from_parts(1_119_000, 0)
            // Standard Error: 13_648
            .saturating_add(Weight::from_parts(720_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_086_000 picoseconds.
        Weight::from_parts(1_150_000, 0)
            // Standard Error: 18_500
            .saturating_add(Weight::from_parts(1_171_144, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_126_000 picoseconds.
        Weight::from_parts(1_199_000, 0)
            // Standard Error: 12_094
            .saturating_add(Weight::from_parts(752_250, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_120_000 picoseconds.
        Weight::from_parts(1_144_000, 0)
            // Standard Error: 8_965
            .saturating_add(Weight::from_parts(996_836, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_129_000 picoseconds.
        Weight::from_parts(1_166_000, 0)
            // Standard Error: 10_848
            .saturating_add(Weight::from_parts(770_048, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `6196`
        // Minimum execution time: 82_033_000 picoseconds.
        Weight::from_parts(87_508_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 49_625_000 picoseconds.
        Weight::from_parts(52_069_000, 4323)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `6196`
        // Minimum execution time: 93_970_000 picoseconds.
        Weight::from_parts(97_303_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 33_866_000 picoseconds.
        Weight::from_parts(35_425_000, 4159)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 49_893_000 picoseconds.
        Weight::from_parts(53_663_000, 4402)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_880_000 picoseconds.
        Weight::from_parts(4_069_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1565`
        //  Estimated: `7505`
        // Minimum execution time: 134_765_000 picoseconds.
        Weight::from_parts(139_166_000, 7505)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 108_281_000 picoseconds.
        Weight::from_parts(113_764_000, 7234)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
}
