// This file is part of Gear.

// Copyright (C) 2022-2024 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-04-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("vara-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=vara-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,free_range,free_range_per_page,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_env_vars,gr_gas_available,gr_message_id,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,reinstrument_per_kb,send_message,send_reply,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn free_range(r: u32, ) -> Weight;
    fn free_range_per_page(p: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_env_vars(r: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 65_333_000 picoseconds.
        Weight::from_parts(67_988_414, 2928)
            // Standard Error: 42_177
            .saturating_add(Weight::from_parts(34_587_476, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 65_346_000 picoseconds.
        Weight::from_parts(68_173_186, 2928)
            // Standard Error: 41_952
            .saturating_add(Weight::from_parts(37_502_718, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 66_964_000 picoseconds.
        Weight::from_parts(69_995_796, 2928)
            // Standard Error: 44_103
            .saturating_add(Weight::from_parts(32_281_442, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 66_729_000 picoseconds.
        Weight::from_parts(69_703_808, 2928)
            // Standard Error: 43_418
            .saturating_add(Weight::from_parts(32_943_462, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 691_445_000 picoseconds.
        Weight::from_parts(720_969_676, 2928)
            // Standard Error: 607_528
            .saturating_add(Weight::from_parts(26_687_606, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 688_820_000 picoseconds.
        Weight::from_parts(723_857_822, 2928)
            // Standard Error: 582_743
            .saturating_add(Weight::from_parts(18_750_150, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 79_496_000 picoseconds.
        Weight::from_parts(82_769_838, 2928)
            // Standard Error: 43_765
            .saturating_add(Weight::from_parts(25_825_214, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 80_105_000 picoseconds.
        Weight::from_parts(83_473_604, 2928)
            // Standard Error: 42_356
            .saturating_add(Weight::from_parts(19_558_068, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 66_580_000 picoseconds.
        Weight::from_parts(69_642_692, 2928)
            // Standard Error: 45_837
            .saturating_add(Weight::from_parts(27_618_926, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_347_000 picoseconds.
        Weight::from_parts(68_258_890, 0)
            // Standard Error: 42_836
            .saturating_add(Weight::from_parts(12_314_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_746_000 picoseconds.
        Weight::from_parts(70_610_706, 0)
            // Standard Error: 42_368
            .saturating_add(Weight::from_parts(8_973_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_451_000 picoseconds.
        Weight::from_parts(71_106_630, 0)
            // Standard Error: 43_942
            .saturating_add(Weight::from_parts(10_726_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_892_000 picoseconds.
        Weight::from_parts(70_960_368, 0)
            // Standard Error: 46_196
            .saturating_add(Weight::from_parts(11_342_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 997_000 picoseconds.
        Weight::from_parts(1_038_000, 0)
            // Standard Error: 724
            .saturating_add(Weight::from_parts(245_991, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_244_000 picoseconds.
        Weight::from_parts(3_319_000, 3610)
            // Standard Error: 903
            .saturating_add(Weight::from_parts(585_591, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 36_468_000 picoseconds.
        Weight::from_parts(37_341_661, 0)
            // Standard Error: 2_421
            .saturating_add(Weight::from_parts(257_037, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1321`
        //  Estimated: `8799`
        // Minimum execution time: 148_476_000 picoseconds.
        Weight::from_parts(150_051_000, 8799)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 93_537_000 picoseconds.
        Weight::from_parts(83_083_241, 3578)
            // Standard Error: 44_088
            .saturating_add(Weight::from_parts(62_850_384, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `991`
        //  Estimated: `4456`
        // Minimum execution time: 133_853_000 picoseconds.
        Weight::from_parts(173_519_318, 4456)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_186, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 9_359_218_000 picoseconds.
        Weight::from_parts(348_594_056, 3844)
            // Standard Error: 115_321
            .saturating_add(Weight::from_parts(64_612_806, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_131, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480`
        //  Estimated: `6196`
        // Minimum execution time: 111_200_000 picoseconds.
        Weight::from_parts(87_800_742, 6196)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(869, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1320`
        //  Estimated: `8799`
        // Minimum execution time: 176_654_000 picoseconds.
        Weight::from_parts(158_570_906, 8799)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(891, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 73_574_000 picoseconds.
        Weight::from_parts(73_878_000, 3682)
            // Standard Error: 27_314
            .saturating_add(Weight::from_parts(62_681_309, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_643_000 picoseconds.
        Weight::from_parts(61_158_000, 0)
            // Standard Error: 2_533_910
            .saturating_add(Weight::from_parts(765_733_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 606_556_000 picoseconds.
        Weight::from_parts(593_409_721, 0)
            // Standard Error: 7_297
            .saturating_add(Weight::from_parts(20_675_263, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 171_996_000 picoseconds.
        Weight::from_parts(176_745_360, 0)
            // Standard Error: 95_674
            .saturating_add(Weight::from_parts(51_009_389, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 171_639_000 picoseconds.
        Weight::from_parts(170_207_341, 0)
            // Standard Error: 100_631
            .saturating_add(Weight::from_parts(62_334_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 244_480_000 picoseconds.
        Weight::from_parts(234_715_178, 0)
            // Standard Error: 56_694
            .saturating_add(Weight::from_parts(4_877_532, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 71_323_000 picoseconds.
        Weight::from_parts(90_693_415, 3606)
            // Standard Error: 3_258
            .saturating_add(Weight::from_parts(2_274_859, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `6081`
        // Minimum execution time: 110_020_000 picoseconds.
        Weight::from_parts(137_744_075, 6081)
            // Standard Error: 4_501
            .saturating_add(Weight::from_parts(2_010_881, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_561_000 picoseconds.
        Weight::from_parts(93_827_757, 3606)
            // Standard Error: 192_415
            .saturating_add(Weight::from_parts(86_227_713, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 69_786_000 picoseconds.
        Weight::from_parts(97_322_998, 3606)
            // Standard Error: 157_080
            .saturating_add(Weight::from_parts(74_871_337, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 69_251_000 picoseconds.
        Weight::from_parts(93_102_796, 3606)
            // Standard Error: 88_752
            .saturating_add(Weight::from_parts(74_951_528, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_049_000 picoseconds.
        Weight::from_parts(93_030_381, 3606)
            // Standard Error: 82_950
            .saturating_add(Weight::from_parts(74_997_001, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 71_069_000 picoseconds.
        Weight::from_parts(92_333_283, 3606)
            // Standard Error: 75_651
            .saturating_add(Weight::from_parts(76_141_814, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 71_194_000 picoseconds.
        Weight::from_parts(91_553_017, 3606)
            // Standard Error: 75_916
            .saturating_add(Weight::from_parts(75_722_716, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_311_000 picoseconds.
        Weight::from_parts(90_850_139, 3606)
            // Standard Error: 105_494
            .saturating_add(Weight::from_parts(75_057_043, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_007_000 picoseconds.
        Weight::from_parts(90_227_777, 3606)
            // Standard Error: 70_793
            .saturating_add(Weight::from_parts(74_154_866, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 687_266_000 picoseconds.
        Weight::from_parts(697_704_012, 3606)
            // Standard Error: 266_348
            .saturating_add(Weight::from_parts(137_014_093, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 902_415_000 picoseconds.
        Weight::from_parts(917_114_000, 2529)
            // Standard Error: 61_369
            .saturating_add(Weight::from_parts(13_922_974, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 72_144_000 picoseconds.
        Weight::from_parts(96_882_424, 3606)
            // Standard Error: 193_324
            .saturating_add(Weight::from_parts(86_414_599, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 71_482_000 picoseconds.
        Weight::from_parts(96_037_681, 3606)
            // Standard Error: 91_084
            .saturating_add(Weight::from_parts(73_690_777, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 71_897_000 picoseconds.
        Weight::from_parts(93_821_429, 3606)
            // Standard Error: 70_604
            .saturating_add(Weight::from_parts(74_270_621, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_473_000 picoseconds.
        Weight::from_parts(92_957_942, 3606)
            // Standard Error: 128_036
            .saturating_add(Weight::from_parts(153_555_545, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 73_536_000 picoseconds.
        Weight::from_parts(75_621_000, 3606)
            // Standard Error: 3_887_183
            .saturating_add(Weight::from_parts(762_239_118, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 73_253_000 picoseconds.
        Weight::from_parts(95_005_751, 3606)
            // Standard Error: 217_127
            .saturating_add(Weight::from_parts(256_868_654, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 323_142_000 picoseconds.
        Weight::from_parts(326_422_000, 2529)
            // Standard Error: 45_999
            .saturating_add(Weight::from_parts(31_548_200, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 73_187_000 picoseconds.
        Weight::from_parts(87_302_092, 3606)
            // Standard Error: 199_690
            .saturating_add(Weight::from_parts(261_523_413, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 334_453_000 picoseconds.
        Weight::from_parts(336_884_000, 2529)
            // Standard Error: 56_884
            .saturating_add(Weight::from_parts(31_673_090, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 689_229_000 picoseconds.
        Weight::from_parts(735_256_962, 3606)
            // Standard Error: 332_803
            .saturating_add(Weight::from_parts(246_365_888, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 696_072_000 picoseconds.
        Weight::from_parts(723_910_661, 3606)
            // Standard Error: 321_056
            .saturating_add(Weight::from_parts(253_706_859, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 73_126_000 picoseconds.
        Weight::from_parts(90_745_491, 3606)
            // Standard Error: 73_433
            .saturating_add(Weight::from_parts(82_514_784, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 1_708_842_000 picoseconds.
        Weight::from_parts(1_760_202_546, 3606)
            // Standard Error: 182_243
            .saturating_add(Weight::from_parts(156_003_422, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 281_010_000 picoseconds.
        Weight::from_parts(284_680_000, 2529)
            // Standard Error: 44_211
            .saturating_add(Weight::from_parts(31_071_322, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 1_705_016_000 picoseconds.
        Weight::from_parts(1_735_181_674, 3606)
            // Standard Error: 253_543
            .saturating_add(Weight::from_parts(216_933_002, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 1_717_943_000 picoseconds.
        Weight::from_parts(1_754_382_359, 3606)
            // Standard Error: 288_946
            .saturating_add(Weight::from_parts(217_717_225, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5234 + r * (905 ±7)`
        // Minimum execution time: 147_386_000 picoseconds.
        Weight::from_parts(189_188_330, 5234)
            // Standard Error: 190_849
            .saturating_add(Weight::from_parts(273_353_517, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 905).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `6944 + n * (155 ±0)`
        // Minimum execution time: 429_587_000 picoseconds.
        Weight::from_parts(433_286_000, 6944)
            // Standard Error: 46_703
            .saturating_add(Weight::from_parts(31_588_038, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `7356 + r * (932 ±6)`
        // Minimum execution time: 1_792_232_000 picoseconds.
        Weight::from_parts(1_859_659_861, 7356)
            // Standard Error: 234_874
            .saturating_add(Weight::from_parts(234_750_159, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(Weight::from_parts(0, 932).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 102_272_000 picoseconds.
        Weight::from_parts(94_902_016, 2529)
            // Standard Error: 1_222
            .saturating_add(Weight::from_parts(682_456, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 97_881_000 picoseconds.
        Weight::from_parts(89_084_360, 2529)
            // Standard Error: 1_022
            .saturating_add(Weight::from_parts(679_357, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 69_346_000 picoseconds.
        Weight::from_parts(105_223_688, 3606)
            // Standard Error: 147_546
            .saturating_add(Weight::from_parts(135_840_113, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2439 + n * (155 ±0)`
        // Minimum execution time: 95_524_000 picoseconds.
        Weight::from_parts(98_003_000, 2439)
            // Standard Error: 2_548
            .saturating_add(Weight::from_parts(804_777, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 101_437_000 picoseconds.
        Weight::from_parts(94_007_255, 2529)
            // Standard Error: 963
            .saturating_add(Weight::from_parts(682_811, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 98_549_000 picoseconds.
        Weight::from_parts(88_141_064, 2529)
            // Standard Error: 1_460
            .saturating_add(Weight::from_parts(692_866, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 68_549_000 picoseconds.
        Weight::from_parts(94_759_768, 3606)
            // Standard Error: 83_973
            .saturating_add(Weight::from_parts(76_406_334, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_369_000 picoseconds.
        Weight::from_parts(95_182_434, 3606)
            // Standard Error: 88_518
            .saturating_add(Weight::from_parts(73_402_323, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 68_585_000 picoseconds.
        Weight::from_parts(97_468_043, 3606)
            // Standard Error: 86_697
            .saturating_add(Weight::from_parts(75_563_118, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 705_033_000 picoseconds.
        Weight::from_parts(816_021_845, 3606)
            // Standard Error: 331_512
            .saturating_add(Weight::from_parts(96_623_478, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 725_095_000 picoseconds.
        Weight::from_parts(800_973_772, 3606)
            // Standard Error: 2_522
            .saturating_add(Weight::from_parts(153_993, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 2_353_769_000 picoseconds.
        Weight::from_parts(2_469_997_038, 3606)
            // Standard Error: 406_886
            .saturating_add(Weight::from_parts(120_018_121, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 2_470_531_000 picoseconds.
        Weight::from_parts(2_456_164_041, 3606)
            // Standard Error: 12_519
            .saturating_add(Weight::from_parts(13_778_896, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 74_658_000 picoseconds.
        Weight::from_parts(99_428_004, 3606)
            // Standard Error: 137_772
            .saturating_add(Weight::from_parts(100_854_175, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2439 + n * (155 ±0)`
        // Minimum execution time: 130_071_000 picoseconds.
        Weight::from_parts(131_414_000, 2439)
            // Standard Error: 42_151
            .saturating_add(Weight::from_parts(25_374_968, 0).saturating_mul(n.into()))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_696_000 picoseconds.
        Weight::from_parts(97_249_473, 3606)
            // Standard Error: 81_750
            .saturating_add(Weight::from_parts(73_789_612, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5160 + r * (351 ±5)`
        // Minimum execution time: 110_834_000 picoseconds.
        Weight::from_parts(112_571_000, 5160)
            // Standard Error: 1_623_647
            .saturating_add(Weight::from_parts(282_225_925, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 351).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 83_313_000 picoseconds.
        Weight::from_parts(82_352_264, 3606)
            // Standard Error: 241_917
            .saturating_add(Weight::from_parts(328_932_094, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2709 + p * (155 ±0) + s * (155 ±0)`
        // Minimum execution time: 43_315_506_000 picoseconds.
        Weight::from_parts(43_478_894_000, 2709)
            // Standard Error: 273_419
            .saturating_add(Weight::from_parts(8_463_354, 0).saturating_mul(p.into()))
            // Standard Error: 273_405
            .saturating_add(Weight::from_parts(153_279_684, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(p.into()))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 84_865_000 picoseconds.
        Weight::from_parts(93_415_461, 3606)
            // Standard Error: 243_567
            .saturating_add(Weight::from_parts(334_180_778, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2709 + p * (155 ±0) + s * (155 ±0)`
        // Minimum execution time: 45_283_319_000 picoseconds.
        Weight::from_parts(46_014_374_000, 2709)
            // Standard Error: 265_136
            .saturating_add(Weight::from_parts(6_812_006, 0).saturating_mul(p.into()))
            // Standard Error: 265_123
            .saturating_add(Weight::from_parts(152_754_020, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(p.into()))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 72_261_000 picoseconds.
        Weight::from_parts(109_468_675, 1131)
            // Standard Error: 19_593
            .saturating_add(Weight::from_parts(15_279_005, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 70_557_000 picoseconds.
        Weight::from_parts(72_858_000, 1131)
            // Standard Error: 41_286
            .saturating_add(Weight::from_parts(40_800_090, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_008_058_000 picoseconds.
        Weight::from_parts(7_617_347_768, 5069931)
            // Standard Error: 82_417
            .saturating_add(Weight::from_parts(41_945_750, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 71_362_000 picoseconds.
        Weight::from_parts(72_830_000, 1946)
            // Standard Error: 27_867
            .saturating_add(Weight::from_parts(56_125_072, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 76_389_000 picoseconds.
        Weight::from_parts(78_268_752, 1131)
            // Standard Error: 64_523
            .saturating_add(Weight::from_parts(40_826_876, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 737_721_000 picoseconds.
        Weight::from_parts(748_770_314, 1496)
            // Standard Error: 265_545
            .saturating_add(Weight::from_parts(48_104_009, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_215_748_000 picoseconds.
        Weight::from_parts(1_200_049_357, 317931)
            // Standard Error: 246_215
            .saturating_add(Weight::from_parts(52_037_885, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_382_000 picoseconds.
        Weight::from_parts(5_903_764, 0)
            // Standard Error: 82_080
            .saturating_add(Weight::from_parts(91_323_319, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_574_751_000 picoseconds.
        Weight::from_parts(4_617_371_176, 0)
            // Standard Error: 14_642
            .saturating_add(Weight::from_parts(3_326_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_571_472_000 picoseconds.
        Weight::from_parts(4_631_738_329, 0)
            // Standard Error: 15_155
            .saturating_add(Weight::from_parts(3_271_958, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_396_318_000 picoseconds.
        Weight::from_parts(11_710_399_218, 0)
            // Standard Error: 147_623
            .saturating_add(Weight::from_parts(6_210_838, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_692_861_000 picoseconds.
        Weight::from_parts(11_381_813_001, 0)
            // Standard Error: 195_264
            .saturating_add(Weight::from_parts(6_489_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_269_000 picoseconds.
        Weight::from_parts(1_334_000, 0)
            // Standard Error: 23_179
            .saturating_add(Weight::from_parts(2_512_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_249_000 picoseconds.
        Weight::from_parts(1_297_000, 0)
            // Standard Error: 11_223
            .saturating_add(Weight::from_parts(2_095_486, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_248_000 picoseconds.
        Weight::from_parts(381_537, 0)
            // Standard Error: 2_074
            .saturating_add(Weight::from_parts(1_580_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_258_000 picoseconds.
        Weight::from_parts(1_295_000, 0)
            // Standard Error: 4_907
            .saturating_add(Weight::from_parts(1_880_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_232_000 picoseconds.
        Weight::from_parts(1_311_000, 0)
            // Standard Error: 19_123
            .saturating_add(Weight::from_parts(3_949_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_830_000 picoseconds.
        Weight::from_parts(4_908_928, 0)
            // Standard Error: 892
            .saturating_add(Weight::from_parts(54_337, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_248_000 picoseconds.
        Weight::from_parts(1_399_183, 0)
            // Standard Error: 5_632
            .saturating_add(Weight::from_parts(2_441_322, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_441_322 -
            2_293_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_201_000 picoseconds.
        Weight::from_parts(1_047_147, 0)
            // Standard Error: 11_848
            .saturating_add(Weight::from_parts(2_293_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_271_000 picoseconds.
        Weight::from_parts(1_354_000, 0)
            // Standard Error: 34_296
            .saturating_add(Weight::from_parts(8_355_214, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_263_000 picoseconds.
        Weight::from_parts(3_356_149, 0)
            // Standard Error: 3_212
            .saturating_add(Weight::from_parts(536_812, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_559_000 picoseconds.
        Weight::from_parts(2_759_878, 0)
            // Standard Error: 18
            .saturating_add(Weight::from_parts(106, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_611_000 picoseconds.
        Weight::from_parts(6_903_269, 0)
            // Standard Error: 2_899
            .saturating_add(Weight::from_parts(351_015, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_671_000 picoseconds.
        Weight::from_parts(6_897_608, 0)
            // Standard Error: 4_123
            .saturating_add(Weight::from_parts(776_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_603_000 picoseconds.
        Weight::from_parts(7_943_746, 0)
            // Standard Error: 5_611
            .saturating_add(Weight::from_parts(748_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_169_000 picoseconds.
        Weight::from_parts(5_291_962, 0)
            // Standard Error: 3_016
            .saturating_add(Weight::from_parts(343_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_272_000 picoseconds.
        Weight::from_parts(4_419_810, 0)
            // Standard Error: 6_168
            .saturating_add(Weight::from_parts(591_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_130_000 picoseconds.
        Weight::from_parts(8_316_388, 0)
            // Standard Error: 2_860
            .saturating_add(Weight::from_parts(5_923_618, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_173_000 picoseconds.
        Weight::from_parts(1_259_000, 0)
            // Standard Error: 9_006
            .saturating_add(Weight::from_parts(2_143_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_231_000 picoseconds.
        Weight::from_parts(1_264_000, 0)
            // Standard Error: 8_032
            .saturating_add(Weight::from_parts(2_036_123, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_234_000 picoseconds.
        Weight::from_parts(1_323_000, 0)
            // Standard Error: 10_641
            .saturating_add(Weight::from_parts(2_028_042, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_209_000 picoseconds.
        Weight::from_parts(2_624_863, 0)
            // Standard Error: 6_218
            .saturating_add(Weight::from_parts(1_859_374, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_229_000 picoseconds.
        Weight::from_parts(1_821_782, 0)
            // Standard Error: 3_681
            .saturating_add(Weight::from_parts(356_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_214_000 picoseconds.
        Weight::from_parts(1_364_147, 0)
            // Standard Error: 1_721
            .saturating_add(Weight::from_parts(269_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_192_000 picoseconds.
        Weight::from_parts(1_267_000, 0)
            // Standard Error: 10_439
            .saturating_add(Weight::from_parts(868_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_197_000 picoseconds.
        Weight::from_parts(214_060, 0)
            // Standard Error: 10_146
            .saturating_add(Weight::from_parts(674_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_153_000 picoseconds.
        Weight::from_parts(1_705_921, 0)
            // Standard Error: 3_159
            .saturating_add(Weight::from_parts(274_168, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_258_000 picoseconds.
        Weight::from_parts(1_216_717, 0)
            // Standard Error: 2_219
            .saturating_add(Weight::from_parts(276_233, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_240_000 picoseconds.
        Weight::from_parts(1_220_142, 0)
            // Standard Error: 3_181
            .saturating_add(Weight::from_parts(368_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_252_000 picoseconds.
        Weight::from_parts(1_325_091, 0)
            // Standard Error: 2_650
            .saturating_add(Weight::from_parts(348_119, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_260_000 picoseconds.
        Weight::from_parts(1_802_129, 0)
            // Standard Error: 3_981
            .saturating_add(Weight::from_parts(317_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_217_000 picoseconds.
        Weight::from_parts(1_235_116, 0)
            // Standard Error: 1_372
            .saturating_add(Weight::from_parts(255_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_184_000 picoseconds.
        Weight::from_parts(1_452_735, 0)
            // Standard Error: 2_135
            .saturating_add(Weight::from_parts(161_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_232_000 picoseconds.
        Weight::from_parts(1_093_998, 0)
            // Standard Error: 3_498
            .saturating_add(Weight::from_parts(189_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_242_000 picoseconds.
        Weight::from_parts(1_307_000, 0)
            // Standard Error: 17_863
            .saturating_add(Weight::from_parts(1_034_469, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_221_000 picoseconds.
        Weight::from_parts(1_295_000, 0)
            // Standard Error: 12_127
            .saturating_add(Weight::from_parts(741_439, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_219_000 picoseconds.
        Weight::from_parts(1_264_000, 0)
            // Standard Error: 25_407
            .saturating_add(Weight::from_parts(1_515_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_193_000 picoseconds.
        Weight::from_parts(1_252_000, 0)
            // Standard Error: 21_370
            .saturating_add(Weight::from_parts(1_289_596, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_173_000 picoseconds.
        Weight::from_parts(1_270_000, 0)
            // Standard Error: 21_998
            .saturating_add(Weight::from_parts(1_313_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_214_000 picoseconds.
        Weight::from_parts(1_266_000, 0)
            // Standard Error: 12_624
            .saturating_add(Weight::from_parts(851_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_263_000 picoseconds.
        Weight::from_parts(1_313_000, 0)
            // Standard Error: 25_048
            .saturating_add(Weight::from_parts(1_469_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_102_000 picoseconds.
        Weight::from_parts(1_240_000, 0)
            // Standard Error: 9_652
            .saturating_add(Weight::from_parts(669_519, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_160_000 picoseconds.
        Weight::from_parts(1_267_000, 0)
            // Standard Error: 20_915
            .saturating_add(Weight::from_parts(1_081_039, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_213_000 picoseconds.
        Weight::from_parts(1_308_000, 0)
            // Standard Error: 9_645
            .saturating_add(Weight::from_parts(726_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_231_000 picoseconds.
        Weight::from_parts(1_291_000, 0)
            // Standard Error: 25_112
            .saturating_add(Weight::from_parts(1_151_325, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_254_000 picoseconds.
        Weight::from_parts(1_320_000, 0)
            // Standard Error: 21_949
            .saturating_add(Weight::from_parts(1_246_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_240_000 picoseconds.
        Weight::from_parts(1_293_000, 0)
            // Standard Error: 25_229
            .saturating_add(Weight::from_parts(1_357_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_204_000 picoseconds.
        Weight::from_parts(1_294_000, 0)
            // Standard Error: 8_945
            .saturating_add(Weight::from_parts(644_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(1_256_000, 0)
            // Standard Error: 26_375
            .saturating_add(Weight::from_parts(1_405_047, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_269_000 picoseconds.
        Weight::from_parts(1_290_000, 0)
            // Standard Error: 8_339
            .saturating_add(Weight::from_parts(641_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_232_000 picoseconds.
        Weight::from_parts(1_279_000, 0)
            // Standard Error: 19_703
            .saturating_add(Weight::from_parts(1_070_535, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_155_000 picoseconds.
        Weight::from_parts(1_396_375, 0)
            // Standard Error: 6_754
            .saturating_add(Weight::from_parts(593_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_160_000 picoseconds.
        Weight::from_parts(1_004_806, 0)
            // Standard Error: 12_723
            .saturating_add(Weight::from_parts(853_453, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_206_000 picoseconds.
        Weight::from_parts(554_893, 0)
            // Standard Error: 8_600
            .saturating_add(Weight::from_parts(616_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_237_000 picoseconds.
        Weight::from_parts(1_284_000, 0)
            // Standard Error: 10_362
            .saturating_add(Weight::from_parts(717_734, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_255_000 picoseconds.
        Weight::from_parts(1_305_000, 0)
            // Standard Error: 6_505
            .saturating_add(Weight::from_parts(487_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_188_000 picoseconds.
        Weight::from_parts(1_265_000, 0)
            // Standard Error: 10_860
            .saturating_add(Weight::from_parts(818_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_248_000 picoseconds.
        Weight::from_parts(1_301_000, 0)
            // Standard Error: 5_582
            .saturating_add(Weight::from_parts(498_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_176_000 picoseconds.
        Weight::from_parts(1_257_000, 0)
            // Standard Error: 12_147
            .saturating_add(Weight::from_parts(970_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_304_000 picoseconds.
        Weight::from_parts(1_324_000, 0)
            // Standard Error: 12_924
            .saturating_add(Weight::from_parts(707_061, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_206_000 picoseconds.
        Weight::from_parts(1_785_432, 0)
            // Standard Error: 5_510
            .saturating_add(Weight::from_parts(1_528_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_283_000 picoseconds.
        Weight::from_parts(1_311_661, 0)
            // Standard Error: 10_354
            .saturating_add(Weight::from_parts(1_265_583, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_167_000 picoseconds.
        Weight::from_parts(1_012_798, 0)
            // Standard Error: 9_507
            .saturating_add(Weight::from_parts(1_597_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_224_000 picoseconds.
        Weight::from_parts(1_104_228, 0)
            // Standard Error: 14_966
            .saturating_add(Weight::from_parts(1_249_402, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_196_000 picoseconds.
        Weight::from_parts(1_260_000, 0)
            // Standard Error: 44_473
            .saturating_add(Weight::from_parts(5_535_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_197_000 picoseconds.
        Weight::from_parts(1_280_000, 0)
            // Standard Error: 32_628
            .saturating_add(Weight::from_parts(3_709_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_197_000 picoseconds.
        Weight::from_parts(1_285_000, 0)
            // Standard Error: 25_153
            .saturating_add(Weight::from_parts(2_125_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_174_000 picoseconds.
        Weight::from_parts(1_224_000, 0)
            // Standard Error: 11_463
            .saturating_add(Weight::from_parts(1_490_946, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_222_000 picoseconds.
        Weight::from_parts(1_315_000, 0)
            // Standard Error: 13_431
            .saturating_add(Weight::from_parts(757_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_230_000 picoseconds.
        Weight::from_parts(1_298_000, 0)
            // Standard Error: 9_287
            .saturating_add(Weight::from_parts(538_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_214_000 picoseconds.
        Weight::from_parts(1_261_000, 0)
            // Standard Error: 17_098
            .saturating_add(Weight::from_parts(959_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_252_000 picoseconds.
        Weight::from_parts(11_274, 0)
            // Standard Error: 8_681
            .saturating_add(Weight::from_parts(460_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_207_000 picoseconds.
        Weight::from_parts(1_291_000, 0)
            // Standard Error: 12_753
            .saturating_add(Weight::from_parts(760_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_202_000 picoseconds.
        Weight::from_parts(1_275_000, 0)
            // Standard Error: 10_556
            .saturating_add(Weight::from_parts(496_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_246_000 picoseconds.
        Weight::from_parts(1_270_000, 0)
            // Standard Error: 15_792
            .saturating_add(Weight::from_parts(773_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_229_000 picoseconds.
        Weight::from_parts(1_294_000, 0)
            // Standard Error: 6_738
            .saturating_add(Weight::from_parts(459_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_204_000 picoseconds.
        Weight::from_parts(1_245_000, 0)
            // Standard Error: 20_379
            .saturating_add(Weight::from_parts(833_353, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_235_000 picoseconds.
        Weight::from_parts(1_267_000, 0)
            // Standard Error: 5_813
            .saturating_add(Weight::from_parts(440_628, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_158_000 picoseconds.
        Weight::from_parts(1_295_000, 0)
            // Standard Error: 18_176
            .saturating_add(Weight::from_parts(939_619, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_201_000 picoseconds.
        Weight::from_parts(1_273_000, 0)
            // Standard Error: 8_288
            .saturating_add(Weight::from_parts(434_449, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_259_000 picoseconds.
        Weight::from_parts(1_309_000, 0)
            // Standard Error: 16_716
            .saturating_add(Weight::from_parts(915_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_198_000 picoseconds.
        Weight::from_parts(1_248_000, 0)
            // Standard Error: 6_583
            .saturating_add(Weight::from_parts(514_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(1_231_000, 0)
            // Standard Error: 13_918
            .saturating_add(Weight::from_parts(841_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_206_000 picoseconds.
        Weight::from_parts(49_187, 0)
            // Standard Error: 10_345
            .saturating_add(Weight::from_parts(485_166, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `6196`
        // Minimum execution time: 78_253_000 picoseconds.
        Weight::from_parts(81_204_000, 6196)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 46_786_000 picoseconds.
        Weight::from_parts(47_880_000, 4323)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `6196`
        // Minimum execution time: 93_719_000 picoseconds.
        Weight::from_parts(95_792_000, 6196)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 33_633_000 picoseconds.
        Weight::from_parts(34_991_000, 4159)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 51_032_000 picoseconds.
        Weight::from_parts(54_508_000, 4402)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 4_803_000 picoseconds.
        Weight::from_parts(5_242_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1565`
        //  Estimated: `7505`
        // Minimum execution time: 133_913_000 picoseconds.
        Weight::from_parts(137_511_000, 7505)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 109_042_000 picoseconds.
        Weight::from_parts(112_026_000, 7234)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 65_333_000 picoseconds.
        Weight::from_parts(67_988_414, 2928)
            // Standard Error: 42_177
            .saturating_add(Weight::from_parts(34_587_476, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 65_346_000 picoseconds.
        Weight::from_parts(68_173_186, 2928)
            // Standard Error: 41_952
            .saturating_add(Weight::from_parts(37_502_718, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 66_964_000 picoseconds.
        Weight::from_parts(69_995_796, 2928)
            // Standard Error: 44_103
            .saturating_add(Weight::from_parts(32_281_442, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 66_729_000 picoseconds.
        Weight::from_parts(69_703_808, 2928)
            // Standard Error: 43_418
            .saturating_add(Weight::from_parts(32_943_462, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 691_445_000 picoseconds.
        Weight::from_parts(720_969_676, 2928)
            // Standard Error: 607_528
            .saturating_add(Weight::from_parts(26_687_606, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 688_820_000 picoseconds.
        Weight::from_parts(723_857_822, 2928)
            // Standard Error: 582_743
            .saturating_add(Weight::from_parts(18_750_150, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 79_496_000 picoseconds.
        Weight::from_parts(82_769_838, 2928)
            // Standard Error: 43_765
            .saturating_add(Weight::from_parts(25_825_214, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 80_105_000 picoseconds.
        Weight::from_parts(83_473_604, 2928)
            // Standard Error: 42_356
            .saturating_add(Weight::from_parts(19_558_068, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + r * (141 ±0)`
        //  Estimated: `2928`
        // Minimum execution time: 66_580_000 picoseconds.
        Weight::from_parts(69_642_692, 2928)
            // Standard Error: 45_837
            .saturating_add(Weight::from_parts(27_618_926, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 65_347_000 picoseconds.
        Weight::from_parts(68_258_890, 0)
            // Standard Error: 42_836
            .saturating_add(Weight::from_parts(12_314_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_746_000 picoseconds.
        Weight::from_parts(70_610_706, 0)
            // Standard Error: 42_368
            .saturating_add(Weight::from_parts(8_973_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_451_000 picoseconds.
        Weight::from_parts(71_106_630, 0)
            // Standard Error: 43_942
            .saturating_add(Weight::from_parts(10_726_118, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 67_892_000 picoseconds.
        Weight::from_parts(70_960_368, 0)
            // Standard Error: 46_196
            .saturating_add(Weight::from_parts(11_342_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 997_000 picoseconds.
        Weight::from_parts(1_038_000, 0)
            // Standard Error: 724
            .saturating_add(Weight::from_parts(245_991, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `146 + c * (1024 ±0)`
        //  Estimated: `3610 + c * (1024 ±0)`
        // Minimum execution time: 3_244_000 picoseconds.
        Weight::from_parts(3_319_000, 3610)
            // Standard Error: 903
            .saturating_add(Weight::from_parts(585_591, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 36_468_000 picoseconds.
        Weight::from_parts(37_341_661, 0)
            // Standard Error: 2_421
            .saturating_add(Weight::from_parts(257_037, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1321`
        //  Estimated: `8799`
        // Minimum execution time: 148_476_000 picoseconds.
        Weight::from_parts(150_051_000, 8799)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113`
        //  Estimated: `3578`
        // Minimum execution time: 93_537_000 picoseconds.
        Weight::from_parts(83_083_241, 3578)
            // Standard Error: 44_088
            .saturating_add(Weight::from_parts(62_850_384, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `991`
        //  Estimated: `4456`
        // Minimum execution time: 133_853_000 picoseconds.
        Weight::from_parts(173_519_318, 4456)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_186, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379`
        //  Estimated: `3844`
        // Minimum execution time: 9_359_218_000 picoseconds.
        Weight::from_parts(348_594_056, 3844)
            // Standard Error: 115_321
            .saturating_add(Weight::from_parts(64_612_806, 0).saturating_mul(c.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_131, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480`
        //  Estimated: `6196`
        // Minimum execution time: 111_200_000 picoseconds.
        Weight::from_parts(87_800_742, 6196)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(869, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1320`
        //  Estimated: `8799`
        // Minimum execution time: 176_654_000 picoseconds.
        Weight::from_parts(158_570_906, 8799)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(891, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3682 + c * (1075 ±0)`
        // Minimum execution time: 73_574_000 picoseconds.
        Weight::from_parts(73_878_000, 3682)
            // Standard Error: 27_314
            .saturating_add(Weight::from_parts(62_681_309, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1075).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_643_000 picoseconds.
        Weight::from_parts(61_158_000, 0)
            // Standard Error: 2_533_910
            .saturating_add(Weight::from_parts(765_733_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 606_556_000 picoseconds.
        Weight::from_parts(593_409_721, 0)
            // Standard Error: 7_297
            .saturating_add(Weight::from_parts(20_675_263, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 171_996_000 picoseconds.
        Weight::from_parts(176_745_360, 0)
            // Standard Error: 95_674
            .saturating_add(Weight::from_parts(51_009_389, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free_range(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 171_639_000 picoseconds.
        Weight::from_parts(170_207_341, 0)
            // Standard Error: 100_631
            .saturating_add(Weight::from_parts(62_334_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 20]`.
    fn free_range_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 244_480_000 picoseconds.
        Weight::from_parts(234_715_178, 0)
            // Standard Error: 56_694
            .saturating_add(Weight::from_parts(4_877_532, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 71_323_000 picoseconds.
        Weight::from_parts(90_693_415, 3606)
            // Standard Error: 3_258
            .saturating_add(Weight::from_parts(2_274_859, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `6081`
        // Minimum execution time: 110_020_000 picoseconds.
        Weight::from_parts(137_744_075, 6081)
            // Standard Error: 4_501
            .saturating_add(Weight::from_parts(2_010_881, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_561_000 picoseconds.
        Weight::from_parts(93_827_757, 3606)
            // Standard Error: 192_415
            .saturating_add(Weight::from_parts(86_227_713, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 69_786_000 picoseconds.
        Weight::from_parts(97_322_998, 3606)
            // Standard Error: 157_080
            .saturating_add(Weight::from_parts(74_871_337, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 69_251_000 picoseconds.
        Weight::from_parts(93_102_796, 3606)
            // Standard Error: 88_752
            .saturating_add(Weight::from_parts(74_951_528, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_049_000 picoseconds.
        Weight::from_parts(93_030_381, 3606)
            // Standard Error: 82_950
            .saturating_add(Weight::from_parts(74_997_001, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 71_069_000 picoseconds.
        Weight::from_parts(92_333_283, 3606)
            // Standard Error: 75_651
            .saturating_add(Weight::from_parts(76_141_814, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 71_194_000 picoseconds.
        Weight::from_parts(91_553_017, 3606)
            // Standard Error: 75_916
            .saturating_add(Weight::from_parts(75_722_716, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_311_000 picoseconds.
        Weight::from_parts(90_850_139, 3606)
            // Standard Error: 105_494
            .saturating_add(Weight::from_parts(75_057_043, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_007_000 picoseconds.
        Weight::from_parts(90_227_777, 3606)
            // Standard Error: 70_793
            .saturating_add(Weight::from_parts(74_154_866, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 687_266_000 picoseconds.
        Weight::from_parts(697_704_012, 3606)
            // Standard Error: 266_348
            .saturating_add(Weight::from_parts(137_014_093, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 902_415_000 picoseconds.
        Weight::from_parts(917_114_000, 2529)
            // Standard Error: 61_369
            .saturating_add(Weight::from_parts(13_922_974, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_env_vars(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 72_144_000 picoseconds.
        Weight::from_parts(96_882_424, 3606)
            // Standard Error: 193_324
            .saturating_add(Weight::from_parts(86_414_599, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 71_482_000 picoseconds.
        Weight::from_parts(96_037_681, 3606)
            // Standard Error: 91_084
            .saturating_add(Weight::from_parts(73_690_777, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 71_897_000 picoseconds.
        Weight::from_parts(93_821_429, 3606)
            // Standard Error: 70_604
            .saturating_add(Weight::from_parts(74_270_621, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_473_000 picoseconds.
        Weight::from_parts(92_957_942, 3606)
            // Standard Error: 128_036
            .saturating_add(Weight::from_parts(153_555_545, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 73_536_000 picoseconds.
        Weight::from_parts(75_621_000, 3606)
            // Standard Error: 3_887_183
            .saturating_add(Weight::from_parts(762_239_118, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 73_253_000 picoseconds.
        Weight::from_parts(95_005_751, 3606)
            // Standard Error: 217_127
            .saturating_add(Weight::from_parts(256_868_654, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 323_142_000 picoseconds.
        Weight::from_parts(326_422_000, 2529)
            // Standard Error: 45_999
            .saturating_add(Weight::from_parts(31_548_200, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 73_187_000 picoseconds.
        Weight::from_parts(87_302_092, 3606)
            // Standard Error: 199_690
            .saturating_add(Weight::from_parts(261_523_413, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 334_453_000 picoseconds.
        Weight::from_parts(336_884_000, 2529)
            // Standard Error: 56_884
            .saturating_add(Weight::from_parts(31_673_090, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 689_229_000 picoseconds.
        Weight::from_parts(735_256_962, 3606)
            // Standard Error: 332_803
            .saturating_add(Weight::from_parts(246_365_888, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 696_072_000 picoseconds.
        Weight::from_parts(723_910_661, 3606)
            // Standard Error: 321_056
            .saturating_add(Weight::from_parts(253_706_859, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 73_126_000 picoseconds.
        Weight::from_parts(90_745_491, 3606)
            // Standard Error: 73_433
            .saturating_add(Weight::from_parts(82_514_784, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 1_708_842_000 picoseconds.
        Weight::from_parts(1_760_202_546, 3606)
            // Standard Error: 182_243
            .saturating_add(Weight::from_parts(156_003_422, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 281_010_000 picoseconds.
        Weight::from_parts(284_680_000, 2529)
            // Standard Error: 44_211
            .saturating_add(Weight::from_parts(31_071_322, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 1_705_016_000 picoseconds.
        Weight::from_parts(1_735_181_674, 3606)
            // Standard Error: 253_543
            .saturating_add(Weight::from_parts(216_933_002, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 1_717_943_000 picoseconds.
        Weight::from_parts(1_754_382_359, 3606)
            // Standard Error: 288_946
            .saturating_add(Weight::from_parts(217_717_225, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5234 + r * (905 ±7)`
        // Minimum execution time: 147_386_000 picoseconds.
        Weight::from_parts(189_188_330, 5234)
            // Standard Error: 190_849
            .saturating_add(Weight::from_parts(273_353_517, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 905).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `6944 + n * (155 ±0)`
        // Minimum execution time: 429_587_000 picoseconds.
        Weight::from_parts(433_286_000, 6944)
            // Standard Error: 46_703
            .saturating_add(Weight::from_parts(31_588_038, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `7356 + r * (932 ±6)`
        // Minimum execution time: 1_792_232_000 picoseconds.
        Weight::from_parts(1_859_659_861, 7356)
            // Standard Error: 234_874
            .saturating_add(Weight::from_parts(234_750_159, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(Weight::from_parts(0, 932).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 102_272_000 picoseconds.
        Weight::from_parts(94_902_016, 2529)
            // Standard Error: 1_222
            .saturating_add(Weight::from_parts(682_456, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 97_881_000 picoseconds.
        Weight::from_parts(89_084_360, 2529)
            // Standard Error: 1_022
            .saturating_add(Weight::from_parts(679_357, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 69_346_000 picoseconds.
        Weight::from_parts(105_223_688, 3606)
            // Standard Error: 147_546
            .saturating_add(Weight::from_parts(135_840_113, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2439 + n * (155 ±0)`
        // Minimum execution time: 95_524_000 picoseconds.
        Weight::from_parts(98_003_000, 2439)
            // Standard Error: 2_548
            .saturating_add(Weight::from_parts(804_777, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 101_437_000 picoseconds.
        Weight::from_parts(94_007_255, 2529)
            // Standard Error: 963
            .saturating_add(Weight::from_parts(682_811, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2529 + n * (155 ±0)`
        // Minimum execution time: 98_549_000 picoseconds.
        Weight::from_parts(88_141_064, 2529)
            // Standard Error: 1_460
            .saturating_add(Weight::from_parts(692_866, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 68_549_000 picoseconds.
        Weight::from_parts(94_759_768, 3606)
            // Standard Error: 83_973
            .saturating_add(Weight::from_parts(76_406_334, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_369_000 picoseconds.
        Weight::from_parts(95_182_434, 3606)
            // Standard Error: 88_518
            .saturating_add(Weight::from_parts(73_402_323, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 68_585_000 picoseconds.
        Weight::from_parts(97_468_043, 3606)
            // Standard Error: 86_697
            .saturating_add(Weight::from_parts(75_563_118, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 705_033_000 picoseconds.
        Weight::from_parts(816_021_845, 3606)
            // Standard Error: 331_512
            .saturating_add(Weight::from_parts(96_623_478, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 725_095_000 picoseconds.
        Weight::from_parts(800_973_772, 3606)
            // Standard Error: 2_522
            .saturating_add(Weight::from_parts(153_993, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 2_353_769_000 picoseconds.
        Weight::from_parts(2_469_997_038, 3606)
            // Standard Error: 406_886
            .saturating_add(Weight::from_parts(120_018_121, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 2_470_531_000 picoseconds.
        Weight::from_parts(2_456_164_041, 3606)
            // Standard Error: 12_519
            .saturating_add(Weight::from_parts(13_778_896, 0).saturating_mul(n.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 74_658_000 picoseconds.
        Weight::from_parts(99_428_004, 3606)
            // Standard Error: 137_772
            .saturating_add(Weight::from_parts(100_854_175, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2439 + n * (155 ±0)`
        // Minimum execution time: 130_071_000 picoseconds.
        Weight::from_parts(131_414_000, 2439)
            // Standard Error: 42_151
            .saturating_add(Weight::from_parts(25_374_968, 0).saturating_mul(n.into()))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 70_696_000 picoseconds.
        Weight::from_parts(97_249_473, 3606)
            // Standard Error: 81_750
            .saturating_add(Weight::from_parts(73_789_612, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5160 + r * (351 ±5)`
        // Minimum execution time: 110_834_000 picoseconds.
        Weight::from_parts(112_571_000, 5160)
            // Standard Error: 1_623_647
            .saturating_add(Weight::from_parts(282_225_925, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 351).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 83_313_000 picoseconds.
        Weight::from_parts(82_352_264, 3606)
            // Standard Error: 241_917
            .saturating_add(Weight::from_parts(328_932_094, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2709 + p * (155 ±0) + s * (155 ±0)`
        // Minimum execution time: 43_315_506_000 picoseconds.
        Weight::from_parts(43_478_894_000, 2709)
            // Standard Error: 273_419
            .saturating_add(Weight::from_parts(8_463_354, 0).saturating_mul(p.into()))
            // Standard Error: 273_405
            .saturating_add(Weight::from_parts(153_279_684, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(p.into()))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `3606`
        // Minimum execution time: 84_865_000 picoseconds.
        Weight::from_parts(93_415_461, 3606)
            // Standard Error: 243_567
            .saturating_add(Weight::from_parts(334_180_778, 0).saturating_mul(r.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `2709 + p * (155 ±0) + s * (155 ±0)`
        // Minimum execution time: 45_283_319_000 picoseconds.
        Weight::from_parts(46_014_374_000, 2709)
            // Standard Error: 265_136
            .saturating_add(Weight::from_parts(6_812_006, 0).saturating_mul(p.into()))
            // Standard Error: 265_123
            .saturating_add(Weight::from_parts(152_754_020, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(p.into()))
            .saturating_add(Weight::from_parts(0, 155).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 72_261_000 picoseconds.
        Weight::from_parts(109_468_675, 1131)
            // Standard Error: 19_593
            .saturating_add(Weight::from_parts(15_279_005, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 70_557_000 picoseconds.
        Weight::from_parts(72_858_000, 1131)
            // Standard Error: 41_286
            .saturating_add(Weight::from_parts(40_800_090, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_008_058_000 picoseconds.
        Weight::from_parts(7_617_347_768, 5069931)
            // Standard Error: 82_417
            .saturating_add(Weight::from_parts(41_945_750, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1820 + p * (65580 ±0)`
        //  Estimated: `1946 + p * (75482 ±0)`
        // Minimum execution time: 71_362_000 picoseconds.
        Weight::from_parts(72_830_000, 1946)
            // Standard Error: 27_867
            .saturating_add(Weight::from_parts(56_125_072, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 76_389_000 picoseconds.
        Weight::from_parts(78_268_752, 1131)
            // Standard Error: 64_523
            .saturating_add(Weight::from_parts(40_826_876, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 737_721_000 picoseconds.
        Weight::from_parts(748_770_314, 1496)
            // Standard Error: 265_545
            .saturating_add(Weight::from_parts(48_104_009, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_215_748_000 picoseconds.
        Weight::from_parts(1_200_049_357, 317931)
            // Standard Error: 246_215
            .saturating_add(Weight::from_parts(52_037_885, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_382_000 picoseconds.
        Weight::from_parts(5_903_764, 0)
            // Standard Error: 82_080
            .saturating_add(Weight::from_parts(91_323_319, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_574_751_000 picoseconds.
        Weight::from_parts(4_617_371_176, 0)
            // Standard Error: 14_642
            .saturating_add(Weight::from_parts(3_326_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_571_472_000 picoseconds.
        Weight::from_parts(4_631_738_329, 0)
            // Standard Error: 15_155
            .saturating_add(Weight::from_parts(3_271_958, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_396_318_000 picoseconds.
        Weight::from_parts(11_710_399_218, 0)
            // Standard Error: 147_623
            .saturating_add(Weight::from_parts(6_210_838, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_692_861_000 picoseconds.
        Weight::from_parts(11_381_813_001, 0)
            // Standard Error: 195_264
            .saturating_add(Weight::from_parts(6_489_058, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_269_000 picoseconds.
        Weight::from_parts(1_334_000, 0)
            // Standard Error: 23_179
            .saturating_add(Weight::from_parts(2_512_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_249_000 picoseconds.
        Weight::from_parts(1_297_000, 0)
            // Standard Error: 11_223
            .saturating_add(Weight::from_parts(2_095_486, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_248_000 picoseconds.
        Weight::from_parts(381_537, 0)
            // Standard Error: 2_074
            .saturating_add(Weight::from_parts(1_580_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_258_000 picoseconds.
        Weight::from_parts(1_295_000, 0)
            // Standard Error: 4_907
            .saturating_add(Weight::from_parts(1_880_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_232_000 picoseconds.
        Weight::from_parts(1_311_000, 0)
            // Standard Error: 19_123
            .saturating_add(Weight::from_parts(3_949_185, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_830_000 picoseconds.
        Weight::from_parts(4_908_928, 0)
            // Standard Error: 892
            .saturating_add(Weight::from_parts(54_337, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_248_000 picoseconds.
        Weight::from_parts(1_399_183, 0)
            // Standard Error: 5_632
            .saturating_add(Weight::from_parts(2_441_322, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_441_322 -
            2_293_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_201_000 picoseconds.
        Weight::from_parts(1_047_147, 0)
            // Standard Error: 11_848
            .saturating_add(Weight::from_parts(2_293_609, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_271_000 picoseconds.
        Weight::from_parts(1_354_000, 0)
            // Standard Error: 34_296
            .saturating_add(Weight::from_parts(8_355_214, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_263_000 picoseconds.
        Weight::from_parts(3_356_149, 0)
            // Standard Error: 3_212
            .saturating_add(Weight::from_parts(536_812, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_559_000 picoseconds.
        Weight::from_parts(2_759_878, 0)
            // Standard Error: 18
            .saturating_add(Weight::from_parts(106, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_611_000 picoseconds.
        Weight::from_parts(6_903_269, 0)
            // Standard Error: 2_899
            .saturating_add(Weight::from_parts(351_015, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_671_000 picoseconds.
        Weight::from_parts(6_897_608, 0)
            // Standard Error: 4_123
            .saturating_add(Weight::from_parts(776_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_603_000 picoseconds.
        Weight::from_parts(7_943_746, 0)
            // Standard Error: 5_611
            .saturating_add(Weight::from_parts(748_873, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_169_000 picoseconds.
        Weight::from_parts(5_291_962, 0)
            // Standard Error: 3_016
            .saturating_add(Weight::from_parts(343_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_272_000 picoseconds.
        Weight::from_parts(4_419_810, 0)
            // Standard Error: 6_168
            .saturating_add(Weight::from_parts(591_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_130_000 picoseconds.
        Weight::from_parts(8_316_388, 0)
            // Standard Error: 2_860
            .saturating_add(Weight::from_parts(5_923_618, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_173_000 picoseconds.
        Weight::from_parts(1_259_000, 0)
            // Standard Error: 9_006
            .saturating_add(Weight::from_parts(2_143_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_231_000 picoseconds.
        Weight::from_parts(1_264_000, 0)
            // Standard Error: 8_032
            .saturating_add(Weight::from_parts(2_036_123, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_234_000 picoseconds.
        Weight::from_parts(1_323_000, 0)
            // Standard Error: 10_641
            .saturating_add(Weight::from_parts(2_028_042, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_209_000 picoseconds.
        Weight::from_parts(2_624_863, 0)
            // Standard Error: 6_218
            .saturating_add(Weight::from_parts(1_859_374, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_229_000 picoseconds.
        Weight::from_parts(1_821_782, 0)
            // Standard Error: 3_681
            .saturating_add(Weight::from_parts(356_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_214_000 picoseconds.
        Weight::from_parts(1_364_147, 0)
            // Standard Error: 1_721
            .saturating_add(Weight::from_parts(269_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_192_000 picoseconds.
        Weight::from_parts(1_267_000, 0)
            // Standard Error: 10_439
            .saturating_add(Weight::from_parts(868_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_197_000 picoseconds.
        Weight::from_parts(214_060, 0)
            // Standard Error: 10_146
            .saturating_add(Weight::from_parts(674_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_153_000 picoseconds.
        Weight::from_parts(1_705_921, 0)
            // Standard Error: 3_159
            .saturating_add(Weight::from_parts(274_168, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_258_000 picoseconds.
        Weight::from_parts(1_216_717, 0)
            // Standard Error: 2_219
            .saturating_add(Weight::from_parts(276_233, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_240_000 picoseconds.
        Weight::from_parts(1_220_142, 0)
            // Standard Error: 3_181
            .saturating_add(Weight::from_parts(368_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_252_000 picoseconds.
        Weight::from_parts(1_325_091, 0)
            // Standard Error: 2_650
            .saturating_add(Weight::from_parts(348_119, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_260_000 picoseconds.
        Weight::from_parts(1_802_129, 0)
            // Standard Error: 3_981
            .saturating_add(Weight::from_parts(317_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_217_000 picoseconds.
        Weight::from_parts(1_235_116, 0)
            // Standard Error: 1_372
            .saturating_add(Weight::from_parts(255_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_184_000 picoseconds.
        Weight::from_parts(1_452_735, 0)
            // Standard Error: 2_135
            .saturating_add(Weight::from_parts(161_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_232_000 picoseconds.
        Weight::from_parts(1_093_998, 0)
            // Standard Error: 3_498
            .saturating_add(Weight::from_parts(189_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_242_000 picoseconds.
        Weight::from_parts(1_307_000, 0)
            // Standard Error: 17_863
            .saturating_add(Weight::from_parts(1_034_469, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_221_000 picoseconds.
        Weight::from_parts(1_295_000, 0)
            // Standard Error: 12_127
            .saturating_add(Weight::from_parts(741_439, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_219_000 picoseconds.
        Weight::from_parts(1_264_000, 0)
            // Standard Error: 25_407
            .saturating_add(Weight::from_parts(1_515_849, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_193_000 picoseconds.
        Weight::from_parts(1_252_000, 0)
            // Standard Error: 21_370
            .saturating_add(Weight::from_parts(1_289_596, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_173_000 picoseconds.
        Weight::from_parts(1_270_000, 0)
            // Standard Error: 21_998
            .saturating_add(Weight::from_parts(1_313_399, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_214_000 picoseconds.
        Weight::from_parts(1_266_000, 0)
            // Standard Error: 12_624
            .saturating_add(Weight::from_parts(851_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_263_000 picoseconds.
        Weight::from_parts(1_313_000, 0)
            // Standard Error: 25_048
            .saturating_add(Weight::from_parts(1_469_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_102_000 picoseconds.
        Weight::from_parts(1_240_000, 0)
            // Standard Error: 9_652
            .saturating_add(Weight::from_parts(669_519, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_160_000 picoseconds.
        Weight::from_parts(1_267_000, 0)
            // Standard Error: 20_915
            .saturating_add(Weight::from_parts(1_081_039, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_213_000 picoseconds.
        Weight::from_parts(1_308_000, 0)
            // Standard Error: 9_645
            .saturating_add(Weight::from_parts(726_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_231_000 picoseconds.
        Weight::from_parts(1_291_000, 0)
            // Standard Error: 25_112
            .saturating_add(Weight::from_parts(1_151_325, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_254_000 picoseconds.
        Weight::from_parts(1_320_000, 0)
            // Standard Error: 21_949
            .saturating_add(Weight::from_parts(1_246_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_240_000 picoseconds.
        Weight::from_parts(1_293_000, 0)
            // Standard Error: 25_229
            .saturating_add(Weight::from_parts(1_357_993, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_204_000 picoseconds.
        Weight::from_parts(1_294_000, 0)
            // Standard Error: 8_945
            .saturating_add(Weight::from_parts(644_067, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(1_256_000, 0)
            // Standard Error: 26_375
            .saturating_add(Weight::from_parts(1_405_047, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_269_000 picoseconds.
        Weight::from_parts(1_290_000, 0)
            // Standard Error: 8_339
            .saturating_add(Weight::from_parts(641_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_232_000 picoseconds.
        Weight::from_parts(1_279_000, 0)
            // Standard Error: 19_703
            .saturating_add(Weight::from_parts(1_070_535, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_155_000 picoseconds.
        Weight::from_parts(1_396_375, 0)
            // Standard Error: 6_754
            .saturating_add(Weight::from_parts(593_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_160_000 picoseconds.
        Weight::from_parts(1_004_806, 0)
            // Standard Error: 12_723
            .saturating_add(Weight::from_parts(853_453, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_206_000 picoseconds.
        Weight::from_parts(554_893, 0)
            // Standard Error: 8_600
            .saturating_add(Weight::from_parts(616_342, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_237_000 picoseconds.
        Weight::from_parts(1_284_000, 0)
            // Standard Error: 10_362
            .saturating_add(Weight::from_parts(717_734, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_255_000 picoseconds.
        Weight::from_parts(1_305_000, 0)
            // Standard Error: 6_505
            .saturating_add(Weight::from_parts(487_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_188_000 picoseconds.
        Weight::from_parts(1_265_000, 0)
            // Standard Error: 10_860
            .saturating_add(Weight::from_parts(818_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_248_000 picoseconds.
        Weight::from_parts(1_301_000, 0)
            // Standard Error: 5_582
            .saturating_add(Weight::from_parts(498_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_176_000 picoseconds.
        Weight::from_parts(1_257_000, 0)
            // Standard Error: 12_147
            .saturating_add(Weight::from_parts(970_564, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_304_000 picoseconds.
        Weight::from_parts(1_324_000, 0)
            // Standard Error: 12_924
            .saturating_add(Weight::from_parts(707_061, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_206_000 picoseconds.
        Weight::from_parts(1_785_432, 0)
            // Standard Error: 5_510
            .saturating_add(Weight::from_parts(1_528_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_283_000 picoseconds.
        Weight::from_parts(1_311_661, 0)
            // Standard Error: 10_354
            .saturating_add(Weight::from_parts(1_265_583, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_167_000 picoseconds.
        Weight::from_parts(1_012_798, 0)
            // Standard Error: 9_507
            .saturating_add(Weight::from_parts(1_597_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_224_000 picoseconds.
        Weight::from_parts(1_104_228, 0)
            // Standard Error: 14_966
            .saturating_add(Weight::from_parts(1_249_402, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_196_000 picoseconds.
        Weight::from_parts(1_260_000, 0)
            // Standard Error: 44_473
            .saturating_add(Weight::from_parts(5_535_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_197_000 picoseconds.
        Weight::from_parts(1_280_000, 0)
            // Standard Error: 32_628
            .saturating_add(Weight::from_parts(3_709_724, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_197_000 picoseconds.
        Weight::from_parts(1_285_000, 0)
            // Standard Error: 25_153
            .saturating_add(Weight::from_parts(2_125_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_174_000 picoseconds.
        Weight::from_parts(1_224_000, 0)
            // Standard Error: 11_463
            .saturating_add(Weight::from_parts(1_490_946, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_222_000 picoseconds.
        Weight::from_parts(1_315_000, 0)
            // Standard Error: 13_431
            .saturating_add(Weight::from_parts(757_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_230_000 picoseconds.
        Weight::from_parts(1_298_000, 0)
            // Standard Error: 9_287
            .saturating_add(Weight::from_parts(538_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_214_000 picoseconds.
        Weight::from_parts(1_261_000, 0)
            // Standard Error: 17_098
            .saturating_add(Weight::from_parts(959_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_252_000 picoseconds.
        Weight::from_parts(11_274, 0)
            // Standard Error: 8_681
            .saturating_add(Weight::from_parts(460_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_207_000 picoseconds.
        Weight::from_parts(1_291_000, 0)
            // Standard Error: 12_753
            .saturating_add(Weight::from_parts(760_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_202_000 picoseconds.
        Weight::from_parts(1_275_000, 0)
            // Standard Error: 10_556
            .saturating_add(Weight::from_parts(496_390, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_246_000 picoseconds.
        Weight::from_parts(1_270_000, 0)
            // Standard Error: 15_792
            .saturating_add(Weight::from_parts(773_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_229_000 picoseconds.
        Weight::from_parts(1_294_000, 0)
            // Standard Error: 6_738
            .saturating_add(Weight::from_parts(459_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_204_000 picoseconds.
        Weight::from_parts(1_245_000, 0)
            // Standard Error: 20_379
            .saturating_add(Weight::from_parts(833_353, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_235_000 picoseconds.
        Weight::from_parts(1_267_000, 0)
            // Standard Error: 5_813
            .saturating_add(Weight::from_parts(440_628, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_158_000 picoseconds.
        Weight::from_parts(1_295_000, 0)
            // Standard Error: 18_176
            .saturating_add(Weight::from_parts(939_619, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_201_000 picoseconds.
        Weight::from_parts(1_273_000, 0)
            // Standard Error: 8_288
            .saturating_add(Weight::from_parts(434_449, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_259_000 picoseconds.
        Weight::from_parts(1_309_000, 0)
            // Standard Error: 16_716
            .saturating_add(Weight::from_parts(915_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_198_000 picoseconds.
        Weight::from_parts(1_248_000, 0)
            // Standard Error: 6_583
            .saturating_add(Weight::from_parts(514_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_180_000 picoseconds.
        Weight::from_parts(1_231_000, 0)
            // Standard Error: 13_918
            .saturating_add(Weight::from_parts(841_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_206_000 picoseconds.
        Weight::from_parts(49_187, 0)
            // Standard Error: 10_345
            .saturating_add(Weight::from_parts(485_166, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1090`
        //  Estimated: `6196`
        // Minimum execution time: 78_253_000 picoseconds.
        Weight::from_parts(81_204_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `858`
        //  Estimated: `4323`
        // Minimum execution time: 46_786_000 picoseconds.
        Weight::from_parts(47_880_000, 4323)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1009`
        //  Estimated: `6196`
        // Minimum execution time: 93_719_000 picoseconds.
        Weight::from_parts(95_792_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694`
        //  Estimated: `4159`
        // Minimum execution time: 33_633_000 picoseconds.
        Weight::from_parts(34_991_000, 4159)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `937`
        //  Estimated: `4402`
        // Minimum execution time: 51_032_000 picoseconds.
        Weight::from_parts(54_508_000, 4402)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 4_803_000 picoseconds.
        Weight::from_parts(5_242_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1565`
        //  Estimated: `7505`
        // Minimum execution time: 133_913_000 picoseconds.
        Weight::from_parts(137_511_000, 7505)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1294`
        //  Estimated: `7234`
        // Minimum execution time: 109_042_000 picoseconds.
        Weight::from_parts(112_026_000, 7234)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
}
