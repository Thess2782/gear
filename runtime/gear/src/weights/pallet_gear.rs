// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 965_000 picoseconds.
        Weight::from_parts(1_013_000, 0)
            // Standard Error: 772
            .saturating_add(Weight::from_parts(210_630, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_812_000 picoseconds.
        Weight::from_parts(2_869_000, 3506)
            // Standard Error: 731
            .saturating_add(Weight::from_parts(722_226, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_122_000 picoseconds.
        Weight::from_parts(68_143_419, 0)
            // Standard Error: 9_065
            .saturating_add(Weight::from_parts(2_611_250, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `782`
        //  Estimated: `23471`
        // Minimum execution time: 57_382_000 picoseconds.
        Weight::from_parts(59_693_000, 23471)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `853`
        //  Estimated: `21162`
        // Minimum execution time: 52_076_000 picoseconds.
        Weight::from_parts(53_571_000, 21162)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 71_662_000 picoseconds.
        Weight::from_parts(8_649_792, 4990)
            // Standard Error: 68_232
            .saturating_add(Weight::from_parts(54_676_234, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `719`
        //  Estimated: `39166`
        // Minimum execution time: 62_446_000 picoseconds.
        Weight::from_parts(83_791_416, 39166)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_383, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `202`
        //  Estimated: `33883`
        // Minimum execution time: 10_102_385_000 picoseconds.
        Weight::from_parts(189_978_779, 33883)
            // Standard Error: 151_065
            .saturating_add(Weight::from_parts(55_722_867, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_377, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 54_024_000 picoseconds.
        Weight::from_parts(17_287_061, 23853)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_247, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `945`
        //  Estimated: `41930`
        // Minimum execution time: 79_295_000 picoseconds.
        Weight::from_parts(44_637_510, 41930)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_253, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `727`
        //  Estimated: `73959`
        // Minimum execution time: 302_023_000 picoseconds.
        Weight::from_parts(317_682_452, 73959)
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `727`
        //  Estimated: `73833`
        // Minimum execution time: 318_532_000 picoseconds.
        Weight::from_parts(331_929_418, 73833)
            // Standard Error: 1_378
            .saturating_add(Weight::from_parts(2_813, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 55_699_000 picoseconds.
        Weight::from_parts(56_314_000, 3899)
            // Standard Error: 32_012
            .saturating_add(Weight::from_parts(54_148_715, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_939_000 picoseconds.
        Weight::from_parts(92_537_238, 0)
            // Standard Error: 416_769
            .saturating_add(Weight::from_parts(156_305_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 235_403_000 picoseconds.
        Weight::from_parts(262_666_735, 0)
            // Standard Error: 354_266
            .saturating_add(Weight::from_parts(154_101_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_003_000 picoseconds.
        Weight::from_parts(95_248_174, 0)
            // Standard Error: 4_607
            .saturating_add(Weight::from_parts(3_998_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_990_000 picoseconds.
        Weight::from_parts(146_193_722, 0)
            // Standard Error: 31_307
            .saturating_add(Weight::from_parts(4_539_471, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_889_000 picoseconds.
        Weight::from_parts(114_733_320, 0)
            // Standard Error: 425_993
            .saturating_add(Weight::from_parts(219_744_230, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_131_000 picoseconds.
        Weight::from_parts(89_238_159, 0)
            // Standard Error: 331_192
            .saturating_add(Weight::from_parts(216_082_517, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_884_000 picoseconds.
        Weight::from_parts(93_146_395, 0)
            // Standard Error: 312_298
            .saturating_add(Weight::from_parts(216_226_631, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_071_000 picoseconds.
        Weight::from_parts(86_854_275, 0)
            // Standard Error: 310_861
            .saturating_add(Weight::from_parts(217_078_175, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_667_000 picoseconds.
        Weight::from_parts(81_331_135, 0)
            // Standard Error: 352_166
            .saturating_add(Weight::from_parts(224_215_039, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_359_000 picoseconds.
        Weight::from_parts(86_592_870, 0)
            // Standard Error: 315_659
            .saturating_add(Weight::from_parts(220_109_368, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_116_000 picoseconds.
        Weight::from_parts(85_805_569, 0)
            // Standard Error: 312_525
            .saturating_add(Weight::from_parts(221_318_024, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_083_000 picoseconds.
        Weight::from_parts(91_274_873, 0)
            // Standard Error: 286_731
            .saturating_add(Weight::from_parts(216_240_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_784_000 picoseconds.
        Weight::from_parts(80_209_319, 0)
            // Standard Error: 345_267
            .saturating_add(Weight::from_parts(220_767_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 594_633_000 picoseconds.
        Weight::from_parts(705_987_763, 0)
            // Standard Error: 549_999
            .saturating_add(Weight::from_parts(304_558_790, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 878_646_000 picoseconds.
        Weight::from_parts(929_840_000, 0)
            // Standard Error: 55_174
            .saturating_add(Weight::from_parts(13_405_712, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_434_000 picoseconds.
        Weight::from_parts(90_102_817, 0)
            // Standard Error: 275_630
            .saturating_add(Weight::from_parts(214_574_539, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_453_000 picoseconds.
        Weight::from_parts(84_757_291, 0)
            // Standard Error: 291_991
            .saturating_add(Weight::from_parts(217_266_624, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_844_000 picoseconds.
        Weight::from_parts(99_860_544, 0)
            // Standard Error: 449_392
            .saturating_add(Weight::from_parts(288_484_059, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_345_000 picoseconds.
        Weight::from_parts(133_288_287, 0)
            // Standard Error: 503_101
            .saturating_add(Weight::from_parts(425_741_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 499_820_000 picoseconds.
        Weight::from_parts(505_690_000, 0)
            // Standard Error: 59_309
            .saturating_add(Weight::from_parts(25_200_619, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_531_000 picoseconds.
        Weight::from_parts(158_608_472, 0)
            // Standard Error: 543_630
            .saturating_add(Weight::from_parts(427_592_756, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 508_251_000 picoseconds.
        Weight::from_parts(515_094_000, 0)
            // Standard Error: 54_021
            .saturating_add(Weight::from_parts(24_939_737, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 607_720_000 picoseconds.
        Weight::from_parts(759_389_657, 0)
            // Standard Error: 592_113
            .saturating_add(Weight::from_parts(446_369_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 617_453_000 picoseconds.
        Weight::from_parts(808_279_997, 0)
            // Standard Error: 656_412
            .saturating_add(Weight::from_parts(446_004_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_933_000 picoseconds.
        Weight::from_parts(81_151_279, 0)
            // Standard Error: 306_556
            .saturating_add(Weight::from_parts(224_519_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_398_546_000 picoseconds.
        Weight::from_parts(4_573_987_070, 0)
            // Standard Error: 512_970
            .saturating_add(Weight::from_parts(316_939_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 555_946_000 picoseconds.
        Weight::from_parts(561_122_000, 0)
            // Standard Error: 53_370
            .saturating_add(Weight::from_parts(34_709_120, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_376_198_000 picoseconds.
        Weight::from_parts(4_562_424_699, 0)
            // Standard Error: 432_676
            .saturating_add(Weight::from_parts(380_162_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_417_053_000 picoseconds.
        Weight::from_parts(4_592_039_831, 0)
            // Standard Error: 457_933
            .saturating_add(Weight::from_parts(393_183_921, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 249_177_000 picoseconds.
        Weight::from_parts(296_926_893, 0)
            // Standard Error: 487_267
            .saturating_add(Weight::from_parts(439_665_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 670_133_000 picoseconds.
        Weight::from_parts(677_733_000, 0)
            // Standard Error: 54_323
            .saturating_add(Weight::from_parts(25_212_009, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_617_163_000 picoseconds.
        Weight::from_parts(4_750_456_693, 0)
            // Standard Error: 536_939
            .saturating_add(Weight::from_parts(393_442_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_909_000 picoseconds.
        Weight::from_parts(91_017_855, 0)
            // Standard Error: 276_659
            .saturating_add(Weight::from_parts(21_757_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_271_000 picoseconds.
        Weight::from_parts(91_867_149, 0)
            // Standard Error: 1_096
            .saturating_add(Weight::from_parts(488_843, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_990_000 picoseconds.
        Weight::from_parts(87_818_955, 0)
            // Standard Error: 271_714
            .saturating_add(Weight::from_parts(20_789_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_802_000 picoseconds.
        Weight::from_parts(95_239_275, 0)
            // Standard Error: 964
            .saturating_add(Weight::from_parts(483_295, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_551_000 picoseconds.
        Weight::from_parts(90_686_663, 0)
            // Standard Error: 284_147
            .saturating_add(Weight::from_parts(21_143_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_828_000 picoseconds.
        Weight::from_parts(87_992_342, 0)
            // Standard Error: 264_897
            .saturating_add(Weight::from_parts(23_329_457, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_909_000 picoseconds.
        Weight::from_parts(131_227_415, 0)
            // Standard Error: 454_709
            .saturating_add(Weight::from_parts(306_099_448, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_217_000 picoseconds.
        Weight::from_parts(105_816_000, 0)
            // Standard Error: 2_790
            .saturating_add(Weight::from_parts(692_063, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 582_522_000 picoseconds.
        Weight::from_parts(659_099_528, 0)
            // Standard Error: 6_599_931
            .saturating_add(Weight::from_parts(26_355_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_499_000 picoseconds.
        Weight::from_parts(648_271_465, 0)
            // Standard Error: 5_814_947
            .saturating_add(Weight::from_parts(13_738_734, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_886_000 picoseconds.
        Weight::from_parts(95_422_204, 0)
            // Standard Error: 297_583
            .saturating_add(Weight::from_parts(14_737_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_022_000 picoseconds.
        Weight::from_parts(93_603_567, 0)
            // Standard Error: 1_154
            .saturating_add(Weight::from_parts(489_195, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_876_000 picoseconds.
        Weight::from_parts(99_031_287, 0)
            // Standard Error: 329_348
            .saturating_add(Weight::from_parts(15_351_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_333_000 picoseconds.
        Weight::from_parts(92_676_805, 0)
            // Standard Error: 1_131
            .saturating_add(Weight::from_parts(487_646, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_958_000 picoseconds.
        Weight::from_parts(95_748_395, 0)
            // Standard Error: 273_526
            .saturating_add(Weight::from_parts(218_563_960, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_151_000 picoseconds.
        Weight::from_parts(84_866_168, 0)
            // Standard Error: 257_205
            .saturating_add(Weight::from_parts(220_220_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 673_424_000 picoseconds.
        Weight::from_parts(741_037_947, 0)
            // Standard Error: 505_233
            .saturating_add(Weight::from_parts(238_398_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 625_080_000 picoseconds.
        Weight::from_parts(682_751_734, 0)
            // Standard Error: 3_431
            .saturating_add(Weight::from_parts(115_087, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_007_120_000 picoseconds.
        Weight::from_parts(5_192_329_109, 0)
            // Standard Error: 511_432
            .saturating_add(Weight::from_parts(252_917_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_325_247_000 picoseconds.
        Weight::from_parts(5_563_995_442, 0)
            // Standard Error: 18_374
            .saturating_add(Weight::from_parts(12_456_988, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_313_000 picoseconds.
        Weight::from_parts(115_729_924, 0)
            // Standard Error: 398_351
            .saturating_add(Weight::from_parts(223_693_323, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 228_191_000 picoseconds.
        Weight::from_parts(231_769_000, 0)
            // Standard Error: 47_817
            .saturating_add(Weight::from_parts(30_322_954, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_362_000 picoseconds.
        Weight::from_parts(114_831_080, 0)
            // Standard Error: 360_967
            .saturating_add(Weight::from_parts(288_464_831, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_113_000 picoseconds.
        Weight::from_parts(94_934_374, 0)
            // Standard Error: 315_865
            .saturating_add(Weight::from_parts(213_941_044, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_630_000 picoseconds.
        Weight::from_parts(87_734_326, 0)
            // Standard Error: 291_772
            .saturating_add(Weight::from_parts(27_270_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_956_000 picoseconds.
        Weight::from_parts(88_689_755, 0)
            // Standard Error: 258_829
            .saturating_add(Weight::from_parts(14_969_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_074_000 picoseconds.
        Weight::from_parts(90_429_126, 0)
            // Standard Error: 261_988
            .saturating_add(Weight::from_parts(11_532_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_603_000 picoseconds.
        Weight::from_parts(90_647_940, 0)
            // Standard Error: 293_677
            .saturating_add(Weight::from_parts(11_685_459, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_052_000 picoseconds.
        Weight::from_parts(90_657_065, 0)
            // Standard Error: 277_182
            .saturating_add(Weight::from_parts(16_846_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_712_000 picoseconds.
        Weight::from_parts(225_138_439, 0)
            // Standard Error: 403_068
            .saturating_add(Weight::from_parts(316_071_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_682_000 picoseconds.
        Weight::from_parts(153_354_542, 0)
            // Standard Error: 472_549
            .saturating_add(Weight::from_parts(503_489_050, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_979_937_000 picoseconds.
        Weight::from_parts(54_161_594_000, 0)
            // Standard Error: 318_979
            .saturating_add(Weight::from_parts(8_917_667, 0).saturating_mul(p.into()))
            // Standard Error: 318_963
            .saturating_add(Weight::from_parts(158_097_852, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_183_000 picoseconds.
        Weight::from_parts(171_043_861, 0)
            // Standard Error: 521_385
            .saturating_add(Weight::from_parts(505_137_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_585_563_000 picoseconds.
        Weight::from_parts(52_755_445_000, 0)
            // Standard Error: 316_377
            .saturating_add(Weight::from_parts(9_223_957, 0).saturating_mul(p.into()))
            // Standard Error: 316_362
            .saturating_add(Weight::from_parts(158_869_676, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_005_000 picoseconds.
        Weight::from_parts(99_790_630, 0)
            // Standard Error: 24_176
            .saturating_add(Weight::from_parts(4_009_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 84_132_000 picoseconds.
        Weight::from_parts(123_054_974, 1131)
            // Standard Error: 8_978
            .saturating_add(Weight::from_parts(12_261_236, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 86_456_000 picoseconds.
        Weight::from_parts(87_290_000, 1131)
            // Standard Error: 32_710
            .saturating_add(Weight::from_parts(40_348_047, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_315_636_000 picoseconds.
        Weight::from_parts(6_368_314_920, 5069931)
            // Standard Error: 45_831
            .saturating_add(Weight::from_parts(40_225_073, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 87_635_000 picoseconds.
        Weight::from_parts(88_938_000, 1939)
            // Standard Error: 31_266
            .saturating_add(Weight::from_parts(48_171_710, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_974_000 picoseconds.
        Weight::from_parts(81_285_344, 1131)
            // Standard Error: 72_664
            .saturating_add(Weight::from_parts(41_123_068, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 646_122_000 picoseconds.
        Weight::from_parts(758_882_625, 1496)
            // Standard Error: 325_760
            .saturating_add(Weight::from_parts(52_557_317, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_047_811_000 picoseconds.
        Weight::from_parts(1_176_816_812, 317931)
            // Standard Error: 256_525
            .saturating_add(Weight::from_parts(46_665_048, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_329_252_000 picoseconds.
        Weight::from_parts(4_346_280_323, 0)
            // Standard Error: 10_735
            .saturating_add(Weight::from_parts(3_341_153, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_338_293_000 picoseconds.
        Weight::from_parts(4_355_397_735, 0)
            // Standard Error: 11_622
            .saturating_add(Weight::from_parts(3_370_618, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_511_010_000 picoseconds.
        Weight::from_parts(10_498_238_779, 0)
            // Standard Error: 176_557
            .saturating_add(Weight::from_parts(16_604_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_053_150_000 picoseconds.
        Weight::from_parts(10_930_780_554, 0)
            // Standard Error: 269_859
            .saturating_add(Weight::from_parts(9_482_483, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_362_000, 0)
            // Standard Error: 7_348
            .saturating_add(Weight::from_parts(3_840_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_300_000 picoseconds.
        Weight::from_parts(290_593, 0)
            // Standard Error: 7_826
            .saturating_add(Weight::from_parts(3_165_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(2_971_106, 0)
            // Standard Error: 1_975
            .saturating_add(Weight::from_parts(1_602_581, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_238_000 picoseconds.
        Weight::from_parts(2_321_000, 0)
            // Standard Error: 9_322
            .saturating_add(Weight::from_parts(3_005_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(7_473_690, 0)
            // Standard Error: 21_006
            .saturating_add(Weight::from_parts(4_840_249, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_859_000 picoseconds.
        Weight::from_parts(5_655_579, 0)
            // Standard Error: 1_298
            .saturating_add(Weight::from_parts(179_547, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_254_000 picoseconds.
        Weight::from_parts(5_303_034, 0)
            // Standard Error: 8_086
            .saturating_add(Weight::from_parts(2_589_617, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_589_617 -
            2_439_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(4_664_641, 0)
            // Standard Error: 13_519
            .saturating_add(Weight::from_parts(2_439_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_608_000 picoseconds.
        Weight::from_parts(21_766_004, 0)
            // Standard Error: 41_599
            .saturating_add(Weight::from_parts(9_912_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_055_000 picoseconds.
        Weight::from_parts(6_467_994, 0)
            // Standard Error: 5_828
            .saturating_add(Weight::from_parts(1_233_233, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_397_000 picoseconds.
        Weight::from_parts(5_700_462, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(29, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_271_000 picoseconds.
        Weight::from_parts(1_452_321, 0)
            // Standard Error: 3_916
            .saturating_add(Weight::from_parts(315_761, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_377_000 picoseconds.
        Weight::from_parts(2_413_000, 0)
            // Standard Error: 5_457
            .saturating_add(Weight::from_parts(833_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_339_000 picoseconds.
        Weight::from_parts(2_442_000, 0)
            // Standard Error: 6_163
            .saturating_add(Weight::from_parts(890_001, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_029_000 picoseconds.
        Weight::from_parts(1_724_119, 0)
            // Standard Error: 8_328
            .saturating_add(Weight::from_parts(915_186, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_071_000 picoseconds.
        Weight::from_parts(6_140_000, 0)
            // Standard Error: 7_701
            .saturating_add(Weight::from_parts(1_443_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_938_000 picoseconds.
        Weight::from_parts(531_816, 0)
            // Standard Error: 12_544
            .saturating_add(Weight::from_parts(7_468_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_291_000, 0)
            // Standard Error: 5_409
            .saturating_add(Weight::from_parts(3_365_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_281_000 picoseconds.
        Weight::from_parts(2_331_000, 0)
            // Standard Error: 5_272
            .saturating_add(Weight::from_parts(3_183_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_304_000 picoseconds.
        Weight::from_parts(2_331_000, 0)
            // Standard Error: 5_326
            .saturating_add(Weight::from_parts(3_173_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_343_000, 0)
            // Standard Error: 5_014
            .saturating_add(Weight::from_parts(2_751_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_000 picoseconds.
        Weight::from_parts(2_293_000, 0)
            // Standard Error: 8_076
            .saturating_add(Weight::from_parts(696_815, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(1_157_543, 0)
            // Standard Error: 4_189
            .saturating_add(Weight::from_parts(467_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_320_000, 0)
            // Standard Error: 9_033
            .saturating_add(Weight::from_parts(1_927_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_311_000 picoseconds.
        Weight::from_parts(2_389_000, 0)
            // Standard Error: 7_980
            .saturating_add(Weight::from_parts(1_253_498, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(939_916, 0)
            // Standard Error: 5_218
            .saturating_add(Weight::from_parts(419_964, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(2_047_278, 0)
            // Standard Error: 3_469
            .saturating_add(Weight::from_parts(230_357, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_337_000 picoseconds.
        Weight::from_parts(1_823_250, 0)
            // Standard Error: 4_347
            .saturating_add(Weight::from_parts(248_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_320_000 picoseconds.
        Weight::from_parts(2_347_000, 0)
            // Standard Error: 8_688
            .saturating_add(Weight::from_parts(1_940_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_310_000 picoseconds.
        Weight::from_parts(2_377_000, 0)
            // Standard Error: 9_818
            .saturating_add(Weight::from_parts(1_357_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(2_328_000, 0)
            // Standard Error: 9_218
            .saturating_add(Weight::from_parts(2_017_444, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_383_000 picoseconds.
        Weight::from_parts(2_445_000, 0)
            // Standard Error: 7_725
            .saturating_add(Weight::from_parts(1_280_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_289_000 picoseconds.
        Weight::from_parts(2_369_000, 0)
            // Standard Error: 9_338
            .saturating_add(Weight::from_parts(1_935_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_314_000 picoseconds.
        Weight::from_parts(2_371_000, 0)
            // Standard Error: 11_101
            .saturating_add(Weight::from_parts(1_337_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_250_000 picoseconds.
        Weight::from_parts(2_358_000, 0)
            // Standard Error: 10_024
            .saturating_add(Weight::from_parts(1_946_463, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_354_000, 0)
            // Standard Error: 9_738
            .saturating_add(Weight::from_parts(1_362_261, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_358_000, 0)
            // Standard Error: 9_671
            .saturating_add(Weight::from_parts(2_036_998, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_264_000 picoseconds.
        Weight::from_parts(2_320_000, 0)
            // Standard Error: 8_352
            .saturating_add(Weight::from_parts(1_273_070, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_250_000 picoseconds.
        Weight::from_parts(2_287_000, 0)
            // Standard Error: 10_119
            .saturating_add(Weight::from_parts(1_996_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_343_000 picoseconds.
        Weight::from_parts(2_370_000, 0)
            // Standard Error: 7_764
            .saturating_add(Weight::from_parts(1_238_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_320_000 picoseconds.
        Weight::from_parts(2_345_000, 0)
            // Standard Error: 9_415
            .saturating_add(Weight::from_parts(1_937_248, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_250_000 picoseconds.
        Weight::from_parts(2_285_000, 0)
            // Standard Error: 8_135
            .saturating_add(Weight::from_parts(1_259_674, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(2_315_000, 0)
            // Standard Error: 9_995
            .saturating_add(Weight::from_parts(2_070_169, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_449_000, 0)
            // Standard Error: 7_868
            .saturating_add(Weight::from_parts(1_220_955, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_328_000, 0)
            // Standard Error: 9_542
            .saturating_add(Weight::from_parts(1_853_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(2_402_000, 0)
            // Standard Error: 8_243
            .saturating_add(Weight::from_parts(1_196_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_285_000 picoseconds.
        Weight::from_parts(2_360_000, 0)
            // Standard Error: 10_107
            .saturating_add(Weight::from_parts(1_927_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(2_377_000, 0)
            // Standard Error: 8_364
            .saturating_add(Weight::from_parts(1_276_626, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(2_337_000, 0)
            // Standard Error: 10_487
            .saturating_add(Weight::from_parts(1_443_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(2_311_000, 0)
            // Standard Error: 7_226
            .saturating_add(Weight::from_parts(764_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(2_378_000, 0)
            // Standard Error: 8_603
            .saturating_add(Weight::from_parts(1_361_751, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_375_000, 0)
            // Standard Error: 5_366
            .saturating_add(Weight::from_parts(682_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_290_000 picoseconds.
        Weight::from_parts(2_341_000, 0)
            // Standard Error: 8_190
            .saturating_add(Weight::from_parts(1_812_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_178_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 9_576
            .saturating_add(Weight::from_parts(1_356_631, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(11_654_834, 0)
            // Standard Error: 23_549
            .saturating_add(Weight::from_parts(1_942_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_297_000 picoseconds.
        Weight::from_parts(6_821_199, 0)
            // Standard Error: 15_724
            .saturating_add(Weight::from_parts(2_035_554, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(3_772_660, 0)
            // Standard Error: 19_597
            .saturating_add(Weight::from_parts(2_723_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_307_000 picoseconds.
        Weight::from_parts(4_114_729, 0)
            // Standard Error: 20_119
            .saturating_add(Weight::from_parts(2_311_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_254_000 picoseconds.
        Weight::from_parts(11_338_601, 0)
            // Standard Error: 56_667
            .saturating_add(Weight::from_parts(8_923_621, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(6_512_733, 0)
            // Standard Error: 55_544
            .saturating_add(Weight::from_parts(7_244_815, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_226_000 picoseconds.
        Weight::from_parts(11_065_094, 0)
            // Standard Error: 30_743
            .saturating_add(Weight::from_parts(2_319_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(1_539_560, 0)
            // Standard Error: 17_395
            .saturating_add(Weight::from_parts(2_465_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_298_000 picoseconds.
        Weight::from_parts(2_353_000, 0)
            // Standard Error: 8_155
            .saturating_add(Weight::from_parts(1_385_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_286_000 picoseconds.
        Weight::from_parts(2_378_000, 0)
            // Standard Error: 6_839
            .saturating_add(Weight::from_parts(711_204, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_286_000 picoseconds.
        Weight::from_parts(2_380_000, 0)
            // Standard Error: 9_365
            .saturating_add(Weight::from_parts(1_334_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_329_000 picoseconds.
        Weight::from_parts(2_374_000, 0)
            // Standard Error: 5_763
            .saturating_add(Weight::from_parts(645_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(2_340_000, 0)
            // Standard Error: 10_994
            .saturating_add(Weight::from_parts(1_392_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_228_000 picoseconds.
        Weight::from_parts(2_294_000, 0)
            // Standard Error: 7_835
            .saturating_add(Weight::from_parts(798_879, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_327_000, 0)
            // Standard Error: 9_212
            .saturating_add(Weight::from_parts(1_212_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_271_000 picoseconds.
        Weight::from_parts(2_332_000, 0)
            // Standard Error: 5_064
            .saturating_add(Weight::from_parts(653_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_339_000, 0)
            // Standard Error: 7_670
            .saturating_add(Weight::from_parts(1_211_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_358_000 picoseconds.
        Weight::from_parts(2_392_000, 0)
            // Standard Error: 5_036
            .saturating_add(Weight::from_parts(652_474, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_243_000 picoseconds.
        Weight::from_parts(2_319_000, 0)
            // Standard Error: 8_702
            .saturating_add(Weight::from_parts(1_186_862, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_302_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 5_363
            .saturating_add(Weight::from_parts(733_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_238_000 picoseconds.
        Weight::from_parts(2_302_000, 0)
            // Standard Error: 7_764
            .saturating_add(Weight::from_parts(1_269_674, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_282_000 picoseconds.
        Weight::from_parts(2_369_000, 0)
            // Standard Error: 5_836
            .saturating_add(Weight::from_parts(681_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_271_000 picoseconds.
        Weight::from_parts(2_331_000, 0)
            // Standard Error: 7_256
            .saturating_add(Weight::from_parts(1_143_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_298_000, 0)
            // Standard Error: 6_711
            .saturating_add(Weight::from_parts(690_288, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 965_000 picoseconds.
        Weight::from_parts(1_013_000, 0)
            // Standard Error: 772
            .saturating_add(Weight::from_parts(210_630, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_812_000 picoseconds.
        Weight::from_parts(2_869_000, 3506)
            // Standard Error: 731
            .saturating_add(Weight::from_parts(722_226, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_122_000 picoseconds.
        Weight::from_parts(68_143_419, 0)
            // Standard Error: 9_065
            .saturating_add(Weight::from_parts(2_611_250, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `782`
        //  Estimated: `23471`
        // Minimum execution time: 57_382_000 picoseconds.
        Weight::from_parts(59_693_000, 23471)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `853`
        //  Estimated: `21162`
        // Minimum execution time: 52_076_000 picoseconds.
        Weight::from_parts(53_571_000, 21162)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 71_662_000 picoseconds.
        Weight::from_parts(8_649_792, 4990)
            // Standard Error: 68_232
            .saturating_add(Weight::from_parts(54_676_234, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `719`
        //  Estimated: `39166`
        // Minimum execution time: 62_446_000 picoseconds.
        Weight::from_parts(83_791_416, 39166)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_383, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `202`
        //  Estimated: `33883`
        // Minimum execution time: 10_102_385_000 picoseconds.
        Weight::from_parts(189_978_779, 33883)
            // Standard Error: 151_065
            .saturating_add(Weight::from_parts(55_722_867, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_377, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 54_024_000 picoseconds.
        Weight::from_parts(17_287_061, 23853)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_247, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `945`
        //  Estimated: `41930`
        // Minimum execution time: 79_295_000 picoseconds.
        Weight::from_parts(44_637_510, 41930)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_253, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `727`
        //  Estimated: `73959`
        // Minimum execution time: 302_023_000 picoseconds.
        Weight::from_parts(317_682_452, 73959)
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `727`
        //  Estimated: `73833`
        // Minimum execution time: 318_532_000 picoseconds.
        Weight::from_parts(331_929_418, 73833)
            // Standard Error: 1_378
            .saturating_add(Weight::from_parts(2_813, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 55_699_000 picoseconds.
        Weight::from_parts(56_314_000, 3899)
            // Standard Error: 32_012
            .saturating_add(Weight::from_parts(54_148_715, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_939_000 picoseconds.
        Weight::from_parts(92_537_238, 0)
            // Standard Error: 416_769
            .saturating_add(Weight::from_parts(156_305_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 235_403_000 picoseconds.
        Weight::from_parts(262_666_735, 0)
            // Standard Error: 354_266
            .saturating_add(Weight::from_parts(154_101_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_003_000 picoseconds.
        Weight::from_parts(95_248_174, 0)
            // Standard Error: 4_607
            .saturating_add(Weight::from_parts(3_998_102, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 133_990_000 picoseconds.
        Weight::from_parts(146_193_722, 0)
            // Standard Error: 31_307
            .saturating_add(Weight::from_parts(4_539_471, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_889_000 picoseconds.
        Weight::from_parts(114_733_320, 0)
            // Standard Error: 425_993
            .saturating_add(Weight::from_parts(219_744_230, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_131_000 picoseconds.
        Weight::from_parts(89_238_159, 0)
            // Standard Error: 331_192
            .saturating_add(Weight::from_parts(216_082_517, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_884_000 picoseconds.
        Weight::from_parts(93_146_395, 0)
            // Standard Error: 312_298
            .saturating_add(Weight::from_parts(216_226_631, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_071_000 picoseconds.
        Weight::from_parts(86_854_275, 0)
            // Standard Error: 310_861
            .saturating_add(Weight::from_parts(217_078_175, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_667_000 picoseconds.
        Weight::from_parts(81_331_135, 0)
            // Standard Error: 352_166
            .saturating_add(Weight::from_parts(224_215_039, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_359_000 picoseconds.
        Weight::from_parts(86_592_870, 0)
            // Standard Error: 315_659
            .saturating_add(Weight::from_parts(220_109_368, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_116_000 picoseconds.
        Weight::from_parts(85_805_569, 0)
            // Standard Error: 312_525
            .saturating_add(Weight::from_parts(221_318_024, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_083_000 picoseconds.
        Weight::from_parts(91_274_873, 0)
            // Standard Error: 286_731
            .saturating_add(Weight::from_parts(216_240_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_784_000 picoseconds.
        Weight::from_parts(80_209_319, 0)
            // Standard Error: 345_267
            .saturating_add(Weight::from_parts(220_767_336, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 594_633_000 picoseconds.
        Weight::from_parts(705_987_763, 0)
            // Standard Error: 549_999
            .saturating_add(Weight::from_parts(304_558_790, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 878_646_000 picoseconds.
        Weight::from_parts(929_840_000, 0)
            // Standard Error: 55_174
            .saturating_add(Weight::from_parts(13_405_712, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_434_000 picoseconds.
        Weight::from_parts(90_102_817, 0)
            // Standard Error: 275_630
            .saturating_add(Weight::from_parts(214_574_539, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_453_000 picoseconds.
        Weight::from_parts(84_757_291, 0)
            // Standard Error: 291_991
            .saturating_add(Weight::from_parts(217_266_624, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_844_000 picoseconds.
        Weight::from_parts(99_860_544, 0)
            // Standard Error: 449_392
            .saturating_add(Weight::from_parts(288_484_059, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_345_000 picoseconds.
        Weight::from_parts(133_288_287, 0)
            // Standard Error: 503_101
            .saturating_add(Weight::from_parts(425_741_660, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 499_820_000 picoseconds.
        Weight::from_parts(505_690_000, 0)
            // Standard Error: 59_309
            .saturating_add(Weight::from_parts(25_200_619, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_531_000 picoseconds.
        Weight::from_parts(158_608_472, 0)
            // Standard Error: 543_630
            .saturating_add(Weight::from_parts(427_592_756, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 508_251_000 picoseconds.
        Weight::from_parts(515_094_000, 0)
            // Standard Error: 54_021
            .saturating_add(Weight::from_parts(24_939_737, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 607_720_000 picoseconds.
        Weight::from_parts(759_389_657, 0)
            // Standard Error: 592_113
            .saturating_add(Weight::from_parts(446_369_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 617_453_000 picoseconds.
        Weight::from_parts(808_279_997, 0)
            // Standard Error: 656_412
            .saturating_add(Weight::from_parts(446_004_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_933_000 picoseconds.
        Weight::from_parts(81_151_279, 0)
            // Standard Error: 306_556
            .saturating_add(Weight::from_parts(224_519_048, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_398_546_000 picoseconds.
        Weight::from_parts(4_573_987_070, 0)
            // Standard Error: 512_970
            .saturating_add(Weight::from_parts(316_939_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 555_946_000 picoseconds.
        Weight::from_parts(561_122_000, 0)
            // Standard Error: 53_370
            .saturating_add(Weight::from_parts(34_709_120, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_376_198_000 picoseconds.
        Weight::from_parts(4_562_424_699, 0)
            // Standard Error: 432_676
            .saturating_add(Weight::from_parts(380_162_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_417_053_000 picoseconds.
        Weight::from_parts(4_592_039_831, 0)
            // Standard Error: 457_933
            .saturating_add(Weight::from_parts(393_183_921, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 249_177_000 picoseconds.
        Weight::from_parts(296_926_893, 0)
            // Standard Error: 487_267
            .saturating_add(Weight::from_parts(439_665_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 670_133_000 picoseconds.
        Weight::from_parts(677_733_000, 0)
            // Standard Error: 54_323
            .saturating_add(Weight::from_parts(25_212_009, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_617_163_000 picoseconds.
        Weight::from_parts(4_750_456_693, 0)
            // Standard Error: 536_939
            .saturating_add(Weight::from_parts(393_442_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_909_000 picoseconds.
        Weight::from_parts(91_017_855, 0)
            // Standard Error: 276_659
            .saturating_add(Weight::from_parts(21_757_944, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_271_000 picoseconds.
        Weight::from_parts(91_867_149, 0)
            // Standard Error: 1_096
            .saturating_add(Weight::from_parts(488_843, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_990_000 picoseconds.
        Weight::from_parts(87_818_955, 0)
            // Standard Error: 271_714
            .saturating_add(Weight::from_parts(20_789_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_802_000 picoseconds.
        Weight::from_parts(95_239_275, 0)
            // Standard Error: 964
            .saturating_add(Weight::from_parts(483_295, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_551_000 picoseconds.
        Weight::from_parts(90_686_663, 0)
            // Standard Error: 284_147
            .saturating_add(Weight::from_parts(21_143_636, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_828_000 picoseconds.
        Weight::from_parts(87_992_342, 0)
            // Standard Error: 264_897
            .saturating_add(Weight::from_parts(23_329_457, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_909_000 picoseconds.
        Weight::from_parts(131_227_415, 0)
            // Standard Error: 454_709
            .saturating_add(Weight::from_parts(306_099_448, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_217_000 picoseconds.
        Weight::from_parts(105_816_000, 0)
            // Standard Error: 2_790
            .saturating_add(Weight::from_parts(692_063, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 582_522_000 picoseconds.
        Weight::from_parts(659_099_528, 0)
            // Standard Error: 6_599_931
            .saturating_add(Weight::from_parts(26_355_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_499_000 picoseconds.
        Weight::from_parts(648_271_465, 0)
            // Standard Error: 5_814_947
            .saturating_add(Weight::from_parts(13_738_734, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_886_000 picoseconds.
        Weight::from_parts(95_422_204, 0)
            // Standard Error: 297_583
            .saturating_add(Weight::from_parts(14_737_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_022_000 picoseconds.
        Weight::from_parts(93_603_567, 0)
            // Standard Error: 1_154
            .saturating_add(Weight::from_parts(489_195, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_876_000 picoseconds.
        Weight::from_parts(99_031_287, 0)
            // Standard Error: 329_348
            .saturating_add(Weight::from_parts(15_351_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_333_000 picoseconds.
        Weight::from_parts(92_676_805, 0)
            // Standard Error: 1_131
            .saturating_add(Weight::from_parts(487_646, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_958_000 picoseconds.
        Weight::from_parts(95_748_395, 0)
            // Standard Error: 273_526
            .saturating_add(Weight::from_parts(218_563_960, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_151_000 picoseconds.
        Weight::from_parts(84_866_168, 0)
            // Standard Error: 257_205
            .saturating_add(Weight::from_parts(220_220_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 673_424_000 picoseconds.
        Weight::from_parts(741_037_947, 0)
            // Standard Error: 505_233
            .saturating_add(Weight::from_parts(238_398_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 625_080_000 picoseconds.
        Weight::from_parts(682_751_734, 0)
            // Standard Error: 3_431
            .saturating_add(Weight::from_parts(115_087, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_007_120_000 picoseconds.
        Weight::from_parts(5_192_329_109, 0)
            // Standard Error: 511_432
            .saturating_add(Weight::from_parts(252_917_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_325_247_000 picoseconds.
        Weight::from_parts(5_563_995_442, 0)
            // Standard Error: 18_374
            .saturating_add(Weight::from_parts(12_456_988, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_313_000 picoseconds.
        Weight::from_parts(115_729_924, 0)
            // Standard Error: 398_351
            .saturating_add(Weight::from_parts(223_693_323, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 228_191_000 picoseconds.
        Weight::from_parts(231_769_000, 0)
            // Standard Error: 47_817
            .saturating_add(Weight::from_parts(30_322_954, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_362_000 picoseconds.
        Weight::from_parts(114_831_080, 0)
            // Standard Error: 360_967
            .saturating_add(Weight::from_parts(288_464_831, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_113_000 picoseconds.
        Weight::from_parts(94_934_374, 0)
            // Standard Error: 315_865
            .saturating_add(Weight::from_parts(213_941_044, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_630_000 picoseconds.
        Weight::from_parts(87_734_326, 0)
            // Standard Error: 291_772
            .saturating_add(Weight::from_parts(27_270_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_956_000 picoseconds.
        Weight::from_parts(88_689_755, 0)
            // Standard Error: 258_829
            .saturating_add(Weight::from_parts(14_969_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_074_000 picoseconds.
        Weight::from_parts(90_429_126, 0)
            // Standard Error: 261_988
            .saturating_add(Weight::from_parts(11_532_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_603_000 picoseconds.
        Weight::from_parts(90_647_940, 0)
            // Standard Error: 293_677
            .saturating_add(Weight::from_parts(11_685_459, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_052_000 picoseconds.
        Weight::from_parts(90_657_065, 0)
            // Standard Error: 277_182
            .saturating_add(Weight::from_parts(16_846_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 135_712_000 picoseconds.
        Weight::from_parts(225_138_439, 0)
            // Standard Error: 403_068
            .saturating_add(Weight::from_parts(316_071_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_682_000 picoseconds.
        Weight::from_parts(153_354_542, 0)
            // Standard Error: 472_549
            .saturating_add(Weight::from_parts(503_489_050, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_979_937_000 picoseconds.
        Weight::from_parts(54_161_594_000, 0)
            // Standard Error: 318_979
            .saturating_add(Weight::from_parts(8_917_667, 0).saturating_mul(p.into()))
            // Standard Error: 318_963
            .saturating_add(Weight::from_parts(158_097_852, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_183_000 picoseconds.
        Weight::from_parts(171_043_861, 0)
            // Standard Error: 521_385
            .saturating_add(Weight::from_parts(505_137_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_585_563_000 picoseconds.
        Weight::from_parts(52_755_445_000, 0)
            // Standard Error: 316_377
            .saturating_add(Weight::from_parts(9_223_957, 0).saturating_mul(p.into()))
            // Standard Error: 316_362
            .saturating_add(Weight::from_parts(158_869_676, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_005_000 picoseconds.
        Weight::from_parts(99_790_630, 0)
            // Standard Error: 24_176
            .saturating_add(Weight::from_parts(4_009_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 84_132_000 picoseconds.
        Weight::from_parts(123_054_974, 1131)
            // Standard Error: 8_978
            .saturating_add(Weight::from_parts(12_261_236, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 86_456_000 picoseconds.
        Weight::from_parts(87_290_000, 1131)
            // Standard Error: 32_710
            .saturating_add(Weight::from_parts(40_348_047, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_315_636_000 picoseconds.
        Weight::from_parts(6_368_314_920, 5069931)
            // Standard Error: 45_831
            .saturating_add(Weight::from_parts(40_225_073, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 87_635_000 picoseconds.
        Weight::from_parts(88_938_000, 1939)
            // Standard Error: 31_266
            .saturating_add(Weight::from_parts(48_171_710, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_974_000 picoseconds.
        Weight::from_parts(81_285_344, 1131)
            // Standard Error: 72_664
            .saturating_add(Weight::from_parts(41_123_068, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 646_122_000 picoseconds.
        Weight::from_parts(758_882_625, 1496)
            // Standard Error: 325_760
            .saturating_add(Weight::from_parts(52_557_317, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_047_811_000 picoseconds.
        Weight::from_parts(1_176_816_812, 317931)
            // Standard Error: 256_525
            .saturating_add(Weight::from_parts(46_665_048, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_329_252_000 picoseconds.
        Weight::from_parts(4_346_280_323, 0)
            // Standard Error: 10_735
            .saturating_add(Weight::from_parts(3_341_153, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_338_293_000 picoseconds.
        Weight::from_parts(4_355_397_735, 0)
            // Standard Error: 11_622
            .saturating_add(Weight::from_parts(3_370_618, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_511_010_000 picoseconds.
        Weight::from_parts(10_498_238_779, 0)
            // Standard Error: 176_557
            .saturating_add(Weight::from_parts(16_604_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_053_150_000 picoseconds.
        Weight::from_parts(10_930_780_554, 0)
            // Standard Error: 269_859
            .saturating_add(Weight::from_parts(9_482_483, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_362_000, 0)
            // Standard Error: 7_348
            .saturating_add(Weight::from_parts(3_840_051, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_300_000 picoseconds.
        Weight::from_parts(290_593, 0)
            // Standard Error: 7_826
            .saturating_add(Weight::from_parts(3_165_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(2_971_106, 0)
            // Standard Error: 1_975
            .saturating_add(Weight::from_parts(1_602_581, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_238_000 picoseconds.
        Weight::from_parts(2_321_000, 0)
            // Standard Error: 9_322
            .saturating_add(Weight::from_parts(3_005_053, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(7_473_690, 0)
            // Standard Error: 21_006
            .saturating_add(Weight::from_parts(4_840_249, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_859_000 picoseconds.
        Weight::from_parts(5_655_579, 0)
            // Standard Error: 1_298
            .saturating_add(Weight::from_parts(179_547, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_254_000 picoseconds.
        Weight::from_parts(5_303_034, 0)
            // Standard Error: 8_086
            .saturating_add(Weight::from_parts(2_589_617, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_589_617 -
            2_439_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(4_664_641, 0)
            // Standard Error: 13_519
            .saturating_add(Weight::from_parts(2_439_430, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_608_000 picoseconds.
        Weight::from_parts(21_766_004, 0)
            // Standard Error: 41_599
            .saturating_add(Weight::from_parts(9_912_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_055_000 picoseconds.
        Weight::from_parts(6_467_994, 0)
            // Standard Error: 5_828
            .saturating_add(Weight::from_parts(1_233_233, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_397_000 picoseconds.
        Weight::from_parts(5_700_462, 0)
            // Standard Error: 11
            .saturating_add(Weight::from_parts(29, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_271_000 picoseconds.
        Weight::from_parts(1_452_321, 0)
            // Standard Error: 3_916
            .saturating_add(Weight::from_parts(315_761, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_377_000 picoseconds.
        Weight::from_parts(2_413_000, 0)
            // Standard Error: 5_457
            .saturating_add(Weight::from_parts(833_553, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_339_000 picoseconds.
        Weight::from_parts(2_442_000, 0)
            // Standard Error: 6_163
            .saturating_add(Weight::from_parts(890_001, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_029_000 picoseconds.
        Weight::from_parts(1_724_119, 0)
            // Standard Error: 8_328
            .saturating_add(Weight::from_parts(915_186, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_071_000 picoseconds.
        Weight::from_parts(6_140_000, 0)
            // Standard Error: 7_701
            .saturating_add(Weight::from_parts(1_443_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_938_000 picoseconds.
        Weight::from_parts(531_816, 0)
            // Standard Error: 12_544
            .saturating_add(Weight::from_parts(7_468_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_291_000, 0)
            // Standard Error: 5_409
            .saturating_add(Weight::from_parts(3_365_081, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_281_000 picoseconds.
        Weight::from_parts(2_331_000, 0)
            // Standard Error: 5_272
            .saturating_add(Weight::from_parts(3_183_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_304_000 picoseconds.
        Weight::from_parts(2_331_000, 0)
            // Standard Error: 5_326
            .saturating_add(Weight::from_parts(3_173_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_343_000, 0)
            // Standard Error: 5_014
            .saturating_add(Weight::from_parts(2_751_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_000 picoseconds.
        Weight::from_parts(2_293_000, 0)
            // Standard Error: 8_076
            .saturating_add(Weight::from_parts(696_815, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(1_157_543, 0)
            // Standard Error: 4_189
            .saturating_add(Weight::from_parts(467_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_320_000, 0)
            // Standard Error: 9_033
            .saturating_add(Weight::from_parts(1_927_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_311_000 picoseconds.
        Weight::from_parts(2_389_000, 0)
            // Standard Error: 7_980
            .saturating_add(Weight::from_parts(1_253_498, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(939_916, 0)
            // Standard Error: 5_218
            .saturating_add(Weight::from_parts(419_964, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(2_047_278, 0)
            // Standard Error: 3_469
            .saturating_add(Weight::from_parts(230_357, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_337_000 picoseconds.
        Weight::from_parts(1_823_250, 0)
            // Standard Error: 4_347
            .saturating_add(Weight::from_parts(248_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_320_000 picoseconds.
        Weight::from_parts(2_347_000, 0)
            // Standard Error: 8_688
            .saturating_add(Weight::from_parts(1_940_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_310_000 picoseconds.
        Weight::from_parts(2_377_000, 0)
            // Standard Error: 9_818
            .saturating_add(Weight::from_parts(1_357_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(2_328_000, 0)
            // Standard Error: 9_218
            .saturating_add(Weight::from_parts(2_017_444, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_383_000 picoseconds.
        Weight::from_parts(2_445_000, 0)
            // Standard Error: 7_725
            .saturating_add(Weight::from_parts(1_280_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_289_000 picoseconds.
        Weight::from_parts(2_369_000, 0)
            // Standard Error: 9_338
            .saturating_add(Weight::from_parts(1_935_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_314_000 picoseconds.
        Weight::from_parts(2_371_000, 0)
            // Standard Error: 11_101
            .saturating_add(Weight::from_parts(1_337_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_250_000 picoseconds.
        Weight::from_parts(2_358_000, 0)
            // Standard Error: 10_024
            .saturating_add(Weight::from_parts(1_946_463, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_354_000, 0)
            // Standard Error: 9_738
            .saturating_add(Weight::from_parts(1_362_261, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(2_358_000, 0)
            // Standard Error: 9_671
            .saturating_add(Weight::from_parts(2_036_998, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_264_000 picoseconds.
        Weight::from_parts(2_320_000, 0)
            // Standard Error: 8_352
            .saturating_add(Weight::from_parts(1_273_070, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_250_000 picoseconds.
        Weight::from_parts(2_287_000, 0)
            // Standard Error: 10_119
            .saturating_add(Weight::from_parts(1_996_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_343_000 picoseconds.
        Weight::from_parts(2_370_000, 0)
            // Standard Error: 7_764
            .saturating_add(Weight::from_parts(1_238_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_320_000 picoseconds.
        Weight::from_parts(2_345_000, 0)
            // Standard Error: 9_415
            .saturating_add(Weight::from_parts(1_937_248, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_250_000 picoseconds.
        Weight::from_parts(2_285_000, 0)
            // Standard Error: 8_135
            .saturating_add(Weight::from_parts(1_259_674, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(2_315_000, 0)
            // Standard Error: 9_995
            .saturating_add(Weight::from_parts(2_070_169, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_449_000, 0)
            // Standard Error: 7_868
            .saturating_add(Weight::from_parts(1_220_955, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_328_000, 0)
            // Standard Error: 9_542
            .saturating_add(Weight::from_parts(1_853_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_352_000 picoseconds.
        Weight::from_parts(2_402_000, 0)
            // Standard Error: 8_243
            .saturating_add(Weight::from_parts(1_196_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_285_000 picoseconds.
        Weight::from_parts(2_360_000, 0)
            // Standard Error: 10_107
            .saturating_add(Weight::from_parts(1_927_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(2_377_000, 0)
            // Standard Error: 8_364
            .saturating_add(Weight::from_parts(1_276_626, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(2_337_000, 0)
            // Standard Error: 10_487
            .saturating_add(Weight::from_parts(1_443_646, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(2_311_000, 0)
            // Standard Error: 7_226
            .saturating_add(Weight::from_parts(764_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_315_000 picoseconds.
        Weight::from_parts(2_378_000, 0)
            // Standard Error: 8_603
            .saturating_add(Weight::from_parts(1_361_751, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(2_375_000, 0)
            // Standard Error: 5_366
            .saturating_add(Weight::from_parts(682_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_290_000 picoseconds.
        Weight::from_parts(2_341_000, 0)
            // Standard Error: 8_190
            .saturating_add(Weight::from_parts(1_812_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_178_000 picoseconds.
        Weight::from_parts(2_263_000, 0)
            // Standard Error: 9_576
            .saturating_add(Weight::from_parts(1_356_631, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_240_000 picoseconds.
        Weight::from_parts(11_654_834, 0)
            // Standard Error: 23_549
            .saturating_add(Weight::from_parts(1_942_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_297_000 picoseconds.
        Weight::from_parts(6_821_199, 0)
            // Standard Error: 15_724
            .saturating_add(Weight::from_parts(2_035_554, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(3_772_660, 0)
            // Standard Error: 19_597
            .saturating_add(Weight::from_parts(2_723_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_307_000 picoseconds.
        Weight::from_parts(4_114_729, 0)
            // Standard Error: 20_119
            .saturating_add(Weight::from_parts(2_311_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_254_000 picoseconds.
        Weight::from_parts(11_338_601, 0)
            // Standard Error: 56_667
            .saturating_add(Weight::from_parts(8_923_621, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(6_512_733, 0)
            // Standard Error: 55_544
            .saturating_add(Weight::from_parts(7_244_815, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_226_000 picoseconds.
        Weight::from_parts(11_065_094, 0)
            // Standard Error: 30_743
            .saturating_add(Weight::from_parts(2_319_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(1_539_560, 0)
            // Standard Error: 17_395
            .saturating_add(Weight::from_parts(2_465_966, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_298_000 picoseconds.
        Weight::from_parts(2_353_000, 0)
            // Standard Error: 8_155
            .saturating_add(Weight::from_parts(1_385_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_286_000 picoseconds.
        Weight::from_parts(2_378_000, 0)
            // Standard Error: 6_839
            .saturating_add(Weight::from_parts(711_204, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_286_000 picoseconds.
        Weight::from_parts(2_380_000, 0)
            // Standard Error: 9_365
            .saturating_add(Weight::from_parts(1_334_056, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_329_000 picoseconds.
        Weight::from_parts(2_374_000, 0)
            // Standard Error: 5_763
            .saturating_add(Weight::from_parts(645_701, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(2_340_000, 0)
            // Standard Error: 10_994
            .saturating_add(Weight::from_parts(1_392_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_228_000 picoseconds.
        Weight::from_parts(2_294_000, 0)
            // Standard Error: 7_835
            .saturating_add(Weight::from_parts(798_879, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_327_000, 0)
            // Standard Error: 9_212
            .saturating_add(Weight::from_parts(1_212_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_271_000 picoseconds.
        Weight::from_parts(2_332_000, 0)
            // Standard Error: 5_064
            .saturating_add(Weight::from_parts(653_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_339_000, 0)
            // Standard Error: 7_670
            .saturating_add(Weight::from_parts(1_211_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_358_000 picoseconds.
        Weight::from_parts(2_392_000, 0)
            // Standard Error: 5_036
            .saturating_add(Weight::from_parts(652_474, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_243_000 picoseconds.
        Weight::from_parts(2_319_000, 0)
            // Standard Error: 8_702
            .saturating_add(Weight::from_parts(1_186_862, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_302_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 5_363
            .saturating_add(Weight::from_parts(733_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_238_000 picoseconds.
        Weight::from_parts(2_302_000, 0)
            // Standard Error: 7_764
            .saturating_add(Weight::from_parts(1_269_674, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_282_000 picoseconds.
        Weight::from_parts(2_369_000, 0)
            // Standard Error: 5_836
            .saturating_add(Weight::from_parts(681_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_271_000 picoseconds.
        Weight::from_parts(2_331_000, 0)
            // Standard Error: 7_256
            .saturating_add(Weight::from_parts(1_143_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_298_000, 0)
            // Standard Error: 6_711
            .saturating_add(Weight::from_parts(690_288, 0).saturating_mul(r.into()))
    }
}
