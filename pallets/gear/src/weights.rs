// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_in_handle,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_gas_available,gr_message_id,gr_pay_program_rent,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,initial_allocation,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,pay_program_rent,reinstrument_per_kb,resume_session_commit,resume_session_init,resume_session_push,send_message,send_reply,tasks_pause_program,tasks_pause_program_uninited,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_remove_resume_session,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_resume_session() -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn tasks_pause_program(c: u32, ) -> Weight;
    fn tasks_pause_program_uninited(c: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_318_000 picoseconds.
        Weight::from_parts(101_280_570, 0)
            // Standard Error: 80_300
            .saturating_add(Weight::from_parts(17_939_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_658_000 picoseconds.
        Weight::from_parts(104_617_834, 0)
            // Standard Error: 86_243
            .saturating_add(Weight::from_parts(13_387_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_619_000 picoseconds.
        Weight::from_parts(103_954_578, 0)
            // Standard Error: 81_446
            .saturating_add(Weight::from_parts(13_620_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_411_000 picoseconds.
        Weight::from_parts(101_676_610, 0)
            // Standard Error: 84_902
            .saturating_add(Weight::from_parts(16_527_278, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_502_000 picoseconds.
        Weight::from_parts(616_224_052, 0)
            // Standard Error: 773_751
            .saturating_add(Weight::from_parts(13_745_458, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_997_000 picoseconds.
        Weight::from_parts(612_507_284, 0)
            // Standard Error: 653_020
            .saturating_add(Weight::from_parts(4_559_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_130_000 picoseconds.
        Weight::from_parts(108_836_710, 0)
            // Standard Error: 77_013
            .saturating_add(Weight::from_parts(10_996_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_040_000 picoseconds.
        Weight::from_parts(110_403_872, 0)
            // Standard Error: 82_399
            .saturating_add(Weight::from_parts(8_230_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_154_000 picoseconds.
        Weight::from_parts(100_051_476, 0)
            // Standard Error: 2_413_312
            .saturating_add(Weight::from_parts(184_750_598, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_055_000 picoseconds.
        Weight::from_parts(102_503_296, 0)
            // Standard Error: 2_305_494
            .saturating_add(Weight::from_parts(168_488_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_818_000 picoseconds.
        Weight::from_parts(101_203_918, 0)
            // Standard Error: 1_800_745
            .saturating_add(Weight::from_parts(132_753_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_449_000 picoseconds.
        Weight::from_parts(101_884_390, 0)
            // Standard Error: 2_338_195
            .saturating_add(Weight::from_parts(166_722_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_823_000 picoseconds.
        Weight::from_parts(103_050_944, 0)
            // Standard Error: 2_356_762
            .saturating_add(Weight::from_parts(171_820_034, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 940_000 picoseconds.
        Weight::from_parts(1_002_000, 0)
            // Standard Error: 782
            .saturating_add(Weight::from_parts(208_491, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `79 + c * (1024 ±0)`
        //  Estimated: `3543 + c * (1024 ±0)`
        // Minimum execution time: 3_334_000 picoseconds.
        Weight::from_parts(3_375_000, 3543)
            // Standard Error: 1_118
            .saturating_add(Weight::from_parts(732_723, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_055_000 picoseconds.
        Weight::from_parts(79_381_319, 0)
            // Standard Error: 9_144
            .saturating_add(Weight::from_parts(2_570_535, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1304`
        //  Estimated: `51293`
        // Minimum execution time: 108_647_000 picoseconds.
        Weight::from_parts(110_009_000, 51293)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `923`
        //  Estimated: `21372`
        // Minimum execution time: 55_143_000 picoseconds.
        Weight::from_parts(56_805_000, 21372)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `570`
        //  Estimated: `17214`
        // Minimum execution time: 29_798_000 picoseconds.
        Weight::from_parts(30_262_000, 17214)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_077_000 picoseconds.
        Weight::from_parts(107_405, 7640)
            // Standard Error: 42_470
            .saturating_add(Weight::from_parts(14_653_411, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1457 + c * (16389 ±0)`
        //  Estimated: `42178 + c * (131112 ±0)`
        // Minimum execution time: 71_039_000 picoseconds.
        Weight::from_parts(72_299_000, 42178)
            // Standard Error: 160_822
            .saturating_add(Weight::from_parts(55_853_436, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `46`
        //  Estimated: `5134`
        // Minimum execution time: 86_504_000 picoseconds.
        Weight::from_parts(34_064_877, 5134)
            // Standard Error: 55_987
            .saturating_add(Weight::from_parts(59_938_964, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1043`
        //  Estimated: `49852`
        // Minimum execution time: 93_992_000 picoseconds.
        Weight::from_parts(112_140_558, 49852)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_659, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `453`
        //  Estimated: `44268`
        // Minimum execution time: 11_215_583_000 picoseconds.
        Weight::from_parts(269_175_811, 44268)
            // Standard Error: 168_335
            .saturating_add(Weight::from_parts(60_946_786, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_606, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `530`
        //  Estimated: `31259`
        // Minimum execution time: 73_050_000 picoseconds.
        Weight::from_parts(52_777_661, 31259)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_096, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1303`
        //  Estimated: `53823`
        // Minimum execution time: 121_230_000 picoseconds.
        Weight::from_parts(90_944_416, 53823)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_139, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89393`
        // Minimum execution time: 355_167_000 picoseconds.
        Weight::from_parts(372_829_840, 89393)
            .saturating_add(T::DbWeight::get().reads(31_u64))
            .saturating_add(T::DbWeight::get().writes(24_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89133`
        // Minimum execution time: 372_587_000 picoseconds.
        Weight::from_parts(394_084_191, 89133)
            .saturating_add(T::DbWeight::get().reads(31_u64))
            .saturating_add(T::DbWeight::get().writes(24_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 68_187_000 picoseconds.
        Weight::from_parts(68_558_000, 3899)
            // Standard Error: 27_915
            .saturating_add(Weight::from_parts(58_796_526, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_015_000 picoseconds.
        Weight::from_parts(97_206_000, 0)
            // Standard Error: 4_027_218
            .saturating_add(Weight::from_parts(726_422_562, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 478_577_000 picoseconds.
        Weight::from_parts(422_451_423, 0)
            // Standard Error: 7_097
            .saturating_add(Weight::from_parts(30_818_100, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 206_931_000 picoseconds.
        Weight::from_parts(207_691_527, 0)
            // Standard Error: 282_633
            .saturating_add(Weight::from_parts(64_487_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_064_000 picoseconds.
        Weight::from_parts(101_558_562, 0)
            // Standard Error: 4_623
            .saturating_add(Weight::from_parts(2_375_193, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 151_146_000 picoseconds.
        Weight::from_parts(217_256_349, 0)
            // Standard Error: 29_237
            .saturating_add(Weight::from_parts(1_975_717, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_196_000 picoseconds.
        Weight::from_parts(108_926_990, 0)
            // Standard Error: 318_393
            .saturating_add(Weight::from_parts(91_378_956, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_417_000 picoseconds.
        Weight::from_parts(88_310_238, 0)
            // Standard Error: 299_870
            .saturating_add(Weight::from_parts(81_294_417, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_749_000 picoseconds.
        Weight::from_parts(93_468_238, 0)
            // Standard Error: 295_902
            .saturating_add(Weight::from_parts(80_444_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_950_000 picoseconds.
        Weight::from_parts(90_517_689, 0)
            // Standard Error: 300_071
            .saturating_add(Weight::from_parts(81_324_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_670_000 picoseconds.
        Weight::from_parts(94_834_124, 0)
            // Standard Error: 289_859
            .saturating_add(Weight::from_parts(80_290_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_336_000 picoseconds.
        Weight::from_parts(86_048_370, 0)
            // Standard Error: 334_590
            .saturating_add(Weight::from_parts(82_496_716, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_776_000 picoseconds.
        Weight::from_parts(92_492_516, 0)
            // Standard Error: 302_121
            .saturating_add(Weight::from_parts(80_305_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_737_000 picoseconds.
        Weight::from_parts(85_129_090, 0)
            // Standard Error: 337_214
            .saturating_add(Weight::from_parts(82_258_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_727_000 picoseconds.
        Weight::from_parts(635_848_691, 0)
            // Standard Error: 397_530
            .saturating_add(Weight::from_parts(118_535_613, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 701_695_000 picoseconds.
        Weight::from_parts(727_357_000, 0)
            // Standard Error: 55_125
            .saturating_add(Weight::from_parts(13_126_785, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_763_000 picoseconds.
        Weight::from_parts(90_730_813, 0)
            // Standard Error: 310_842
            .saturating_add(Weight::from_parts(81_980_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_650_000 picoseconds.
        Weight::from_parts(89_524_035, 0)
            // Standard Error: 345_918
            .saturating_add(Weight::from_parts(80_708_401, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_913_000 picoseconds.
        Weight::from_parts(102_248_975, 0)
            // Standard Error: 384_381
            .saturating_add(Weight::from_parts(160_818_946, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_453_000 picoseconds.
        Weight::from_parts(99_156_000, 0)
            // Standard Error: 3_782_115
            .saturating_add(Weight::from_parts(757_669_985, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_200_000 picoseconds.
        Weight::from_parts(161_859_726, 0)
            // Standard Error: 452_306
            .saturating_add(Weight::from_parts(237_297_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 329_274_000 picoseconds.
        Weight::from_parts(331_975_000, 0)
            // Standard Error: 62_024
            .saturating_add(Weight::from_parts(24_966_837, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_658_000 picoseconds.
        Weight::from_parts(165_038_205, 0)
            // Standard Error: 426_661
            .saturating_add(Weight::from_parts(242_448_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 330_466_000 picoseconds.
        Weight::from_parts(335_646_000, 0)
            // Standard Error: 53_780
            .saturating_add(Weight::from_parts(24_564_996, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 577_166_000 picoseconds.
        Weight::from_parts(669_546_125, 0)
            // Standard Error: 494_418
            .saturating_add(Weight::from_parts(255_161_659, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_908_000 picoseconds.
        Weight::from_parts(633_901_357, 0)
            // Standard Error: 424_287
            .saturating_add(Weight::from_parts(268_984_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_875_000 picoseconds.
        Weight::from_parts(86_527_311, 0)
            // Standard Error: 333_494
            .saturating_add(Weight::from_parts(87_366_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_732_896_000 picoseconds.
        Weight::from_parts(1_880_435_235, 0)
            // Standard Error: 398_900
            .saturating_add(Weight::from_parts(149_327_541, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 305_178_000 picoseconds.
        Weight::from_parts(306_954_000, 0)
            // Standard Error: 55_620
            .saturating_add(Weight::from_parts(34_421_631, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_735_965_000 picoseconds.
        Weight::from_parts(1_864_432_700, 0)
            // Standard Error: 395_783
            .saturating_add(Weight::from_parts(198_669_450, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_755_832_000 picoseconds.
        Weight::from_parts(1_857_868_326, 0)
            // Standard Error: 372_213
            .saturating_add(Weight::from_parts(203_509_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_069_000 picoseconds.
        Weight::from_parts(326_701_572, 0)
            // Standard Error: 365_213
            .saturating_add(Weight::from_parts(253_193_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 512_555_000 picoseconds.
        Weight::from_parts(523_153_000, 0)
            // Standard Error: 59_835
            .saturating_add(Weight::from_parts(24_933_128, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_877_519_000 picoseconds.
        Weight::from_parts(2_018_635_945, 0)
            // Standard Error: 497_052
            .saturating_add(Weight::from_parts(219_586_745, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_502_000 picoseconds.
        Weight::from_parts(103_199_315, 0)
            // Standard Error: 1_023
            .saturating_add(Weight::from_parts(485_881, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_771_000 picoseconds.
        Weight::from_parts(102_781_608, 0)
            // Standard Error: 1_018
            .saturating_add(Weight::from_parts(487_561, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_234_000 picoseconds.
        Weight::from_parts(126_734_358, 0)
            // Standard Error: 353_861
            .saturating_add(Weight::from_parts(127_714_815, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_931_000 picoseconds.
        Weight::from_parts(114_238_000, 0)
            // Standard Error: 2_841
            .saturating_add(Weight::from_parts(692_905, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_098_000 picoseconds.
        Weight::from_parts(105_152_363, 0)
            // Standard Error: 1_296
            .saturating_add(Weight::from_parts(489_370, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_614_000 picoseconds.
        Weight::from_parts(99_574_824, 0)
            // Standard Error: 1_135
            .saturating_add(Weight::from_parts(497_592, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_825_000 picoseconds.
        Weight::from_parts(92_739_319, 0)
            // Standard Error: 348_498
            .saturating_add(Weight::from_parts(82_328_788, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_803_000 picoseconds.
        Weight::from_parts(92_196_927, 0)
            // Standard Error: 286_312
            .saturating_add(Weight::from_parts(79_350_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_122_000 picoseconds.
        Weight::from_parts(93_076_163, 0)
            // Standard Error: 304_836
            .saturating_add(Weight::from_parts(82_823_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 577_467_000 picoseconds.
        Weight::from_parts(635_749_226, 0)
            // Standard Error: 415_070
            .saturating_add(Weight::from_parts(101_782_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 587_324_000 picoseconds.
        Weight::from_parts(656_444_613, 0)
            // Standard Error: 2_257
            .saturating_add(Weight::from_parts(107_299, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_688_000 picoseconds.
        Weight::from_parts(2_451_347_711, 0)
            // Standard Error: 485_356
            .saturating_add(Weight::from_parts(121_879_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_402_000 picoseconds.
        Weight::from_parts(2_391_302_010, 0)
            // Standard Error: 13_164
            .saturating_add(Weight::from_parts(12_590_230, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_985_000 picoseconds.
        Weight::from_parts(115_781_846, 0)
            // Standard Error: 351_917
            .saturating_add(Weight::from_parts(103_511_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 161_006_000 picoseconds.
        Weight::from_parts(162_915_000, 0)
            // Standard Error: 56_167
            .saturating_add(Weight::from_parts(30_584_827, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_539_000 picoseconds.
        Weight::from_parts(83_238_063, 0)
            // Standard Error: 377_762
            .saturating_add(Weight::from_parts(80_840_634, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 151_879_000 picoseconds.
        Weight::from_parts(238_657_998, 0)
            // Standard Error: 298_202
            .saturating_add(Weight::from_parts(138_836_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_617_000 picoseconds.
        Weight::from_parts(168_843_893, 0)
            // Standard Error: 380_898
            .saturating_add(Weight::from_parts(326_184_707, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_709_774_000 picoseconds.
        Weight::from_parts(51_925_581_000, 0)
            // Standard Error: 315_916
            .saturating_add(Weight::from_parts(9_472_267, 0).saturating_mul(p.into()))
            // Standard Error: 315_900
            .saturating_add(Weight::from_parts(178_455_937, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_140_000 picoseconds.
        Weight::from_parts(177_551_278, 0)
            // Standard Error: 400_463
            .saturating_add(Weight::from_parts(329_767_068, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_055_668_000 picoseconds.
        Weight::from_parts(50_258_208_000, 0)
            // Standard Error: 307_452
            .saturating_add(Weight::from_parts(9_437_833, 0).saturating_mul(p.into()))
            // Standard Error: 307_437
            .saturating_add(Weight::from_parts(179_506_972, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_292_000 picoseconds.
        Weight::from_parts(114_285_988, 0)
            // Standard Error: 30_563
            .saturating_add(Weight::from_parts(1_898_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 94_128_000 picoseconds.
        Weight::from_parts(96_087_000, 1131)
            // Standard Error: 19_328
            .saturating_add(Weight::from_parts(16_297_621, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_524_000 picoseconds.
        Weight::from_parts(96_457_000, 1131)
            // Standard Error: 46_222
            .saturating_add(Weight::from_parts(45_371_781, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_306_114_000 picoseconds.
        Weight::from_parts(8_497_117_687, 5069931)
            // Standard Error: 91_696
            .saturating_add(Weight::from_parts(44_263_939, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 96_098_000 picoseconds.
        Weight::from_parts(98_743_000, 1939)
            // Standard Error: 58_623
            .saturating_add(Weight::from_parts(56_221_179, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 103_180_000 picoseconds.
        Weight::from_parts(101_446_265, 1131)
            // Standard Error: 84_202
            .saturating_add(Weight::from_parts(43_038_911, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 599_659_000 picoseconds.
        Weight::from_parts(594_811_841, 1496)
            // Standard Error: 312_807
            .saturating_add(Weight::from_parts(53_330_618, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_103_846_000 picoseconds.
        Weight::from_parts(1_149_010_932, 317931)
            // Standard Error: 389_730
            .saturating_add(Weight::from_parts(54_710_214, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_329_000 picoseconds.
        Weight::from_parts(3_765_634, 0)
            // Standard Error: 335_874
            .saturating_add(Weight::from_parts(72_503_628, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_469_645_000 picoseconds.
        Weight::from_parts(4_202_319_098, 0)
            // Standard Error: 70_594
            .saturating_add(Weight::from_parts(5_170_601, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_447_236_000 picoseconds.
        Weight::from_parts(4_247_257_839, 0)
            // Standard Error: 60_646
            .saturating_add(Weight::from_parts(4_906_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_632_391_000 picoseconds.
        Weight::from_parts(11_941_025_154, 0)
            // Standard Error: 168_994
            .saturating_add(Weight::from_parts(8_573_688, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_445_049_000 picoseconds.
        Weight::from_parts(11_156_555_524, 0)
            // Standard Error: 205_982
            .saturating_add(Weight::from_parts(10_240_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_535_000, 0)
            // Standard Error: 7_950
            .saturating_add(Weight::from_parts(3_796_717, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(1_223_074, 0)
            // Standard Error: 9_104
            .saturating_add(Weight::from_parts(3_119_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(3_439_878, 0)
            // Standard Error: 1_615
            .saturating_add(Weight::from_parts(1_578_808, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_495_000 picoseconds.
        Weight::from_parts(2_533_000, 0)
            // Standard Error: 9_583
            .saturating_add(Weight::from_parts(2_972_648, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_518_000 picoseconds.
        Weight::from_parts(5_589_727, 0)
            // Standard Error: 25_059
            .saturating_add(Weight::from_parts(4_961_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_130_000 picoseconds.
        Weight::from_parts(5_353_459, 0)
            // Standard Error: 2_028
            .saturating_add(Weight::from_parts(176_771, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_491_000 picoseconds.
        Weight::from_parts(5_408_214, 0)
            // Standard Error: 8_917
            .saturating_add(Weight::from_parts(2_601_273, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_601_273 -
            2_457_801, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_464_000 picoseconds.
        Weight::from_parts(4_933_401, 0)
            // Standard Error: 12_227
            .saturating_add(Weight::from_parts(2_457_801, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_992_000 picoseconds.
        Weight::from_parts(20_001_853, 0)
            // Standard Error: 32_609
            .saturating_add(Weight::from_parts(10_122_477, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_476_000 picoseconds.
        Weight::from_parts(4_039_599, 0)
            // Standard Error: 6_883
            .saturating_add(Weight::from_parts(1_249_853, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_519_000 picoseconds.
        Weight::from_parts(5_899_718, 0)
            // Standard Error: 14
            .saturating_add(Weight::from_parts(70, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_144_000 picoseconds.
        Weight::from_parts(5_643_619, 0)
            // Standard Error: 2_068
            .saturating_add(Weight::from_parts(411_598, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_906_000 picoseconds.
        Weight::from_parts(3_553_891, 0)
            // Standard Error: 6_612
            .saturating_add(Weight::from_parts(1_065_184, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_091_000 picoseconds.
        Weight::from_parts(3_243_254, 0)
            // Standard Error: 9_883
            .saturating_add(Weight::from_parts(1_166_167, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_701_000 picoseconds.
        Weight::from_parts(2_968_233, 0)
            // Standard Error: 7_534
            .saturating_add(Weight::from_parts(833_156, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_799_000 picoseconds.
        Weight::from_parts(1_150_079, 0)
            // Standard Error: 10_412
            .saturating_add(Weight::from_parts(1_501_669, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_285_000 picoseconds.
        Weight::from_parts(3_036_413, 0)
            // Standard Error: 13_154
            .saturating_add(Weight::from_parts(7_329_527, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_526_000, 0)
            // Standard Error: 5_182
            .saturating_add(Weight::from_parts(3_372_244, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 5_347
            .saturating_add(Weight::from_parts(3_138_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_357_000 picoseconds.
        Weight::from_parts(138_891, 0)
            // Standard Error: 7_791
            .saturating_add(Weight::from_parts(3_191_328, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_482_000 picoseconds.
        Weight::from_parts(2_601_000, 0)
            // Standard Error: 4_225
            .saturating_add(Weight::from_parts(2_658_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 5_155
            .saturating_add(Weight::from_parts(621_787, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_469_000 picoseconds.
        Weight::from_parts(1_059_855, 0)
            // Standard Error: 5_881
            .saturating_add(Weight::from_parts(445_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_329_000 picoseconds.
        Weight::from_parts(2_435_000, 0)
            // Standard Error: 10_514
            .saturating_add(Weight::from_parts(1_912_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 7_053
            .saturating_add(Weight::from_parts(1_211_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_470_000 picoseconds.
        Weight::from_parts(1_058_179, 0)
            // Standard Error: 4_915
            .saturating_add(Weight::from_parts(448_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(1_070_529, 0)
            // Standard Error: 4_923
            .saturating_add(Weight::from_parts(442_847, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_395_000 picoseconds.
        Weight::from_parts(2_454_000, 0)
            // Standard Error: 4_678
            .saturating_add(Weight::from_parts(558_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_417_000 picoseconds.
        Weight::from_parts(238_415, 0)
            // Standard Error: 7_044
            .saturating_add(Weight::from_parts(607_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_402_000 picoseconds.
        Weight::from_parts(319_797, 0)
            // Standard Error: 6_419
            .saturating_add(Weight::from_parts(560_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_469_000 picoseconds.
        Weight::from_parts(2_102_360, 0)
            // Standard Error: 3_643
            .saturating_add(Weight::from_parts(330_364, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_700_000 picoseconds.
        Weight::from_parts(2_954_788, 0)
            // Standard Error: 1_913
            .saturating_add(Weight::from_parts(158_864, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_994_827, 0)
            // Standard Error: 2_196
            .saturating_add(Weight::from_parts(166_749, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_434_000, 0)
            // Standard Error: 8_845
            .saturating_add(Weight::from_parts(1_876_257, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_402_000 picoseconds.
        Weight::from_parts(2_560_000, 0)
            // Standard Error: 8_676
            .saturating_add(Weight::from_parts(1_242_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(2_516_000, 0)
            // Standard Error: 9_176
            .saturating_add(Weight::from_parts(1_863_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_406_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 7_604
            .saturating_add(Weight::from_parts(1_213_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_408_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 9_201
            .saturating_add(Weight::from_parts(1_855_225, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_460_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 8_286
            .saturating_add(Weight::from_parts(1_208_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_538_000, 0)
            // Standard Error: 8_310
            .saturating_add(Weight::from_parts(1_784_161, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_372_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 7_415
            .saturating_add(Weight::from_parts(1_183_784, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_464_000 picoseconds.
        Weight::from_parts(2_570_000, 0)
            // Standard Error: 8_870
            .saturating_add(Weight::from_parts(1_800_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_466_000 picoseconds.
        Weight::from_parts(2_495_000, 0)
            // Standard Error: 7_215
            .saturating_add(Weight::from_parts(1_180_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(2_502_000, 0)
            // Standard Error: 8_779
            .saturating_add(Weight::from_parts(1_829_085, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_502_000 picoseconds.
        Weight::from_parts(2_530_000, 0)
            // Standard Error: 7_917
            .saturating_add(Weight::from_parts(1_165_985, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 8_683
            .saturating_add(Weight::from_parts(1_784_822, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_446_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 7_979
            .saturating_add(Weight::from_parts(1_140_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_494_000, 0)
            // Standard Error: 9_680
            .saturating_add(Weight::from_parts(1_850_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_454_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 8_979
            .saturating_add(Weight::from_parts(1_240_628, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 9_014
            .saturating_add(Weight::from_parts(1_799_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_390_000 picoseconds.
        Weight::from_parts(2_524_000, 0)
            // Standard Error: 6_781
            .saturating_add(Weight::from_parts(1_163_108, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 9_194
            .saturating_add(Weight::from_parts(1_806_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_437_000 picoseconds.
        Weight::from_parts(2_502_000, 0)
            // Standard Error: 7_413
            .saturating_add(Weight::from_parts(1_154_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_437_000 picoseconds.
        Weight::from_parts(2_474_000, 0)
            // Standard Error: 7_674
            .saturating_add(Weight::from_parts(1_308_503, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_438_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 4_485
            .saturating_add(Weight::from_parts(629_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_519_000 picoseconds.
        Weight::from_parts(2_573_000, 0)
            // Standard Error: 7_050
            .saturating_add(Weight::from_parts(1_279_086, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_446_000 picoseconds.
        Weight::from_parts(2_514_000, 0)
            // Standard Error: 4_340
            .saturating_add(Weight::from_parts(636_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_000 picoseconds.
        Weight::from_parts(2_513_000, 0)
            // Standard Error: 10_768
            .saturating_add(Weight::from_parts(1_799_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_452_000 picoseconds.
        Weight::from_parts(2_511_000, 0)
            // Standard Error: 7_699
            .saturating_add(Weight::from_parts(1_235_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_473_000 picoseconds.
        Weight::from_parts(1_488_869, 0)
            // Standard Error: 11_669
            .saturating_add(Weight::from_parts(2_728_562, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_510_000 picoseconds.
        Weight::from_parts(1_304_811, 0)
            // Standard Error: 11_290
            .saturating_add(Weight::from_parts(2_424_314, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_440_000 picoseconds.
        Weight::from_parts(2_270_874, 0)
            // Standard Error: 16_583
            .saturating_add(Weight::from_parts(2_933_685, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(883_757, 0)
            // Standard Error: 11_400
            .saturating_add(Weight::from_parts(2_528_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_450_000 picoseconds.
        Weight::from_parts(4_093_788, 0)
            // Standard Error: 51_471
            .saturating_add(Weight::from_parts(9_246_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_000 picoseconds.
        Weight::from_parts(817_881, 0)
            // Standard Error: 43_223
            .saturating_add(Weight::from_parts(7_592_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_382_000 picoseconds.
        Weight::from_parts(2_630_025, 0)
            // Standard Error: 15_174
            .saturating_add(Weight::from_parts(2_976_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(3_028_402, 0)
            // Standard Error: 17_165
            .saturating_add(Weight::from_parts(2_391_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 7_801
            .saturating_add(Weight::from_parts(1_294_803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_501_000 picoseconds.
        Weight::from_parts(2_616_000, 0)
            // Standard Error: 4_934
            .saturating_add(Weight::from_parts(660_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 9_377
            .saturating_add(Weight::from_parts(1_335_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_432_000 picoseconds.
        Weight::from_parts(2_494_000, 0)
            // Standard Error: 6_713
            .saturating_add(Weight::from_parts(685_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_492_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 9_090
            .saturating_add(Weight::from_parts(1_332_736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 5_367
            .saturating_add(Weight::from_parts(665_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_412_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 7_570
            .saturating_add(Weight::from_parts(1_147_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 5_338
            .saturating_add(Weight::from_parts(625_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_546_000, 0)
            // Standard Error: 7_175
            .saturating_add(Weight::from_parts(1_086_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_522_000 picoseconds.
        Weight::from_parts(2_600_000, 0)
            // Standard Error: 4_641
            .saturating_add(Weight::from_parts(582_893, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_450_000 picoseconds.
        Weight::from_parts(2_583_000, 0)
            // Standard Error: 7_572
            .saturating_add(Weight::from_parts(1_106_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_465_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 4_899
            .saturating_add(Weight::from_parts(608_744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 7_995
            .saturating_add(Weight::from_parts(1_146_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_297_000 picoseconds.
        Weight::from_parts(2_437_000, 0)
            // Standard Error: 4_820
            .saturating_add(Weight::from_parts(608_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_495_000 picoseconds.
        Weight::from_parts(2_570_000, 0)
            // Standard Error: 7_896
            .saturating_add(Weight::from_parts(1_132_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(2_505_000, 0)
            // Standard Error: 4_569
            .saturating_add(Weight::from_parts(601_467, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 5_740_000 picoseconds.
        Weight::from_parts(6_066_000, 4169)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1039`
        //  Estimated: `23781`
        // Minimum execution time: 61_123_000 picoseconds.
        Weight::from_parts(63_708_000, 23781)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `820`
        //  Estimated: `21750`
        // Minimum execution time: 46_983_000 picoseconds.
        Weight::from_parts(47_969_000, 21750)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `942`
        //  Estimated: `34143`
        // Minimum execution time: 76_143_000 picoseconds.
        Weight::from_parts(78_348_000, 34143)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `627`
        //  Estimated: `20101`
        // Minimum execution time: 31_555_000 picoseconds.
        Weight::from_parts(32_526_000, 20101)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `908`
        //  Estimated: `26160`
        // Minimum execution time: 49_881_000 picoseconds.
        Weight::from_parts(52_020_000, 26160)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_319_000 picoseconds.
        Weight::from_parts(3_533_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1558`
        //  Estimated: `57552`
        // Minimum execution time: 111_830_000 picoseconds.
        Weight::from_parts(114_322_000, 57552)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1264`
        //  Estimated: `46350`
        // Minimum execution time: 90_693_000 picoseconds.
        Weight::from_parts(91_994_000, 46350)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2236 + c * (16400 ±0)`
        //  Estimated: `19543 + c * (84480 ±0)`
        // Minimum execution time: 29_042_000 picoseconds.
        Weight::from_parts(29_358_000, 19543)
            // Standard Error: 74_146
            .saturating_add(Weight::from_parts(39_817_812, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3061 + c * (42 ±0)`
        //  Estimated: `59827 + c * (2947 ±0)`
        // Minimum execution time: 88_878_000 picoseconds.
        Weight::from_parts(79_153_552, 59827)
            // Standard Error: 2_146
            .saturating_add(Weight::from_parts(1_074_924, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_318_000 picoseconds.
        Weight::from_parts(101_280_570, 0)
            // Standard Error: 80_300
            .saturating_add(Weight::from_parts(17_939_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_658_000 picoseconds.
        Weight::from_parts(104_617_834, 0)
            // Standard Error: 86_243
            .saturating_add(Weight::from_parts(13_387_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_619_000 picoseconds.
        Weight::from_parts(103_954_578, 0)
            // Standard Error: 81_446
            .saturating_add(Weight::from_parts(13_620_330, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_411_000 picoseconds.
        Weight::from_parts(101_676_610, 0)
            // Standard Error: 84_902
            .saturating_add(Weight::from_parts(16_527_278, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_502_000 picoseconds.
        Weight::from_parts(616_224_052, 0)
            // Standard Error: 773_751
            .saturating_add(Weight::from_parts(13_745_458, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_997_000 picoseconds.
        Weight::from_parts(612_507_284, 0)
            // Standard Error: 653_020
            .saturating_add(Weight::from_parts(4_559_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_130_000 picoseconds.
        Weight::from_parts(108_836_710, 0)
            // Standard Error: 77_013
            .saturating_add(Weight::from_parts(10_996_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_040_000 picoseconds.
        Weight::from_parts(110_403_872, 0)
            // Standard Error: 82_399
            .saturating_add(Weight::from_parts(8_230_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_154_000 picoseconds.
        Weight::from_parts(100_051_476, 0)
            // Standard Error: 2_413_312
            .saturating_add(Weight::from_parts(184_750_598, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_055_000 picoseconds.
        Weight::from_parts(102_503_296, 0)
            // Standard Error: 2_305_494
            .saturating_add(Weight::from_parts(168_488_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_818_000 picoseconds.
        Weight::from_parts(101_203_918, 0)
            // Standard Error: 1_800_745
            .saturating_add(Weight::from_parts(132_753_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_449_000 picoseconds.
        Weight::from_parts(101_884_390, 0)
            // Standard Error: 2_338_195
            .saturating_add(Weight::from_parts(166_722_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_823_000 picoseconds.
        Weight::from_parts(103_050_944, 0)
            // Standard Error: 2_356_762
            .saturating_add(Weight::from_parts(171_820_034, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 940_000 picoseconds.
        Weight::from_parts(1_002_000, 0)
            // Standard Error: 782
            .saturating_add(Weight::from_parts(208_491, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `79 + c * (1024 ±0)`
        //  Estimated: `3543 + c * (1024 ±0)`
        // Minimum execution time: 3_334_000 picoseconds.
        Weight::from_parts(3_375_000, 3543)
            // Standard Error: 1_118
            .saturating_add(Weight::from_parts(732_723, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 61_055_000 picoseconds.
        Weight::from_parts(79_381_319, 0)
            // Standard Error: 9_144
            .saturating_add(Weight::from_parts(2_570_535, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1304`
        //  Estimated: `51293`
        // Minimum execution time: 108_647_000 picoseconds.
        Weight::from_parts(110_009_000, 51293)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `923`
        //  Estimated: `21372`
        // Minimum execution time: 55_143_000 picoseconds.
        Weight::from_parts(56_805_000, 21372)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `570`
        //  Estimated: `17214`
        // Minimum execution time: 29_798_000 picoseconds.
        Weight::from_parts(30_262_000, 17214)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_077_000 picoseconds.
        Weight::from_parts(107_405, 7640)
            // Standard Error: 42_470
            .saturating_add(Weight::from_parts(14_653_411, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1457 + c * (16389 ±0)`
        //  Estimated: `42178 + c * (131112 ±0)`
        // Minimum execution time: 71_039_000 picoseconds.
        Weight::from_parts(72_299_000, 42178)
            // Standard Error: 160_822
            .saturating_add(Weight::from_parts(55_853_436, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `46`
        //  Estimated: `5134`
        // Minimum execution time: 86_504_000 picoseconds.
        Weight::from_parts(34_064_877, 5134)
            // Standard Error: 55_987
            .saturating_add(Weight::from_parts(59_938_964, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1043`
        //  Estimated: `49852`
        // Minimum execution time: 93_992_000 picoseconds.
        Weight::from_parts(112_140_558, 49852)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(2_659, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `453`
        //  Estimated: `44268`
        // Minimum execution time: 11_215_583_000 picoseconds.
        Weight::from_parts(269_175_811, 44268)
            // Standard Error: 168_335
            .saturating_add(Weight::from_parts(60_946_786, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_606, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `530`
        //  Estimated: `31259`
        // Minimum execution time: 73_050_000 picoseconds.
        Weight::from_parts(52_777_661, 31259)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_096, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1303`
        //  Estimated: `53823`
        // Minimum execution time: 121_230_000 picoseconds.
        Weight::from_parts(90_944_416, 53823)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_139, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89393`
        // Minimum execution time: 355_167_000 picoseconds.
        Weight::from_parts(372_829_840, 89393)
            .saturating_add(RocksDbWeight::get().reads(31_u64))
            .saturating_add(RocksDbWeight::get().writes(24_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89133`
        // Minimum execution time: 372_587_000 picoseconds.
        Weight::from_parts(394_084_191, 89133)
            .saturating_add(RocksDbWeight::get().reads(31_u64))
            .saturating_add(RocksDbWeight::get().writes(24_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 68_187_000 picoseconds.
        Weight::from_parts(68_558_000, 3899)
            // Standard Error: 27_915
            .saturating_add(Weight::from_parts(58_796_526, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_015_000 picoseconds.
        Weight::from_parts(97_206_000, 0)
            // Standard Error: 4_027_218
            .saturating_add(Weight::from_parts(726_422_562, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 478_577_000 picoseconds.
        Weight::from_parts(422_451_423, 0)
            // Standard Error: 7_097
            .saturating_add(Weight::from_parts(30_818_100, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 206_931_000 picoseconds.
        Weight::from_parts(207_691_527, 0)
            // Standard Error: 282_633
            .saturating_add(Weight::from_parts(64_487_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_064_000 picoseconds.
        Weight::from_parts(101_558_562, 0)
            // Standard Error: 4_623
            .saturating_add(Weight::from_parts(2_375_193, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 151_146_000 picoseconds.
        Weight::from_parts(217_256_349, 0)
            // Standard Error: 29_237
            .saturating_add(Weight::from_parts(1_975_717, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_196_000 picoseconds.
        Weight::from_parts(108_926_990, 0)
            // Standard Error: 318_393
            .saturating_add(Weight::from_parts(91_378_956, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_417_000 picoseconds.
        Weight::from_parts(88_310_238, 0)
            // Standard Error: 299_870
            .saturating_add(Weight::from_parts(81_294_417, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_749_000 picoseconds.
        Weight::from_parts(93_468_238, 0)
            // Standard Error: 295_902
            .saturating_add(Weight::from_parts(80_444_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_950_000 picoseconds.
        Weight::from_parts(90_517_689, 0)
            // Standard Error: 300_071
            .saturating_add(Weight::from_parts(81_324_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_670_000 picoseconds.
        Weight::from_parts(94_834_124, 0)
            // Standard Error: 289_859
            .saturating_add(Weight::from_parts(80_290_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_336_000 picoseconds.
        Weight::from_parts(86_048_370, 0)
            // Standard Error: 334_590
            .saturating_add(Weight::from_parts(82_496_716, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_776_000 picoseconds.
        Weight::from_parts(92_492_516, 0)
            // Standard Error: 302_121
            .saturating_add(Weight::from_parts(80_305_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_737_000 picoseconds.
        Weight::from_parts(85_129_090, 0)
            // Standard Error: 337_214
            .saturating_add(Weight::from_parts(82_258_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_727_000 picoseconds.
        Weight::from_parts(635_848_691, 0)
            // Standard Error: 397_530
            .saturating_add(Weight::from_parts(118_535_613, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 701_695_000 picoseconds.
        Weight::from_parts(727_357_000, 0)
            // Standard Error: 55_125
            .saturating_add(Weight::from_parts(13_126_785, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_763_000 picoseconds.
        Weight::from_parts(90_730_813, 0)
            // Standard Error: 310_842
            .saturating_add(Weight::from_parts(81_980_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_650_000 picoseconds.
        Weight::from_parts(89_524_035, 0)
            // Standard Error: 345_918
            .saturating_add(Weight::from_parts(80_708_401, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_913_000 picoseconds.
        Weight::from_parts(102_248_975, 0)
            // Standard Error: 384_381
            .saturating_add(Weight::from_parts(160_818_946, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_453_000 picoseconds.
        Weight::from_parts(99_156_000, 0)
            // Standard Error: 3_782_115
            .saturating_add(Weight::from_parts(757_669_985, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_200_000 picoseconds.
        Weight::from_parts(161_859_726, 0)
            // Standard Error: 452_306
            .saturating_add(Weight::from_parts(237_297_681, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 329_274_000 picoseconds.
        Weight::from_parts(331_975_000, 0)
            // Standard Error: 62_024
            .saturating_add(Weight::from_parts(24_966_837, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_658_000 picoseconds.
        Weight::from_parts(165_038_205, 0)
            // Standard Error: 426_661
            .saturating_add(Weight::from_parts(242_448_302, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 330_466_000 picoseconds.
        Weight::from_parts(335_646_000, 0)
            // Standard Error: 53_780
            .saturating_add(Weight::from_parts(24_564_996, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 577_166_000 picoseconds.
        Weight::from_parts(669_546_125, 0)
            // Standard Error: 494_418
            .saturating_add(Weight::from_parts(255_161_659, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_908_000 picoseconds.
        Weight::from_parts(633_901_357, 0)
            // Standard Error: 424_287
            .saturating_add(Weight::from_parts(268_984_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_875_000 picoseconds.
        Weight::from_parts(86_527_311, 0)
            // Standard Error: 333_494
            .saturating_add(Weight::from_parts(87_366_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_732_896_000 picoseconds.
        Weight::from_parts(1_880_435_235, 0)
            // Standard Error: 398_900
            .saturating_add(Weight::from_parts(149_327_541, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 305_178_000 picoseconds.
        Weight::from_parts(306_954_000, 0)
            // Standard Error: 55_620
            .saturating_add(Weight::from_parts(34_421_631, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_735_965_000 picoseconds.
        Weight::from_parts(1_864_432_700, 0)
            // Standard Error: 395_783
            .saturating_add(Weight::from_parts(198_669_450, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_755_832_000 picoseconds.
        Weight::from_parts(1_857_868_326, 0)
            // Standard Error: 372_213
            .saturating_add(Weight::from_parts(203_509_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_069_000 picoseconds.
        Weight::from_parts(326_701_572, 0)
            // Standard Error: 365_213
            .saturating_add(Weight::from_parts(253_193_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 512_555_000 picoseconds.
        Weight::from_parts(523_153_000, 0)
            // Standard Error: 59_835
            .saturating_add(Weight::from_parts(24_933_128, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_877_519_000 picoseconds.
        Weight::from_parts(2_018_635_945, 0)
            // Standard Error: 497_052
            .saturating_add(Weight::from_parts(219_586_745, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 116_502_000 picoseconds.
        Weight::from_parts(103_199_315, 0)
            // Standard Error: 1_023
            .saturating_add(Weight::from_parts(485_881, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_771_000 picoseconds.
        Weight::from_parts(102_781_608, 0)
            // Standard Error: 1_018
            .saturating_add(Weight::from_parts(487_561, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_234_000 picoseconds.
        Weight::from_parts(126_734_358, 0)
            // Standard Error: 353_861
            .saturating_add(Weight::from_parts(127_714_815, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 112_931_000 picoseconds.
        Weight::from_parts(114_238_000, 0)
            // Standard Error: 2_841
            .saturating_add(Weight::from_parts(692_905, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 119_098_000 picoseconds.
        Weight::from_parts(105_152_363, 0)
            // Standard Error: 1_296
            .saturating_add(Weight::from_parts(489_370, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 111_614_000 picoseconds.
        Weight::from_parts(99_574_824, 0)
            // Standard Error: 1_135
            .saturating_add(Weight::from_parts(497_592, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_825_000 picoseconds.
        Weight::from_parts(92_739_319, 0)
            // Standard Error: 348_498
            .saturating_add(Weight::from_parts(82_328_788, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_803_000 picoseconds.
        Weight::from_parts(92_196_927, 0)
            // Standard Error: 286_312
            .saturating_add(Weight::from_parts(79_350_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_122_000 picoseconds.
        Weight::from_parts(93_076_163, 0)
            // Standard Error: 304_836
            .saturating_add(Weight::from_parts(82_823_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 577_467_000 picoseconds.
        Weight::from_parts(635_749_226, 0)
            // Standard Error: 415_070
            .saturating_add(Weight::from_parts(101_782_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 587_324_000 picoseconds.
        Weight::from_parts(656_444_613, 0)
            // Standard Error: 2_257
            .saturating_add(Weight::from_parts(107_299, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_688_000 picoseconds.
        Weight::from_parts(2_451_347_711, 0)
            // Standard Error: 485_356
            .saturating_add(Weight::from_parts(121_879_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_402_000 picoseconds.
        Weight::from_parts(2_391_302_010, 0)
            // Standard Error: 13_164
            .saturating_add(Weight::from_parts(12_590_230, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_985_000 picoseconds.
        Weight::from_parts(115_781_846, 0)
            // Standard Error: 351_917
            .saturating_add(Weight::from_parts(103_511_729, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 161_006_000 picoseconds.
        Weight::from_parts(162_915_000, 0)
            // Standard Error: 56_167
            .saturating_add(Weight::from_parts(30_584_827, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_539_000 picoseconds.
        Weight::from_parts(83_238_063, 0)
            // Standard Error: 377_762
            .saturating_add(Weight::from_parts(80_840_634, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 151_879_000 picoseconds.
        Weight::from_parts(238_657_998, 0)
            // Standard Error: 298_202
            .saturating_add(Weight::from_parts(138_836_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_617_000 picoseconds.
        Weight::from_parts(168_843_893, 0)
            // Standard Error: 380_898
            .saturating_add(Weight::from_parts(326_184_707, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_709_774_000 picoseconds.
        Weight::from_parts(51_925_581_000, 0)
            // Standard Error: 315_916
            .saturating_add(Weight::from_parts(9_472_267, 0).saturating_mul(p.into()))
            // Standard Error: 315_900
            .saturating_add(Weight::from_parts(178_455_937, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_140_000 picoseconds.
        Weight::from_parts(177_551_278, 0)
            // Standard Error: 400_463
            .saturating_add(Weight::from_parts(329_767_068, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_055_668_000 picoseconds.
        Weight::from_parts(50_258_208_000, 0)
            // Standard Error: 307_452
            .saturating_add(Weight::from_parts(9_437_833, 0).saturating_mul(p.into()))
            // Standard Error: 307_437
            .saturating_add(Weight::from_parts(179_506_972, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_292_000 picoseconds.
        Weight::from_parts(114_285_988, 0)
            // Standard Error: 30_563
            .saturating_add(Weight::from_parts(1_898_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 94_128_000 picoseconds.
        Weight::from_parts(96_087_000, 1131)
            // Standard Error: 19_328
            .saturating_add(Weight::from_parts(16_297_621, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_524_000 picoseconds.
        Weight::from_parts(96_457_000, 1131)
            // Standard Error: 46_222
            .saturating_add(Weight::from_parts(45_371_781, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_306_114_000 picoseconds.
        Weight::from_parts(8_497_117_687, 5069931)
            // Standard Error: 91_696
            .saturating_add(Weight::from_parts(44_263_939, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 96_098_000 picoseconds.
        Weight::from_parts(98_743_000, 1939)
            // Standard Error: 58_623
            .saturating_add(Weight::from_parts(56_221_179, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 103_180_000 picoseconds.
        Weight::from_parts(101_446_265, 1131)
            // Standard Error: 84_202
            .saturating_add(Weight::from_parts(43_038_911, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 599_659_000 picoseconds.
        Weight::from_parts(594_811_841, 1496)
            // Standard Error: 312_807
            .saturating_add(Weight::from_parts(53_330_618, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_103_846_000 picoseconds.
        Weight::from_parts(1_149_010_932, 317931)
            // Standard Error: 389_730
            .saturating_add(Weight::from_parts(54_710_214, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_329_000 picoseconds.
        Weight::from_parts(3_765_634, 0)
            // Standard Error: 335_874
            .saturating_add(Weight::from_parts(72_503_628, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_469_645_000 picoseconds.
        Weight::from_parts(4_202_319_098, 0)
            // Standard Error: 70_594
            .saturating_add(Weight::from_parts(5_170_601, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_447_236_000 picoseconds.
        Weight::from_parts(4_247_257_839, 0)
            // Standard Error: 60_646
            .saturating_add(Weight::from_parts(4_906_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_632_391_000 picoseconds.
        Weight::from_parts(11_941_025_154, 0)
            // Standard Error: 168_994
            .saturating_add(Weight::from_parts(8_573_688, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_445_049_000 picoseconds.
        Weight::from_parts(11_156_555_524, 0)
            // Standard Error: 205_982
            .saturating_add(Weight::from_parts(10_240_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_535_000, 0)
            // Standard Error: 7_950
            .saturating_add(Weight::from_parts(3_796_717, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(1_223_074, 0)
            // Standard Error: 9_104
            .saturating_add(Weight::from_parts(3_119_810, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(3_439_878, 0)
            // Standard Error: 1_615
            .saturating_add(Weight::from_parts(1_578_808, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_495_000 picoseconds.
        Weight::from_parts(2_533_000, 0)
            // Standard Error: 9_583
            .saturating_add(Weight::from_parts(2_972_648, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_518_000 picoseconds.
        Weight::from_parts(5_589_727, 0)
            // Standard Error: 25_059
            .saturating_add(Weight::from_parts(4_961_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_130_000 picoseconds.
        Weight::from_parts(5_353_459, 0)
            // Standard Error: 2_028
            .saturating_add(Weight::from_parts(176_771, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_491_000 picoseconds.
        Weight::from_parts(5_408_214, 0)
            // Standard Error: 8_917
            .saturating_add(Weight::from_parts(2_601_273, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_601_273 -
            2_457_801, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_464_000 picoseconds.
        Weight::from_parts(4_933_401, 0)
            // Standard Error: 12_227
            .saturating_add(Weight::from_parts(2_457_801, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_992_000 picoseconds.
        Weight::from_parts(20_001_853, 0)
            // Standard Error: 32_609
            .saturating_add(Weight::from_parts(10_122_477, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_476_000 picoseconds.
        Weight::from_parts(4_039_599, 0)
            // Standard Error: 6_883
            .saturating_add(Weight::from_parts(1_249_853, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_519_000 picoseconds.
        Weight::from_parts(5_899_718, 0)
            // Standard Error: 14
            .saturating_add(Weight::from_parts(70, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_144_000 picoseconds.
        Weight::from_parts(5_643_619, 0)
            // Standard Error: 2_068
            .saturating_add(Weight::from_parts(411_598, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_906_000 picoseconds.
        Weight::from_parts(3_553_891, 0)
            // Standard Error: 6_612
            .saturating_add(Weight::from_parts(1_065_184, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_091_000 picoseconds.
        Weight::from_parts(3_243_254, 0)
            // Standard Error: 9_883
            .saturating_add(Weight::from_parts(1_166_167, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_701_000 picoseconds.
        Weight::from_parts(2_968_233, 0)
            // Standard Error: 7_534
            .saturating_add(Weight::from_parts(833_156, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_799_000 picoseconds.
        Weight::from_parts(1_150_079, 0)
            // Standard Error: 10_412
            .saturating_add(Weight::from_parts(1_501_669, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_285_000 picoseconds.
        Weight::from_parts(3_036_413, 0)
            // Standard Error: 13_154
            .saturating_add(Weight::from_parts(7_329_527, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_435_000 picoseconds.
        Weight::from_parts(2_526_000, 0)
            // Standard Error: 5_182
            .saturating_add(Weight::from_parts(3_372_244, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 5_347
            .saturating_add(Weight::from_parts(3_138_266, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_357_000 picoseconds.
        Weight::from_parts(138_891, 0)
            // Standard Error: 7_791
            .saturating_add(Weight::from_parts(3_191_328, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_482_000 picoseconds.
        Weight::from_parts(2_601_000, 0)
            // Standard Error: 4_225
            .saturating_add(Weight::from_parts(2_658_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 5_155
            .saturating_add(Weight::from_parts(621_787, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_469_000 picoseconds.
        Weight::from_parts(1_059_855, 0)
            // Standard Error: 5_881
            .saturating_add(Weight::from_parts(445_533, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_329_000 picoseconds.
        Weight::from_parts(2_435_000, 0)
            // Standard Error: 10_514
            .saturating_add(Weight::from_parts(1_912_395, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_407_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 7_053
            .saturating_add(Weight::from_parts(1_211_350, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_470_000 picoseconds.
        Weight::from_parts(1_058_179, 0)
            // Standard Error: 4_915
            .saturating_add(Weight::from_parts(448_923, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(1_070_529, 0)
            // Standard Error: 4_923
            .saturating_add(Weight::from_parts(442_847, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_395_000 picoseconds.
        Weight::from_parts(2_454_000, 0)
            // Standard Error: 4_678
            .saturating_add(Weight::from_parts(558_383, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_417_000 picoseconds.
        Weight::from_parts(238_415, 0)
            // Standard Error: 7_044
            .saturating_add(Weight::from_parts(607_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_402_000 picoseconds.
        Weight::from_parts(319_797, 0)
            // Standard Error: 6_419
            .saturating_add(Weight::from_parts(560_011, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_469_000 picoseconds.
        Weight::from_parts(2_102_360, 0)
            // Standard Error: 3_643
            .saturating_add(Weight::from_parts(330_364, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_700_000 picoseconds.
        Weight::from_parts(2_954_788, 0)
            // Standard Error: 1_913
            .saturating_add(Weight::from_parts(158_864, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_423_000 picoseconds.
        Weight::from_parts(2_994_827, 0)
            // Standard Error: 2_196
            .saturating_add(Weight::from_parts(166_749, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_434_000, 0)
            // Standard Error: 8_845
            .saturating_add(Weight::from_parts(1_876_257, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_402_000 picoseconds.
        Weight::from_parts(2_560_000, 0)
            // Standard Error: 8_676
            .saturating_add(Weight::from_parts(1_242_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_441_000 picoseconds.
        Weight::from_parts(2_516_000, 0)
            // Standard Error: 9_176
            .saturating_add(Weight::from_parts(1_863_117, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_406_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 7_604
            .saturating_add(Weight::from_parts(1_213_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_408_000 picoseconds.
        Weight::from_parts(2_500_000, 0)
            // Standard Error: 9_201
            .saturating_add(Weight::from_parts(1_855_225, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_460_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 8_286
            .saturating_add(Weight::from_parts(1_208_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_420_000 picoseconds.
        Weight::from_parts(2_538_000, 0)
            // Standard Error: 8_310
            .saturating_add(Weight::from_parts(1_784_161, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_372_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 7_415
            .saturating_add(Weight::from_parts(1_183_784, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_464_000 picoseconds.
        Weight::from_parts(2_570_000, 0)
            // Standard Error: 8_870
            .saturating_add(Weight::from_parts(1_800_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_466_000 picoseconds.
        Weight::from_parts(2_495_000, 0)
            // Standard Error: 7_215
            .saturating_add(Weight::from_parts(1_180_924, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_458_000 picoseconds.
        Weight::from_parts(2_502_000, 0)
            // Standard Error: 8_779
            .saturating_add(Weight::from_parts(1_829_085, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_502_000 picoseconds.
        Weight::from_parts(2_530_000, 0)
            // Standard Error: 7_917
            .saturating_add(Weight::from_parts(1_165_985, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_341_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 8_683
            .saturating_add(Weight::from_parts(1_784_822, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_446_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 7_979
            .saturating_add(Weight::from_parts(1_140_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_494_000, 0)
            // Standard Error: 9_680
            .saturating_add(Weight::from_parts(1_850_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_454_000 picoseconds.
        Weight::from_parts(2_485_000, 0)
            // Standard Error: 8_979
            .saturating_add(Weight::from_parts(1_240_628, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_429_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 9_014
            .saturating_add(Weight::from_parts(1_799_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_390_000 picoseconds.
        Weight::from_parts(2_524_000, 0)
            // Standard Error: 6_781
            .saturating_add(Weight::from_parts(1_163_108, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_385_000 picoseconds.
        Weight::from_parts(2_510_000, 0)
            // Standard Error: 9_194
            .saturating_add(Weight::from_parts(1_806_385, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_437_000 picoseconds.
        Weight::from_parts(2_502_000, 0)
            // Standard Error: 7_413
            .saturating_add(Weight::from_parts(1_154_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_437_000 picoseconds.
        Weight::from_parts(2_474_000, 0)
            // Standard Error: 7_674
            .saturating_add(Weight::from_parts(1_308_503, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_438_000 picoseconds.
        Weight::from_parts(2_487_000, 0)
            // Standard Error: 4_485
            .saturating_add(Weight::from_parts(629_294, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_519_000 picoseconds.
        Weight::from_parts(2_573_000, 0)
            // Standard Error: 7_050
            .saturating_add(Weight::from_parts(1_279_086, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_446_000 picoseconds.
        Weight::from_parts(2_514_000, 0)
            // Standard Error: 4_340
            .saturating_add(Weight::from_parts(636_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_000 picoseconds.
        Weight::from_parts(2_513_000, 0)
            // Standard Error: 10_768
            .saturating_add(Weight::from_parts(1_799_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_452_000 picoseconds.
        Weight::from_parts(2_511_000, 0)
            // Standard Error: 7_699
            .saturating_add(Weight::from_parts(1_235_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_473_000 picoseconds.
        Weight::from_parts(1_488_869, 0)
            // Standard Error: 11_669
            .saturating_add(Weight::from_parts(2_728_562, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_510_000 picoseconds.
        Weight::from_parts(1_304_811, 0)
            // Standard Error: 11_290
            .saturating_add(Weight::from_parts(2_424_314, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_440_000 picoseconds.
        Weight::from_parts(2_270_874, 0)
            // Standard Error: 16_583
            .saturating_add(Weight::from_parts(2_933_685, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(883_757, 0)
            // Standard Error: 11_400
            .saturating_add(Weight::from_parts(2_528_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_450_000 picoseconds.
        Weight::from_parts(4_093_788, 0)
            // Standard Error: 51_471
            .saturating_add(Weight::from_parts(9_246_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_461_000 picoseconds.
        Weight::from_parts(817_881, 0)
            // Standard Error: 43_223
            .saturating_add(Weight::from_parts(7_592_441, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_382_000 picoseconds.
        Weight::from_parts(2_630_025, 0)
            // Standard Error: 15_174
            .saturating_add(Weight::from_parts(2_976_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_444_000 picoseconds.
        Weight::from_parts(3_028_402, 0)
            // Standard Error: 17_165
            .saturating_add(Weight::from_parts(2_391_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_405_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 7_801
            .saturating_add(Weight::from_parts(1_294_803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_501_000 picoseconds.
        Weight::from_parts(2_616_000, 0)
            // Standard Error: 4_934
            .saturating_add(Weight::from_parts(660_252, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_403_000 picoseconds.
        Weight::from_parts(2_477_000, 0)
            // Standard Error: 9_377
            .saturating_add(Weight::from_parts(1_335_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_432_000 picoseconds.
        Weight::from_parts(2_494_000, 0)
            // Standard Error: 6_713
            .saturating_add(Weight::from_parts(685_922, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_492_000 picoseconds.
        Weight::from_parts(2_532_000, 0)
            // Standard Error: 9_090
            .saturating_add(Weight::from_parts(1_332_736, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_345_000 picoseconds.
        Weight::from_parts(2_473_000, 0)
            // Standard Error: 5_367
            .saturating_add(Weight::from_parts(665_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_412_000 picoseconds.
        Weight::from_parts(2_481_000, 0)
            // Standard Error: 7_570
            .saturating_add(Weight::from_parts(1_147_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_404_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 5_338
            .saturating_add(Weight::from_parts(625_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_546_000, 0)
            // Standard Error: 7_175
            .saturating_add(Weight::from_parts(1_086_755, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_522_000 picoseconds.
        Weight::from_parts(2_600_000, 0)
            // Standard Error: 4_641
            .saturating_add(Weight::from_parts(582_893, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_450_000 picoseconds.
        Weight::from_parts(2_583_000, 0)
            // Standard Error: 7_572
            .saturating_add(Weight::from_parts(1_106_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_465_000 picoseconds.
        Weight::from_parts(2_507_000, 0)
            // Standard Error: 4_899
            .saturating_add(Weight::from_parts(608_744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(2_498_000, 0)
            // Standard Error: 7_995
            .saturating_add(Weight::from_parts(1_146_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_297_000 picoseconds.
        Weight::from_parts(2_437_000, 0)
            // Standard Error: 4_820
            .saturating_add(Weight::from_parts(608_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_495_000 picoseconds.
        Weight::from_parts(2_570_000, 0)
            // Standard Error: 7_896
            .saturating_add(Weight::from_parts(1_132_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_400_000 picoseconds.
        Weight::from_parts(2_505_000, 0)
            // Standard Error: 4_569
            .saturating_add(Weight::from_parts(601_467, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 5_740_000 picoseconds.
        Weight::from_parts(6_066_000, 4169)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1039`
        //  Estimated: `23781`
        // Minimum execution time: 61_123_000 picoseconds.
        Weight::from_parts(63_708_000, 23781)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `820`
        //  Estimated: `21750`
        // Minimum execution time: 46_983_000 picoseconds.
        Weight::from_parts(47_969_000, 21750)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `942`
        //  Estimated: `34143`
        // Minimum execution time: 76_143_000 picoseconds.
        Weight::from_parts(78_348_000, 34143)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `627`
        //  Estimated: `20101`
        // Minimum execution time: 31_555_000 picoseconds.
        Weight::from_parts(32_526_000, 20101)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `908`
        //  Estimated: `26160`
        // Minimum execution time: 49_881_000 picoseconds.
        Weight::from_parts(52_020_000, 26160)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_319_000 picoseconds.
        Weight::from_parts(3_533_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1558`
        //  Estimated: `57552`
        // Minimum execution time: 111_830_000 picoseconds.
        Weight::from_parts(114_322_000, 57552)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1264`
        //  Estimated: `46350`
        // Minimum execution time: 90_693_000 picoseconds.
        Weight::from_parts(91_994_000, 46350)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2236 + c * (16400 ±0)`
        //  Estimated: `19543 + c * (84480 ±0)`
        // Minimum execution time: 29_042_000 picoseconds.
        Weight::from_parts(29_358_000, 19543)
            // Standard Error: 74_146
            .saturating_add(Weight::from_parts(39_817_812, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3061 + c * (42 ±0)`
        //  Estimated: `59827 + c * (2947 ±0)`
        // Minimum execution time: 88_878_000 picoseconds.
        Weight::from_parts(79_153_552, 59827)
            // Standard Error: 2_146
            .saturating_add(Weight::from_parts(1_074_924, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}
