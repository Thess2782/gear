// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_004_000 picoseconds.
        Weight::from_parts(1_039_000, 0)
            // Standard Error: 780
            .saturating_add(Weight::from_parts(208_524, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_875_000 picoseconds.
        Weight::from_parts(2_995_000, 3506)
            // Standard Error: 979
            .saturating_add(Weight::from_parts(674_730, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 129_326_000 picoseconds.
        Weight::from_parts(141_121_000, 0)
            // Standard Error: 243_523
            .saturating_add(Weight::from_parts(107_145_309, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 82_543_000 picoseconds.
        Weight::from_parts(84_606_000, 42236)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 53_238_000 picoseconds.
        Weight::from_parts(54_722_000, 21261)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 28_957_000 picoseconds.
        Weight::from_parts(29_527_000, 17070)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_003_000 picoseconds.
        Weight::from_parts(1_727_199, 7640)
            // Standard Error: 37_956
            .saturating_add(Weight::from_parts(15_507_032, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1364 + c * (16389 ±0)`
        //  Estimated: `41434 + c * (131112 ±0)`
        // Minimum execution time: 69_300_000 picoseconds.
        Weight::from_parts(70_587_000, 41434)
            // Standard Error: 590_809
            .saturating_add(Weight::from_parts(83_064_592, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 63_052_000 picoseconds.
        Weight::from_parts(10_493_362, 4990)
            // Standard Error: 55_042
            .saturating_add(Weight::from_parts(52_023_373, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `738`
        //  Estimated: `39375`
        // Minimum execution time: 63_843_000 picoseconds.
        Weight::from_parts(95_469_713, 39375)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_567, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 10_889_190_000 picoseconds.
        Weight::from_parts(89_347_805, 34312)
            // Standard Error: 154_078
            .saturating_add(Weight::from_parts(52_831_862, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_565, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 54_573_000 picoseconds.
        Weight::from_parts(35_572_485, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_141, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 59_131_000 picoseconds.
        Weight::from_parts(46_595_885, 27177)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_142, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 86_997_000 picoseconds.
        Weight::from_parts(78_882_319, 42227)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_152, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 96_183_000 picoseconds.
        Weight::from_parts(92_994_980, 45757)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_142, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 434_485_000 picoseconds.
        Weight::from_parts(529_098_864, 74319)
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 495_480_000 picoseconds.
        Weight::from_parts(586_920_087, 74319)
            // Standard Error: 6_460
            .saturating_add(Weight::from_parts(5_441, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 46_971_000 picoseconds.
        Weight::from_parts(47_358_000, 3899)
            // Standard Error: 27_404
            .saturating_add(Weight::from_parts(50_517_711, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 301_121_000 picoseconds.
        Weight::from_parts(284_937_177, 0)
            // Standard Error: 1_052_391
            .saturating_add(Weight::from_parts(384_430_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 671_445_000 picoseconds.
        Weight::from_parts(676_143_011, 0)
            // Standard Error: 1_714_557
            .saturating_add(Weight::from_parts(388_137_670, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_056_000 picoseconds.
        Weight::from_parts(344_563_265, 0)
            // Standard Error: 10_371
            .saturating_add(Weight::from_parts(4_670_113, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 376_141_000 picoseconds.
        Weight::from_parts(428_113_314, 0)
            // Standard Error: 15_375
            .saturating_add(Weight::from_parts(4_785_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 287_995_000 picoseconds.
        Weight::from_parts(381_538_311, 0)
            // Standard Error: 331_387
            .saturating_add(Weight::from_parts(259_251_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 281_469_000 picoseconds.
        Weight::from_parts(348_696_473, 0)
            // Standard Error: 260_230
            .saturating_add(Weight::from_parts(252_010_503, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 289_603_000 picoseconds.
        Weight::from_parts(339_487_544, 0)
            // Standard Error: 250_987
            .saturating_add(Weight::from_parts(254_292_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_967_000 picoseconds.
        Weight::from_parts(350_074_121, 0)
            // Standard Error: 247_106
            .saturating_add(Weight::from_parts(249_504_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 268_274_000 picoseconds.
        Weight::from_parts(352_194_408, 0)
            // Standard Error: 236_994
            .saturating_add(Weight::from_parts(248_988_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_136_000 picoseconds.
        Weight::from_parts(342_185_179, 0)
            // Standard Error: 211_993
            .saturating_add(Weight::from_parts(250_635_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 264_031_000 picoseconds.
        Weight::from_parts(349_528_691, 0)
            // Standard Error: 225_304
            .saturating_add(Weight::from_parts(249_702_670, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_113_000 picoseconds.
        Weight::from_parts(338_060_906, 0)
            // Standard Error: 231_076
            .saturating_add(Weight::from_parts(251_088_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 787_646_000 picoseconds.
        Weight::from_parts(920_589_394, 0)
            // Standard Error: 537_434
            .saturating_add(Weight::from_parts(359_919_094, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_123_350_000 picoseconds.
        Weight::from_parts(1_148_376_000, 0)
            // Standard Error: 52_334
            .saturating_add(Weight::from_parts(13_338_134, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_654_000 picoseconds.
        Weight::from_parts(339_407_235, 0)
            // Standard Error: 227_711
            .saturating_add(Weight::from_parts(254_326_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_647_000 picoseconds.
        Weight::from_parts(367_229_018, 0)
            // Standard Error: 291_566
            .saturating_add(Weight::from_parts(250_667_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 289_414_000 picoseconds.
        Weight::from_parts(366_941_167, 0)
            // Standard Error: 225_194
            .saturating_add(Weight::from_parts(322_505_555, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 293_016_000 picoseconds.
        Weight::from_parts(356_384_000, 0)
            // Standard Error: 4_485_234
            .saturating_add(Weight::from_parts(1_285_099_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_115_000 picoseconds.
        Weight::from_parts(156_095_400, 0)
            // Standard Error: 482_163
            .saturating_add(Weight::from_parts(397_998_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 803_099_000 picoseconds.
        Weight::from_parts(828_698_000, 0)
            // Standard Error: 58_974
            .saturating_add(Weight::from_parts(21_193_319, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 298_507_000 picoseconds.
        Weight::from_parts(399_518_641, 0)
            // Standard Error: 365_767
            .saturating_add(Weight::from_parts(505_239_098, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 792_949_000 picoseconds.
        Weight::from_parts(837_545_000, 0)
            // Standard Error: 56_003
            .saturating_add(Weight::from_parts(21_198_200, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 789_449_000 picoseconds.
        Weight::from_parts(893_861_623, 0)
            // Standard Error: 468_266
            .saturating_add(Weight::from_parts(510_174_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 783_856_000 picoseconds.
        Weight::from_parts(916_287_666, 0)
            // Standard Error: 897_587
            .saturating_add(Weight::from_parts(533_224_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 259_292_000 picoseconds.
        Weight::from_parts(333_542_241, 0)
            // Standard Error: 207_060
            .saturating_add(Weight::from_parts(260_521_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_472_945_000 picoseconds.
        Weight::from_parts(5_576_898_385, 0)
            // Standard Error: 1_092_970
            .saturating_add(Weight::from_parts(458_521_303, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 945_556_000 picoseconds.
        Weight::from_parts(974_302_000, 0)
            // Standard Error: 51_331
            .saturating_add(Weight::from_parts(29_618_380, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_529_404_000 picoseconds.
        Weight::from_parts(5_621_599_526, 0)
            // Standard Error: 1_123_857
            .saturating_add(Weight::from_parts(521_345_141, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_530_822_000 picoseconds.
        Weight::from_parts(5_612_961_615, 0)
            // Standard Error: 1_225_864
            .saturating_add(Weight::from_parts(558_790_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 480_952_000 picoseconds.
        Weight::from_parts(568_160_850, 0)
            // Standard Error: 384_272
            .saturating_add(Weight::from_parts(513_007_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_001_895_000 picoseconds.
        Weight::from_parts(1_035_766_000, 0)
            // Standard Error: 56_343
            .saturating_add(Weight::from_parts(21_343_998, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_638_550_000 picoseconds.
        Weight::from_parts(5_719_120_997, 0)
            // Standard Error: 1_268_967
            .saturating_add(Weight::from_parts(540_319_821, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 261_345_000 picoseconds.
        Weight::from_parts(342_746_857, 0)
            // Standard Error: 3_230_021
            .saturating_add(Weight::from_parts(42_914_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 352_914_000 picoseconds.
        Weight::from_parts(361_914_844, 0)
            // Standard Error: 1_181
            .saturating_add(Weight::from_parts(426_333, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 260_869_000 picoseconds.
        Weight::from_parts(342_709_532, 0)
            // Standard Error: 3_106_706
            .saturating_add(Weight::from_parts(15_547_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 317_668_000 picoseconds.
        Weight::from_parts(362_583_540, 0)
            // Standard Error: 1_359
            .saturating_add(Weight::from_parts(427_698, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 266_713_000 picoseconds.
        Weight::from_parts(339_662_967, 0)
            // Standard Error: 2_844_104
            .saturating_add(Weight::from_parts(34_429_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 253_199_000 picoseconds.
        Weight::from_parts(339_565_706, 0)
            // Standard Error: 3_142_333
            .saturating_add(Weight::from_parts(13_996_693, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_924_000 picoseconds.
        Weight::from_parts(387_650_233, 0)
            // Standard Error: 332_768
            .saturating_add(Weight::from_parts(360_720_830, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 334_305_000 picoseconds.
        Weight::from_parts(71_030_903, 0)
            // Standard Error: 4_674
            .saturating_add(Weight::from_parts(679_481, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 781_253_000 picoseconds.
        Weight::from_parts(897_466_238, 0)
            // Standard Error: 8_232_945
            .saturating_add(Weight::from_parts(148_403_961, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(_r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 784_406_000 picoseconds.
        Weight::from_parts(899_107_367, 0)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_861_000 picoseconds.
        Weight::from_parts(360_205_730, 0)
            // Standard Error: 2_967_203
            .saturating_add(Weight::from_parts(4_248_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 303_474_000 picoseconds.
        Weight::from_parts(361_633_916, 0)
            // Standard Error: 1_354
            .saturating_add(Weight::from_parts(430_318, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 278_916_000 picoseconds.
        Weight::from_parts(358_149_693, 0)
            // Standard Error: 3_314_688
            .saturating_add(Weight::from_parts(8_375_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 325_126_000 picoseconds.
        Weight::from_parts(358_168_136, 0)
            // Standard Error: 1_222
            .saturating_add(Weight::from_parts(426_613, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 291_593_000 picoseconds.
        Weight::from_parts(334_748_770, 0)
            // Standard Error: 220_000
            .saturating_add(Weight::from_parts(252_873_042, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 273_058_000 picoseconds.
        Weight::from_parts(349_289_701, 0)
            // Standard Error: 205_510
            .saturating_add(Weight::from_parts(250_861_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 787_011_000 picoseconds.
        Weight::from_parts(888_361_797, 0)
            // Standard Error: 394_801
            .saturating_add(Weight::from_parts(279_224_143, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 822_038_000 picoseconds.
        Weight::from_parts(989_582_634, 0)
            // Standard Error: 4_114
            .saturating_add(Weight::from_parts(91_260, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_067_666_000 picoseconds.
        Weight::from_parts(6_352_369_900, 0)
            // Standard Error: 1_315_551
            .saturating_add(Weight::from_parts(381_403_641, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_448_525_000 picoseconds.
        Weight::from_parts(6_731_330_842, 0)
            // Standard Error: 18_821
            .saturating_add(Weight::from_parts(12_616_331, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_291_000 picoseconds.
        Weight::from_parts(363_309_985, 0)
            // Standard Error: 319_917
            .saturating_add(Weight::from_parts(278_099_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 484_006_000 picoseconds.
        Weight::from_parts(495_411_000, 0)
            // Standard Error: 48_790
            .saturating_add(Weight::from_parts(25_651_749, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 274_964_000 picoseconds.
        Weight::from_parts(347_411_411, 0)
            // Standard Error: 245_814
            .saturating_add(Weight::from_parts(254_078_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 270_310_000 picoseconds.
        Weight::from_parts(341_367_989, 0)
            // Standard Error: 2_873_746
            .saturating_add(Weight::from_parts(42_005_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 259_853_000 picoseconds.
        Weight::from_parts(343_321_653, 0)
            // Standard Error: 3_117_714
            .saturating_add(Weight::from_parts(14_034_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 262_662_000 picoseconds.
        Weight::from_parts(339_822_991, 0)
            // Standard Error: 3_084_256
            .saturating_add(Weight::from_parts(13_729_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_857_000 picoseconds.
        Weight::from_parts(345_771_179, 0)
            // Standard Error: 3_153_847
            .saturating_add(Weight::from_parts(2_200_520, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_768_000 picoseconds.
        Weight::from_parts(339_362_306, 0)
            // Standard Error: 2_970_120
            .saturating_add(Weight::from_parts(14_354_793, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 366_594_000 picoseconds.
        Weight::from_parts(460_840_825, 0)
            // Standard Error: 278_178
            .saturating_add(Weight::from_parts(374_439_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 319_229_000 picoseconds.
        Weight::from_parts(365_405_568, 0)
            // Standard Error: 321_477
            .saturating_add(Weight::from_parts(603_080_186, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_711_402_000 picoseconds.
        Weight::from_parts(44_402_920_000, 0)
            // Standard Error: 265_851
            .saturating_add(Weight::from_parts(7_881_528, 0).saturating_mul(p.into()))
            // Standard Error: 265_837
            .saturating_add(Weight::from_parts(176_662_382, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 331_387_000 picoseconds.
        Weight::from_parts(372_526_026, 0)
            // Standard Error: 391_222
            .saturating_add(Weight::from_parts(612_525_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_691_936_000 picoseconds.
        Weight::from_parts(44_347_078_000, 0)
            // Standard Error: 261_188
            .saturating_add(Weight::from_parts(7_720_760, 0).saturating_mul(p.into()))
            // Standard Error: 261_175
            .saturating_add(Weight::from_parts(176_655_895, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 305_728_000 picoseconds.
        Weight::from_parts(362_373_299, 0)
            // Standard Error: 107_980
            .saturating_add(Weight::from_parts(3_606_857, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 284_743_000 picoseconds.
        Weight::from_parts(320_611_706, 1131)
            // Standard Error: 9_159
            .saturating_add(Weight::from_parts(15_612_892, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 289_789_000 picoseconds.
        Weight::from_parts(313_268_000, 1131)
            // Standard Error: 36_495
            .saturating_add(Weight::from_parts(41_877_399, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_257_477_000 picoseconds.
        Weight::from_parts(8_095_262_197, 5069931)
            // Standard Error: 64_295
            .saturating_add(Weight::from_parts(43_291_312, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 274_641_000 picoseconds.
        Weight::from_parts(311_681_000, 1939)
            // Standard Error: 35_860
            .saturating_add(Weight::from_parts(51_715_861, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 299_414_000 picoseconds.
        Weight::from_parts(364_523_179, 1131)
            // Standard Error: 80_742
            .saturating_add(Weight::from_parts(36_644_459, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 862_811_000 picoseconds.
        Weight::from_parts(887_989_347, 1496)
            // Standard Error: 149_288
            .saturating_add(Weight::from_parts(47_046_031, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_303_017_000 picoseconds.
        Weight::from_parts(1_364_115_624, 317931)
            // Standard Error: 183_766
            .saturating_add(Weight::from_parts(47_906_641, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_362_587_000 picoseconds.
        Weight::from_parts(4_386_922_916, 0)
            // Standard Error: 11_811
            .saturating_add(Weight::from_parts(3_318_656, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_365_821_000 picoseconds.
        Weight::from_parts(4_384_495_807, 0)
            // Standard Error: 10_802
            .saturating_add(Weight::from_parts(3_353_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_662_650_000 picoseconds.
        Weight::from_parts(11_057_005_880, 0)
            // Standard Error: 219_876
            .saturating_add(Weight::from_parts(17_316_986, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_211_040_000 picoseconds.
        Weight::from_parts(10_930_795_512, 0)
            // Standard Error: 221_639
            .saturating_add(Weight::from_parts(13_495_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_250_000 picoseconds.
        Weight::from_parts(3_456_000, 0)
            // Standard Error: 8_262
            .saturating_add(Weight::from_parts(3_639_770, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_277_000 picoseconds.
        Weight::from_parts(1_024_803, 0)
            // Standard Error: 8_943
            .saturating_add(Weight::from_parts(3_039_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_170_000 picoseconds.
        Weight::from_parts(3_442_943, 0)
            // Standard Error: 5_220
            .saturating_add(Weight::from_parts(1_636_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_296_000 picoseconds.
        Weight::from_parts(3_471_000, 0)
            // Standard Error: 8_154
            .saturating_add(Weight::from_parts(2_841_919, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_572_000 picoseconds.
        Weight::from_parts(8_609_468, 0)
            // Standard Error: 19_248
            .saturating_add(Weight::from_parts(4_574_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_753_000 picoseconds.
        Weight::from_parts(6_475_049, 0)
            // Standard Error: 1_258
            .saturating_add(Weight::from_parts(154_907, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_455_000 picoseconds.
        Weight::from_parts(6_391_742, 0)
            // Standard Error: 8_688
            .saturating_add(Weight::from_parts(2_580_972, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_580_972 -
            2_419_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_298_000 picoseconds.
        Weight::from_parts(5_282_269, 0)
            // Standard Error: 12_731
            .saturating_add(Weight::from_parts(2_419_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_899_000 picoseconds.
        Weight::from_parts(27_250_364, 0)
            // Standard Error: 40_121
            .saturating_add(Weight::from_parts(8_834_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_964_000 picoseconds.
        Weight::from_parts(6_122_194, 0)
            // Standard Error: 7_788
            .saturating_add(Weight::from_parts(1_140_840, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_215_000 picoseconds.
        Weight::from_parts(6_939_711, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_174_000 picoseconds.
        Weight::from_parts(2_345_716, 0)
            // Standard Error: 3_243
            .saturating_add(Weight::from_parts(283_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_225_000 picoseconds.
        Weight::from_parts(3_352_000, 0)
            // Standard Error: 4_941
            .saturating_add(Weight::from_parts(745_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_350_000 picoseconds.
        Weight::from_parts(3_371_000, 0)
            // Standard Error: 5_185
            .saturating_add(Weight::from_parts(739_378, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_480_000 picoseconds.
        Weight::from_parts(4_189_093, 0)
            // Standard Error: 5_985
            .saturating_add(Weight::from_parts(760_098, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_546_000 picoseconds.
        Weight::from_parts(1_147_528, 0)
            // Standard Error: 12_039
            .saturating_add(Weight::from_parts(1_461_470, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_647_000 picoseconds.
        Weight::from_parts(3_684_473, 0)
            // Standard Error: 12_869
            .saturating_add(Weight::from_parts(6_823_813, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_416_000 picoseconds.
        Weight::from_parts(3_553_000, 0)
            // Standard Error: 6_641
            .saturating_add(Weight::from_parts(3_243_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_196_000 picoseconds.
        Weight::from_parts(3_418_000, 0)
            // Standard Error: 6_183
            .saturating_add(Weight::from_parts(3_062_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_380_000 picoseconds.
        Weight::from_parts(3_507_000, 0)
            // Standard Error: 5_522
            .saturating_add(Weight::from_parts(2_982_713, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_041_000 picoseconds.
        Weight::from_parts(3_488_000, 0)
            // Standard Error: 5_711
            .saturating_add(Weight::from_parts(2_605_003, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_127_000 picoseconds.
        Weight::from_parts(3_426_000, 0)
            // Standard Error: 5_158
            .saturating_add(Weight::from_parts(632_988, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_163_000 picoseconds.
        Weight::from_parts(2_062_913, 0)
            // Standard Error: 4_849
            .saturating_add(Weight::from_parts(467_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_404_000 picoseconds.
        Weight::from_parts(3_880_000, 0)
            // Standard Error: 12_467
            .saturating_add(Weight::from_parts(1_834_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_173_000 picoseconds.
        Weight::from_parts(3_762_000, 0)
            // Standard Error: 7_031
            .saturating_add(Weight::from_parts(1_124_077, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_361_000 picoseconds.
        Weight::from_parts(1_798_844, 0)
            // Standard Error: 4_968
            .saturating_add(Weight::from_parts(456_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_303_000 picoseconds.
        Weight::from_parts(611_588, 0)
            // Standard Error: 7_884
            .saturating_add(Weight::from_parts(520_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_195_000 picoseconds.
        Weight::from_parts(1_410_508, 0)
            // Standard Error: 5_415
            .saturating_add(Weight::from_parts(568_811, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_522_000 picoseconds.
        Weight::from_parts(1_051_494, 0)
            // Standard Error: 5_331
            .saturating_add(Weight::from_parts(611_875, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_279_000 picoseconds.
        Weight::from_parts(451_268, 0)
            // Standard Error: 7_221
            .saturating_add(Weight::from_parts(615_693, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_064_000 picoseconds.
        Weight::from_parts(2_145_445, 0)
            // Standard Error: 3_712
            .saturating_add(Weight::from_parts(378_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_154_000 picoseconds.
        Weight::from_parts(3_153_343, 0)
            // Standard Error: 1_942
            .saturating_add(Weight::from_parts(175_425, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_306_000 picoseconds.
        Weight::from_parts(3_164_557, 0)
            // Standard Error: 2_256
            .saturating_add(Weight::from_parts(175_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_214_000 picoseconds.
        Weight::from_parts(3_427_000, 0)
            // Standard Error: 10_803
            .saturating_add(Weight::from_parts(1_848_746, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_315_000 picoseconds.
        Weight::from_parts(3_564_000, 0)
            // Standard Error: 6_914
            .saturating_add(Weight::from_parts(1_155_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_357_000 picoseconds.
        Weight::from_parts(3_555_000, 0)
            // Standard Error: 11_082
            .saturating_add(Weight::from_parts(1_842_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_136_000 picoseconds.
        Weight::from_parts(3_269_000, 0)
            // Standard Error: 6_070
            .saturating_add(Weight::from_parts(1_114_156, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_053_000 picoseconds.
        Weight::from_parts(3_402_000, 0)
            // Standard Error: 12_359
            .saturating_add(Weight::from_parts(1_840_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_426_000 picoseconds.
        Weight::from_parts(3_618_000, 0)
            // Standard Error: 8_079
            .saturating_add(Weight::from_parts(1_108_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_402_000 picoseconds.
        Weight::from_parts(3_745_000, 0)
            // Standard Error: 11_871
            .saturating_add(Weight::from_parts(1_864_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_309_000 picoseconds.
        Weight::from_parts(3_707_000, 0)
            // Standard Error: 7_541
            .saturating_add(Weight::from_parts(1_209_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_136_000 picoseconds.
        Weight::from_parts(3_410_000, 0)
            // Standard Error: 11_058
            .saturating_add(Weight::from_parts(1_815_863, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_320_000 picoseconds.
        Weight::from_parts(3_697_000, 0)
            // Standard Error: 7_793
            .saturating_add(Weight::from_parts(1_139_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_285_000 picoseconds.
        Weight::from_parts(3_413_000, 0)
            // Standard Error: 9_807
            .saturating_add(Weight::from_parts(1_832_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_106_000 picoseconds.
        Weight::from_parts(3_319_000, 0)
            // Standard Error: 6_265
            .saturating_add(Weight::from_parts(1_126_902, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_138_000 picoseconds.
        Weight::from_parts(3_298_000, 0)
            // Standard Error: 10_583
            .saturating_add(Weight::from_parts(1_808_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_076_000 picoseconds.
        Weight::from_parts(3_277_000, 0)
            // Standard Error: 6_756
            .saturating_add(Weight::from_parts(1_172_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_445_000 picoseconds.
        Weight::from_parts(3_573_000, 0)
            // Standard Error: 10_807
            .saturating_add(Weight::from_parts(1_863_973, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_313_000 picoseconds.
        Weight::from_parts(3_488_000, 0)
            // Standard Error: 7_828
            .saturating_add(Weight::from_parts(1_136_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_120_000 picoseconds.
        Weight::from_parts(3_289_000, 0)
            // Standard Error: 10_897
            .saturating_add(Weight::from_parts(1_865_073, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_314_000 picoseconds.
        Weight::from_parts(3_884_000, 0)
            // Standard Error: 6_891
            .saturating_add(Weight::from_parts(1_173_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_267_000 picoseconds.
        Weight::from_parts(3_413_000, 0)
            // Standard Error: 11_041
            .saturating_add(Weight::from_parts(1_889_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_300_000 picoseconds.
        Weight::from_parts(3_718_000, 0)
            // Standard Error: 6_841
            .saturating_add(Weight::from_parts(1_117_611, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_315_000 picoseconds.
        Weight::from_parts(3_461_000, 0)
            // Standard Error: 6_709
            .saturating_add(Weight::from_parts(1_266_488, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_251_000 picoseconds.
        Weight::from_parts(456_509, 0)
            // Standard Error: 5_583
            .saturating_add(Weight::from_parts(701_621, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_620_000 picoseconds.
        Weight::from_parts(3_814_000, 0)
            // Standard Error: 7_916
            .saturating_add(Weight::from_parts(1_223_465, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_207_000 picoseconds.
        Weight::from_parts(902_058, 0)
            // Standard Error: 6_111
            .saturating_add(Weight::from_parts(697_450, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_207_000 picoseconds.
        Weight::from_parts(3_617_000, 0)
            // Standard Error: 11_942
            .saturating_add(Weight::from_parts(1_750_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_067_000 picoseconds.
        Weight::from_parts(3_497_000, 0)
            // Standard Error: 7_947
            .saturating_add(Weight::from_parts(1_170_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_306_000 picoseconds.
        Weight::from_parts(9_612_836, 0)
            // Standard Error: 17_367
            .saturating_add(Weight::from_parts(1_894_029, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_154_000 picoseconds.
        Weight::from_parts(8_647_899, 0)
            // Standard Error: 13_462
            .saturating_add(Weight::from_parts(1_763_963, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_406_000 picoseconds.
        Weight::from_parts(8_373_728, 0)
            // Standard Error: 20_416
            .saturating_add(Weight::from_parts(2_176_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_552_000 picoseconds.
        Weight::from_parts(8_441_054, 0)
            // Standard Error: 13_332
            .saturating_add(Weight::from_parts(1_709_529, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_258_000 picoseconds.
        Weight::from_parts(10_906_550, 0)
            // Standard Error: 39_940
            .saturating_add(Weight::from_parts(7_796_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_196_000 picoseconds.
        Weight::from_parts(8_814_007, 0)
            // Standard Error: 46_984
            .saturating_add(Weight::from_parts(6_475_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_169_000 picoseconds.
        Weight::from_parts(12_326_352, 0)
            // Standard Error: 18_963
            .saturating_add(Weight::from_parts(1_978_469, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_256_000 picoseconds.
        Weight::from_parts(6_132_735, 0)
            // Standard Error: 17_999
            .saturating_add(Weight::from_parts(1_948_439, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_183_000 picoseconds.
        Weight::from_parts(3_391_000, 0)
            // Standard Error: 6_147
            .saturating_add(Weight::from_parts(1_238_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_148_000 picoseconds.
        Weight::from_parts(3_286_000, 0)
            // Standard Error: 6_409
            .saturating_add(Weight::from_parts(787_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_412_000 picoseconds.
        Weight::from_parts(3_579_000, 0)
            // Standard Error: 7_086
            .saturating_add(Weight::from_parts(1_349_082, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_032_000 picoseconds.
        Weight::from_parts(3_466_000, 0)
            // Standard Error: 6_505
            .saturating_add(Weight::from_parts(780_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_202_000 picoseconds.
        Weight::from_parts(3_919_000, 0)
            // Standard Error: 7_711
            .saturating_add(Weight::from_parts(1_365_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_320_000 picoseconds.
        Weight::from_parts(3_782_000, 0)
            // Standard Error: 6_043
            .saturating_add(Weight::from_parts(717_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_324_000 picoseconds.
        Weight::from_parts(3_505_000, 0)
            // Standard Error: 7_639
            .saturating_add(Weight::from_parts(1_258_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_034_000 picoseconds.
        Weight::from_parts(1_296_570, 0)
            // Standard Error: 6_486
            .saturating_add(Weight::from_parts(680_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_517_000 picoseconds.
        Weight::from_parts(3_781_000, 0)
            // Standard Error: 6_643
            .saturating_add(Weight::from_parts(1_030_358, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_200_000 picoseconds.
        Weight::from_parts(1_121_063, 0)
            // Standard Error: 4_533
            .saturating_add(Weight::from_parts(633_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_424_000 picoseconds.
        Weight::from_parts(3_638_000, 0)
            // Standard Error: 6_518
            .saturating_add(Weight::from_parts(1_108_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_300_000 picoseconds.
        Weight::from_parts(1_104_319, 0)
            // Standard Error: 5_117
            .saturating_add(Weight::from_parts(662_032, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_139_000 picoseconds.
        Weight::from_parts(3_497_000, 0)
            // Standard Error: 6_621
            .saturating_add(Weight::from_parts(1_013_153, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_149_000 picoseconds.
        Weight::from_parts(1_196_324, 0)
            // Standard Error: 4_506
            .saturating_add(Weight::from_parts(623_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_306_000 picoseconds.
        Weight::from_parts(3_478_000, 0)
            // Standard Error: 7_891
            .saturating_add(Weight::from_parts(1_102_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_311_000 picoseconds.
        Weight::from_parts(490_423, 0)
            // Standard Error: 5_877
            .saturating_add(Weight::from_parts(683_697, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_004_000 picoseconds.
        Weight::from_parts(1_039_000, 0)
            // Standard Error: 780
            .saturating_add(Weight::from_parts(208_524, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_875_000 picoseconds.
        Weight::from_parts(2_995_000, 3506)
            // Standard Error: 979
            .saturating_add(Weight::from_parts(674_730, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 129_326_000 picoseconds.
        Weight::from_parts(141_121_000, 0)
            // Standard Error: 243_523
            .saturating_add(Weight::from_parts(107_145_309, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 82_543_000 picoseconds.
        Weight::from_parts(84_606_000, 42236)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 53_238_000 picoseconds.
        Weight::from_parts(54_722_000, 21261)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 28_957_000 picoseconds.
        Weight::from_parts(29_527_000, 17070)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_003_000 picoseconds.
        Weight::from_parts(1_727_199, 7640)
            // Standard Error: 37_956
            .saturating_add(Weight::from_parts(15_507_032, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1364 + c * (16389 ±0)`
        //  Estimated: `41434 + c * (131112 ±0)`
        // Minimum execution time: 69_300_000 picoseconds.
        Weight::from_parts(70_587_000, 41434)
            // Standard Error: 590_809
            .saturating_add(Weight::from_parts(83_064_592, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 63_052_000 picoseconds.
        Weight::from_parts(10_493_362, 4990)
            // Standard Error: 55_042
            .saturating_add(Weight::from_parts(52_023_373, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `738`
        //  Estimated: `39375`
        // Minimum execution time: 63_843_000 picoseconds.
        Weight::from_parts(95_469_713, 39375)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_567, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 10_889_190_000 picoseconds.
        Weight::from_parts(89_347_805, 34312)
            // Standard Error: 154_078
            .saturating_add(Weight::from_parts(52_831_862, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_565, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 54_573_000 picoseconds.
        Weight::from_parts(35_572_485, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_141, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 59_131_000 picoseconds.
        Weight::from_parts(46_595_885, 27177)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_142, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 86_997_000 picoseconds.
        Weight::from_parts(78_882_319, 42227)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_152, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 96_183_000 picoseconds.
        Weight::from_parts(92_994_980, 45757)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_142, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 434_485_000 picoseconds.
        Weight::from_parts(529_098_864, 74319)
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 495_480_000 picoseconds.
        Weight::from_parts(586_920_087, 74319)
            // Standard Error: 6_460
            .saturating_add(Weight::from_parts(5_441, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 46_971_000 picoseconds.
        Weight::from_parts(47_358_000, 3899)
            // Standard Error: 27_404
            .saturating_add(Weight::from_parts(50_517_711, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 301_121_000 picoseconds.
        Weight::from_parts(284_937_177, 0)
            // Standard Error: 1_052_391
            .saturating_add(Weight::from_parts(384_430_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 671_445_000 picoseconds.
        Weight::from_parts(676_143_011, 0)
            // Standard Error: 1_714_557
            .saturating_add(Weight::from_parts(388_137_670, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 269_056_000 picoseconds.
        Weight::from_parts(344_563_265, 0)
            // Standard Error: 10_371
            .saturating_add(Weight::from_parts(4_670_113, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 376_141_000 picoseconds.
        Weight::from_parts(428_113_314, 0)
            // Standard Error: 15_375
            .saturating_add(Weight::from_parts(4_785_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 287_995_000 picoseconds.
        Weight::from_parts(381_538_311, 0)
            // Standard Error: 331_387
            .saturating_add(Weight::from_parts(259_251_333, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 281_469_000 picoseconds.
        Weight::from_parts(348_696_473, 0)
            // Standard Error: 260_230
            .saturating_add(Weight::from_parts(252_010_503, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 289_603_000 picoseconds.
        Weight::from_parts(339_487_544, 0)
            // Standard Error: 250_987
            .saturating_add(Weight::from_parts(254_292_007, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_967_000 picoseconds.
        Weight::from_parts(350_074_121, 0)
            // Standard Error: 247_106
            .saturating_add(Weight::from_parts(249_504_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 268_274_000 picoseconds.
        Weight::from_parts(352_194_408, 0)
            // Standard Error: 236_994
            .saturating_add(Weight::from_parts(248_988_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 277_136_000 picoseconds.
        Weight::from_parts(342_185_179, 0)
            // Standard Error: 211_993
            .saturating_add(Weight::from_parts(250_635_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 264_031_000 picoseconds.
        Weight::from_parts(349_528_691, 0)
            // Standard Error: 225_304
            .saturating_add(Weight::from_parts(249_702_670, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 285_113_000 picoseconds.
        Weight::from_parts(338_060_906, 0)
            // Standard Error: 231_076
            .saturating_add(Weight::from_parts(251_088_989, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 787_646_000 picoseconds.
        Weight::from_parts(920_589_394, 0)
            // Standard Error: 537_434
            .saturating_add(Weight::from_parts(359_919_094, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_123_350_000 picoseconds.
        Weight::from_parts(1_148_376_000, 0)
            // Standard Error: 52_334
            .saturating_add(Weight::from_parts(13_338_134, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 295_654_000 picoseconds.
        Weight::from_parts(339_407_235, 0)
            // Standard Error: 227_711
            .saturating_add(Weight::from_parts(254_326_806, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 288_647_000 picoseconds.
        Weight::from_parts(367_229_018, 0)
            // Standard Error: 291_566
            .saturating_add(Weight::from_parts(250_667_221, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 289_414_000 picoseconds.
        Weight::from_parts(366_941_167, 0)
            // Standard Error: 225_194
            .saturating_add(Weight::from_parts(322_505_555, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 293_016_000 picoseconds.
        Weight::from_parts(356_384_000, 0)
            // Standard Error: 4_485_234
            .saturating_add(Weight::from_parts(1_285_099_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_115_000 picoseconds.
        Weight::from_parts(156_095_400, 0)
            // Standard Error: 482_163
            .saturating_add(Weight::from_parts(397_998_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 803_099_000 picoseconds.
        Weight::from_parts(828_698_000, 0)
            // Standard Error: 58_974
            .saturating_add(Weight::from_parts(21_193_319, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 298_507_000 picoseconds.
        Weight::from_parts(399_518_641, 0)
            // Standard Error: 365_767
            .saturating_add(Weight::from_parts(505_239_098, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 792_949_000 picoseconds.
        Weight::from_parts(837_545_000, 0)
            // Standard Error: 56_003
            .saturating_add(Weight::from_parts(21_198_200, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 789_449_000 picoseconds.
        Weight::from_parts(893_861_623, 0)
            // Standard Error: 468_266
            .saturating_add(Weight::from_parts(510_174_428, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 783_856_000 picoseconds.
        Weight::from_parts(916_287_666, 0)
            // Standard Error: 897_587
            .saturating_add(Weight::from_parts(533_224_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 259_292_000 picoseconds.
        Weight::from_parts(333_542_241, 0)
            // Standard Error: 207_060
            .saturating_add(Weight::from_parts(260_521_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_472_945_000 picoseconds.
        Weight::from_parts(5_576_898_385, 0)
            // Standard Error: 1_092_970
            .saturating_add(Weight::from_parts(458_521_303, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 945_556_000 picoseconds.
        Weight::from_parts(974_302_000, 0)
            // Standard Error: 51_331
            .saturating_add(Weight::from_parts(29_618_380, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_529_404_000 picoseconds.
        Weight::from_parts(5_621_599_526, 0)
            // Standard Error: 1_123_857
            .saturating_add(Weight::from_parts(521_345_141, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_530_822_000 picoseconds.
        Weight::from_parts(5_612_961_615, 0)
            // Standard Error: 1_225_864
            .saturating_add(Weight::from_parts(558_790_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 480_952_000 picoseconds.
        Weight::from_parts(568_160_850, 0)
            // Standard Error: 384_272
            .saturating_add(Weight::from_parts(513_007_324, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_001_895_000 picoseconds.
        Weight::from_parts(1_035_766_000, 0)
            // Standard Error: 56_343
            .saturating_add(Weight::from_parts(21_343_998, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_638_550_000 picoseconds.
        Weight::from_parts(5_719_120_997, 0)
            // Standard Error: 1_268_967
            .saturating_add(Weight::from_parts(540_319_821, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 261_345_000 picoseconds.
        Weight::from_parts(342_746_857, 0)
            // Standard Error: 3_230_021
            .saturating_add(Weight::from_parts(42_914_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 352_914_000 picoseconds.
        Weight::from_parts(361_914_844, 0)
            // Standard Error: 1_181
            .saturating_add(Weight::from_parts(426_333, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 260_869_000 picoseconds.
        Weight::from_parts(342_709_532, 0)
            // Standard Error: 3_106_706
            .saturating_add(Weight::from_parts(15_547_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 317_668_000 picoseconds.
        Weight::from_parts(362_583_540, 0)
            // Standard Error: 1_359
            .saturating_add(Weight::from_parts(427_698, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 266_713_000 picoseconds.
        Weight::from_parts(339_662_967, 0)
            // Standard Error: 2_844_104
            .saturating_add(Weight::from_parts(34_429_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 253_199_000 picoseconds.
        Weight::from_parts(339_565_706, 0)
            // Standard Error: 3_142_333
            .saturating_add(Weight::from_parts(13_996_693, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 282_924_000 picoseconds.
        Weight::from_parts(387_650_233, 0)
            // Standard Error: 332_768
            .saturating_add(Weight::from_parts(360_720_830, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 334_305_000 picoseconds.
        Weight::from_parts(71_030_903, 0)
            // Standard Error: 4_674
            .saturating_add(Weight::from_parts(679_481, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 781_253_000 picoseconds.
        Weight::from_parts(897_466_238, 0)
            // Standard Error: 8_232_945
            .saturating_add(Weight::from_parts(148_403_961, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(_r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 784_406_000 picoseconds.
        Weight::from_parts(899_107_367, 0)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 286_861_000 picoseconds.
        Weight::from_parts(360_205_730, 0)
            // Standard Error: 2_967_203
            .saturating_add(Weight::from_parts(4_248_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 303_474_000 picoseconds.
        Weight::from_parts(361_633_916, 0)
            // Standard Error: 1_354
            .saturating_add(Weight::from_parts(430_318, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 278_916_000 picoseconds.
        Weight::from_parts(358_149_693, 0)
            // Standard Error: 3_314_688
            .saturating_add(Weight::from_parts(8_375_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 325_126_000 picoseconds.
        Weight::from_parts(358_168_136, 0)
            // Standard Error: 1_222
            .saturating_add(Weight::from_parts(426_613, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 291_593_000 picoseconds.
        Weight::from_parts(334_748_770, 0)
            // Standard Error: 220_000
            .saturating_add(Weight::from_parts(252_873_042, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 273_058_000 picoseconds.
        Weight::from_parts(349_289_701, 0)
            // Standard Error: 205_510
            .saturating_add(Weight::from_parts(250_861_804, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 787_011_000 picoseconds.
        Weight::from_parts(888_361_797, 0)
            // Standard Error: 394_801
            .saturating_add(Weight::from_parts(279_224_143, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 822_038_000 picoseconds.
        Weight::from_parts(989_582_634, 0)
            // Standard Error: 4_114
            .saturating_add(Weight::from_parts(91_260, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_067_666_000 picoseconds.
        Weight::from_parts(6_352_369_900, 0)
            // Standard Error: 1_315_551
            .saturating_add(Weight::from_parts(381_403_641, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_448_525_000 picoseconds.
        Weight::from_parts(6_731_330_842, 0)
            // Standard Error: 18_821
            .saturating_add(Weight::from_parts(12_616_331, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_291_000 picoseconds.
        Weight::from_parts(363_309_985, 0)
            // Standard Error: 319_917
            .saturating_add(Weight::from_parts(278_099_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 484_006_000 picoseconds.
        Weight::from_parts(495_411_000, 0)
            // Standard Error: 48_790
            .saturating_add(Weight::from_parts(25_651_749, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 274_964_000 picoseconds.
        Weight::from_parts(347_411_411, 0)
            // Standard Error: 245_814
            .saturating_add(Weight::from_parts(254_078_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 270_310_000 picoseconds.
        Weight::from_parts(341_367_989, 0)
            // Standard Error: 2_873_746
            .saturating_add(Weight::from_parts(42_005_710, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 259_853_000 picoseconds.
        Weight::from_parts(343_321_653, 0)
            // Standard Error: 3_117_714
            .saturating_add(Weight::from_parts(14_034_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 262_662_000 picoseconds.
        Weight::from_parts(339_822_991, 0)
            // Standard Error: 3_084_256
            .saturating_add(Weight::from_parts(13_729_208, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 272_857_000 picoseconds.
        Weight::from_parts(345_771_179, 0)
            // Standard Error: 3_153_847
            .saturating_add(Weight::from_parts(2_200_520, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_768_000 picoseconds.
        Weight::from_parts(339_362_306, 0)
            // Standard Error: 2_970_120
            .saturating_add(Weight::from_parts(14_354_793, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 366_594_000 picoseconds.
        Weight::from_parts(460_840_825, 0)
            // Standard Error: 278_178
            .saturating_add(Weight::from_parts(374_439_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 319_229_000 picoseconds.
        Weight::from_parts(365_405_568, 0)
            // Standard Error: 321_477
            .saturating_add(Weight::from_parts(603_080_186, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_711_402_000 picoseconds.
        Weight::from_parts(44_402_920_000, 0)
            // Standard Error: 265_851
            .saturating_add(Weight::from_parts(7_881_528, 0).saturating_mul(p.into()))
            // Standard Error: 265_837
            .saturating_add(Weight::from_parts(176_662_382, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 331_387_000 picoseconds.
        Weight::from_parts(372_526_026, 0)
            // Standard Error: 391_222
            .saturating_add(Weight::from_parts(612_525_427, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_691_936_000 picoseconds.
        Weight::from_parts(44_347_078_000, 0)
            // Standard Error: 261_188
            .saturating_add(Weight::from_parts(7_720_760, 0).saturating_mul(p.into()))
            // Standard Error: 261_175
            .saturating_add(Weight::from_parts(176_655_895, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 305_728_000 picoseconds.
        Weight::from_parts(362_373_299, 0)
            // Standard Error: 107_980
            .saturating_add(Weight::from_parts(3_606_857, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 284_743_000 picoseconds.
        Weight::from_parts(320_611_706, 1131)
            // Standard Error: 9_159
            .saturating_add(Weight::from_parts(15_612_892, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 289_789_000 picoseconds.
        Weight::from_parts(313_268_000, 1131)
            // Standard Error: 36_495
            .saturating_add(Weight::from_parts(41_877_399, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 8_257_477_000 picoseconds.
        Weight::from_parts(8_095_262_197, 5069931)
            // Standard Error: 64_295
            .saturating_add(Weight::from_parts(43_291_312, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 274_641_000 picoseconds.
        Weight::from_parts(311_681_000, 1939)
            // Standard Error: 35_860
            .saturating_add(Weight::from_parts(51_715_861, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 299_414_000 picoseconds.
        Weight::from_parts(364_523_179, 1131)
            // Standard Error: 80_742
            .saturating_add(Weight::from_parts(36_644_459, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 862_811_000 picoseconds.
        Weight::from_parts(887_989_347, 1496)
            // Standard Error: 149_288
            .saturating_add(Weight::from_parts(47_046_031, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_303_017_000 picoseconds.
        Weight::from_parts(1_364_115_624, 317931)
            // Standard Error: 183_766
            .saturating_add(Weight::from_parts(47_906_641, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_362_587_000 picoseconds.
        Weight::from_parts(4_386_922_916, 0)
            // Standard Error: 11_811
            .saturating_add(Weight::from_parts(3_318_656, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_365_821_000 picoseconds.
        Weight::from_parts(4_384_495_807, 0)
            // Standard Error: 10_802
            .saturating_add(Weight::from_parts(3_353_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_662_650_000 picoseconds.
        Weight::from_parts(11_057_005_880, 0)
            // Standard Error: 219_876
            .saturating_add(Weight::from_parts(17_316_986, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_211_040_000 picoseconds.
        Weight::from_parts(10_930_795_512, 0)
            // Standard Error: 221_639
            .saturating_add(Weight::from_parts(13_495_623, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_250_000 picoseconds.
        Weight::from_parts(3_456_000, 0)
            // Standard Error: 8_262
            .saturating_add(Weight::from_parts(3_639_770, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_277_000 picoseconds.
        Weight::from_parts(1_024_803, 0)
            // Standard Error: 8_943
            .saturating_add(Weight::from_parts(3_039_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_170_000 picoseconds.
        Weight::from_parts(3_442_943, 0)
            // Standard Error: 5_220
            .saturating_add(Weight::from_parts(1_636_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_296_000 picoseconds.
        Weight::from_parts(3_471_000, 0)
            // Standard Error: 8_154
            .saturating_add(Weight::from_parts(2_841_919, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_572_000 picoseconds.
        Weight::from_parts(8_609_468, 0)
            // Standard Error: 19_248
            .saturating_add(Weight::from_parts(4_574_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_753_000 picoseconds.
        Weight::from_parts(6_475_049, 0)
            // Standard Error: 1_258
            .saturating_add(Weight::from_parts(154_907, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_455_000 picoseconds.
        Weight::from_parts(6_391_742, 0)
            // Standard Error: 8_688
            .saturating_add(Weight::from_parts(2_580_972, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_580_972 -
            2_419_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_298_000 picoseconds.
        Weight::from_parts(5_282_269, 0)
            // Standard Error: 12_731
            .saturating_add(Weight::from_parts(2_419_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_899_000 picoseconds.
        Weight::from_parts(27_250_364, 0)
            // Standard Error: 40_121
            .saturating_add(Weight::from_parts(8_834_040, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_964_000 picoseconds.
        Weight::from_parts(6_122_194, 0)
            // Standard Error: 7_788
            .saturating_add(Weight::from_parts(1_140_840, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_215_000 picoseconds.
        Weight::from_parts(6_939_711, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_174_000 picoseconds.
        Weight::from_parts(2_345_716, 0)
            // Standard Error: 3_243
            .saturating_add(Weight::from_parts(283_502, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_225_000 picoseconds.
        Weight::from_parts(3_352_000, 0)
            // Standard Error: 4_941
            .saturating_add(Weight::from_parts(745_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_350_000 picoseconds.
        Weight::from_parts(3_371_000, 0)
            // Standard Error: 5_185
            .saturating_add(Weight::from_parts(739_378, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_480_000 picoseconds.
        Weight::from_parts(4_189_093, 0)
            // Standard Error: 5_985
            .saturating_add(Weight::from_parts(760_098, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_546_000 picoseconds.
        Weight::from_parts(1_147_528, 0)
            // Standard Error: 12_039
            .saturating_add(Weight::from_parts(1_461_470, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_647_000 picoseconds.
        Weight::from_parts(3_684_473, 0)
            // Standard Error: 12_869
            .saturating_add(Weight::from_parts(6_823_813, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_416_000 picoseconds.
        Weight::from_parts(3_553_000, 0)
            // Standard Error: 6_641
            .saturating_add(Weight::from_parts(3_243_037, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_196_000 picoseconds.
        Weight::from_parts(3_418_000, 0)
            // Standard Error: 6_183
            .saturating_add(Weight::from_parts(3_062_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_380_000 picoseconds.
        Weight::from_parts(3_507_000, 0)
            // Standard Error: 5_522
            .saturating_add(Weight::from_parts(2_982_713, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_041_000 picoseconds.
        Weight::from_parts(3_488_000, 0)
            // Standard Error: 5_711
            .saturating_add(Weight::from_parts(2_605_003, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_127_000 picoseconds.
        Weight::from_parts(3_426_000, 0)
            // Standard Error: 5_158
            .saturating_add(Weight::from_parts(632_988, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_163_000 picoseconds.
        Weight::from_parts(2_062_913, 0)
            // Standard Error: 4_849
            .saturating_add(Weight::from_parts(467_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_404_000 picoseconds.
        Weight::from_parts(3_880_000, 0)
            // Standard Error: 12_467
            .saturating_add(Weight::from_parts(1_834_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_173_000 picoseconds.
        Weight::from_parts(3_762_000, 0)
            // Standard Error: 7_031
            .saturating_add(Weight::from_parts(1_124_077, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_361_000 picoseconds.
        Weight::from_parts(1_798_844, 0)
            // Standard Error: 4_968
            .saturating_add(Weight::from_parts(456_305, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_303_000 picoseconds.
        Weight::from_parts(611_588, 0)
            // Standard Error: 7_884
            .saturating_add(Weight::from_parts(520_883, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_195_000 picoseconds.
        Weight::from_parts(1_410_508, 0)
            // Standard Error: 5_415
            .saturating_add(Weight::from_parts(568_811, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_522_000 picoseconds.
        Weight::from_parts(1_051_494, 0)
            // Standard Error: 5_331
            .saturating_add(Weight::from_parts(611_875, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_279_000 picoseconds.
        Weight::from_parts(451_268, 0)
            // Standard Error: 7_221
            .saturating_add(Weight::from_parts(615_693, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_064_000 picoseconds.
        Weight::from_parts(2_145_445, 0)
            // Standard Error: 3_712
            .saturating_add(Weight::from_parts(378_170, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_154_000 picoseconds.
        Weight::from_parts(3_153_343, 0)
            // Standard Error: 1_942
            .saturating_add(Weight::from_parts(175_425, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_306_000 picoseconds.
        Weight::from_parts(3_164_557, 0)
            // Standard Error: 2_256
            .saturating_add(Weight::from_parts(175_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_214_000 picoseconds.
        Weight::from_parts(3_427_000, 0)
            // Standard Error: 10_803
            .saturating_add(Weight::from_parts(1_848_746, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_315_000 picoseconds.
        Weight::from_parts(3_564_000, 0)
            // Standard Error: 6_914
            .saturating_add(Weight::from_parts(1_155_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_357_000 picoseconds.
        Weight::from_parts(3_555_000, 0)
            // Standard Error: 11_082
            .saturating_add(Weight::from_parts(1_842_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_136_000 picoseconds.
        Weight::from_parts(3_269_000, 0)
            // Standard Error: 6_070
            .saturating_add(Weight::from_parts(1_114_156, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_053_000 picoseconds.
        Weight::from_parts(3_402_000, 0)
            // Standard Error: 12_359
            .saturating_add(Weight::from_parts(1_840_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_426_000 picoseconds.
        Weight::from_parts(3_618_000, 0)
            // Standard Error: 8_079
            .saturating_add(Weight::from_parts(1_108_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_402_000 picoseconds.
        Weight::from_parts(3_745_000, 0)
            // Standard Error: 11_871
            .saturating_add(Weight::from_parts(1_864_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_309_000 picoseconds.
        Weight::from_parts(3_707_000, 0)
            // Standard Error: 7_541
            .saturating_add(Weight::from_parts(1_209_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_136_000 picoseconds.
        Weight::from_parts(3_410_000, 0)
            // Standard Error: 11_058
            .saturating_add(Weight::from_parts(1_815_863, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_320_000 picoseconds.
        Weight::from_parts(3_697_000, 0)
            // Standard Error: 7_793
            .saturating_add(Weight::from_parts(1_139_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_285_000 picoseconds.
        Weight::from_parts(3_413_000, 0)
            // Standard Error: 9_807
            .saturating_add(Weight::from_parts(1_832_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_106_000 picoseconds.
        Weight::from_parts(3_319_000, 0)
            // Standard Error: 6_265
            .saturating_add(Weight::from_parts(1_126_902, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_138_000 picoseconds.
        Weight::from_parts(3_298_000, 0)
            // Standard Error: 10_583
            .saturating_add(Weight::from_parts(1_808_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_076_000 picoseconds.
        Weight::from_parts(3_277_000, 0)
            // Standard Error: 6_756
            .saturating_add(Weight::from_parts(1_172_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_445_000 picoseconds.
        Weight::from_parts(3_573_000, 0)
            // Standard Error: 10_807
            .saturating_add(Weight::from_parts(1_863_973, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_313_000 picoseconds.
        Weight::from_parts(3_488_000, 0)
            // Standard Error: 7_828
            .saturating_add(Weight::from_parts(1_136_472, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_120_000 picoseconds.
        Weight::from_parts(3_289_000, 0)
            // Standard Error: 10_897
            .saturating_add(Weight::from_parts(1_865_073, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_314_000 picoseconds.
        Weight::from_parts(3_884_000, 0)
            // Standard Error: 6_891
            .saturating_add(Weight::from_parts(1_173_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_267_000 picoseconds.
        Weight::from_parts(3_413_000, 0)
            // Standard Error: 11_041
            .saturating_add(Weight::from_parts(1_889_858, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_300_000 picoseconds.
        Weight::from_parts(3_718_000, 0)
            // Standard Error: 6_841
            .saturating_add(Weight::from_parts(1_117_611, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_315_000 picoseconds.
        Weight::from_parts(3_461_000, 0)
            // Standard Error: 6_709
            .saturating_add(Weight::from_parts(1_266_488, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_251_000 picoseconds.
        Weight::from_parts(456_509, 0)
            // Standard Error: 5_583
            .saturating_add(Weight::from_parts(701_621, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_620_000 picoseconds.
        Weight::from_parts(3_814_000, 0)
            // Standard Error: 7_916
            .saturating_add(Weight::from_parts(1_223_465, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_207_000 picoseconds.
        Weight::from_parts(902_058, 0)
            // Standard Error: 6_111
            .saturating_add(Weight::from_parts(697_450, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_207_000 picoseconds.
        Weight::from_parts(3_617_000, 0)
            // Standard Error: 11_942
            .saturating_add(Weight::from_parts(1_750_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_067_000 picoseconds.
        Weight::from_parts(3_497_000, 0)
            // Standard Error: 7_947
            .saturating_add(Weight::from_parts(1_170_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_306_000 picoseconds.
        Weight::from_parts(9_612_836, 0)
            // Standard Error: 17_367
            .saturating_add(Weight::from_parts(1_894_029, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_154_000 picoseconds.
        Weight::from_parts(8_647_899, 0)
            // Standard Error: 13_462
            .saturating_add(Weight::from_parts(1_763_963, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_406_000 picoseconds.
        Weight::from_parts(8_373_728, 0)
            // Standard Error: 20_416
            .saturating_add(Weight::from_parts(2_176_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_552_000 picoseconds.
        Weight::from_parts(8_441_054, 0)
            // Standard Error: 13_332
            .saturating_add(Weight::from_parts(1_709_529, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_258_000 picoseconds.
        Weight::from_parts(10_906_550, 0)
            // Standard Error: 39_940
            .saturating_add(Weight::from_parts(7_796_241, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_196_000 picoseconds.
        Weight::from_parts(8_814_007, 0)
            // Standard Error: 46_984
            .saturating_add(Weight::from_parts(6_475_177, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_169_000 picoseconds.
        Weight::from_parts(12_326_352, 0)
            // Standard Error: 18_963
            .saturating_add(Weight::from_parts(1_978_469, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_256_000 picoseconds.
        Weight::from_parts(6_132_735, 0)
            // Standard Error: 17_999
            .saturating_add(Weight::from_parts(1_948_439, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_183_000 picoseconds.
        Weight::from_parts(3_391_000, 0)
            // Standard Error: 6_147
            .saturating_add(Weight::from_parts(1_238_550, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_148_000 picoseconds.
        Weight::from_parts(3_286_000, 0)
            // Standard Error: 6_409
            .saturating_add(Weight::from_parts(787_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_412_000 picoseconds.
        Weight::from_parts(3_579_000, 0)
            // Standard Error: 7_086
            .saturating_add(Weight::from_parts(1_349_082, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_032_000 picoseconds.
        Weight::from_parts(3_466_000, 0)
            // Standard Error: 6_505
            .saturating_add(Weight::from_parts(780_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_202_000 picoseconds.
        Weight::from_parts(3_919_000, 0)
            // Standard Error: 7_711
            .saturating_add(Weight::from_parts(1_365_269, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_320_000 picoseconds.
        Weight::from_parts(3_782_000, 0)
            // Standard Error: 6_043
            .saturating_add(Weight::from_parts(717_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_324_000 picoseconds.
        Weight::from_parts(3_505_000, 0)
            // Standard Error: 7_639
            .saturating_add(Weight::from_parts(1_258_841, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_034_000 picoseconds.
        Weight::from_parts(1_296_570, 0)
            // Standard Error: 6_486
            .saturating_add(Weight::from_parts(680_149, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_517_000 picoseconds.
        Weight::from_parts(3_781_000, 0)
            // Standard Error: 6_643
            .saturating_add(Weight::from_parts(1_030_358, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_200_000 picoseconds.
        Weight::from_parts(1_121_063, 0)
            // Standard Error: 4_533
            .saturating_add(Weight::from_parts(633_930, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_424_000 picoseconds.
        Weight::from_parts(3_638_000, 0)
            // Standard Error: 6_518
            .saturating_add(Weight::from_parts(1_108_200, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_300_000 picoseconds.
        Weight::from_parts(1_104_319, 0)
            // Standard Error: 5_117
            .saturating_add(Weight::from_parts(662_032, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_139_000 picoseconds.
        Weight::from_parts(3_497_000, 0)
            // Standard Error: 6_621
            .saturating_add(Weight::from_parts(1_013_153, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_149_000 picoseconds.
        Weight::from_parts(1_196_324, 0)
            // Standard Error: 4_506
            .saturating_add(Weight::from_parts(623_950, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_306_000 picoseconds.
        Weight::from_parts(3_478_000, 0)
            // Standard Error: 7_891
            .saturating_add(Weight::from_parts(1_102_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_311_000 picoseconds.
        Weight::from_parts(490_423, 0)
            // Standard Error: 5_877
            .saturating_add(Weight::from_parts(683_697, 0).saturating_mul(r.into()))
    }
}
