// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=alloc,alloc_in_handle,alloc_per_page,claim_value,create_program,db_read_per_kb,db_write_per_kb,free,gr_block_height,gr_block_timestamp,gr_create_program,gr_create_program_per_kb,gr_create_program_wgas,gr_create_program_wgas_per_kb,gr_debug,gr_debug_per_kb,gr_gas_available,gr_message_id,gr_pay_program_rent,gr_program_id,gr_random,gr_read,gr_read_per_kb,gr_reply_code,gr_reply_deposit,gr_reply_per_kb,gr_reply_push,gr_reply_push_input,gr_reply_push_input_per_kb,gr_reply_push_per_kb,gr_reply_to,gr_reply_wgas_per_kb,gr_reservation_reply_commit_per_kb,gr_reservation_reply_per_kb,gr_reservation_send,gr_reservation_send_commit,gr_reservation_send_per_kb,gr_reserve_gas,gr_send,gr_send_commit,gr_send_commit_wgas,gr_send_init,gr_send_input,gr_send_input_wgas,gr_send_per_kb,gr_send_push,gr_send_push_input,gr_send_push_input_per_kb,gr_send_push_per_kb,gr_send_wgas,gr_send_wgas_per_kb,gr_signal_code,gr_signal_from,gr_size,gr_source,gr_system_reserve_gas,gr_unreserve_gas,gr_value,gr_value_available,gr_wake,initial_allocation,instantiate_module_per_kb,instr_br,instr_br_if,instr_br_table,instr_br_table_per_entry,instr_call,instr_call_const,instr_call_indirect,instr_call_indirect_per_param,instr_call_per_local,instr_global_get,instr_global_set,instr_i32add,instr_i32and,instr_i32clz,instr_i32ctz,instr_i32divs,instr_i32divu,instr_i32eq,instr_i32eqz,instr_i32extend16s,instr_i32extend8s,instr_i32ges,instr_i32geu,instr_i32gts,instr_i32gtu,instr_i32les,instr_i32leu,instr_i32load,instr_i32lts,instr_i32ltu,instr_i32mul,instr_i32ne,instr_i32or,instr_i32popcnt,instr_i32rems,instr_i32remu,instr_i32rotl,instr_i32rotr,instr_i32shl,instr_i32shrs,instr_i32shru,instr_i32store,instr_i32sub,instr_i32wrapi64,instr_i32xor,instr_i64add,instr_i64and,instr_i64clz,instr_i64ctz,instr_i64divs,instr_i64divu,instr_i64eq,instr_i64eqz,instr_i64extend16s,instr_i64extend32s,instr_i64extend8s,instr_i64extendsi32,instr_i64extendui32,instr_i64ges,instr_i64geu,instr_i64gts,instr_i64gtu,instr_i64les,instr_i64leu,instr_i64load,instr_i64lts,instr_i64ltu,instr_i64mul,instr_i64ne,instr_i64or,instr_i64popcnt,instr_i64rems,instr_i64remu,instr_i64rotl,instr_i64rotr,instr_i64shl,instr_i64shrs,instr_i64shru,instr_i64store,instr_i64sub,instr_i64xor,instr_if,instr_local_get,instr_local_set,instr_local_tee,instr_memory_current,instr_select,lazy_pages_host_func_read,lazy_pages_host_func_write,lazy_pages_host_func_write_after_read,lazy_pages_load_page_storage_data,lazy_pages_signal_read,lazy_pages_signal_write,lazy_pages_signal_write_after_read,mem_grow,pay_program_rent,reinstrument_per_kb,resume_session_commit,resume_session_init,resume_session_push,send_message,send_reply,tasks_pause_program,tasks_pause_program_uninited,tasks_remove_from_mailbox,tasks_remove_from_waitlist,tasks_remove_gas_reservation,tasks_remove_resume_session,tasks_send_dispatch,tasks_send_user_message,tasks_send_user_message_to_mailbox,tasks_wake_message,tasks_wake_message_no_wake,upload_code,upload_program --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_code(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn tasks_remove_resume_session() -> Weight;
    fn tasks_remove_gas_reservation() -> Weight;
    fn tasks_send_user_message_to_mailbox() -> Weight;
    fn tasks_send_user_message() -> Weight;
    fn tasks_send_dispatch() -> Weight;
    fn tasks_wake_message() -> Weight;
    fn tasks_wake_message_no_wake() -> Weight;
    fn tasks_remove_from_waitlist() -> Weight;
    fn tasks_remove_from_mailbox() -> Weight;
    fn tasks_pause_program(c: u32, ) -> Weight;
    fn tasks_pause_program_uninited(c: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_951_000 picoseconds.
        Weight::from_parts(100_717_768, 0)
            // Standard Error: 76_224
            .saturating_add(Weight::from_parts(17_095_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_454_000 picoseconds.
        Weight::from_parts(97_678_268, 0)
            // Standard Error: 74_738
            .saturating_add(Weight::from_parts(19_588_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_539_000 picoseconds.
        Weight::from_parts(98_327_518, 0)
            // Standard Error: 74_691
            .saturating_add(Weight::from_parts(17_315_626, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_519_000 picoseconds.
        Weight::from_parts(102_305_534, 0)
            // Standard Error: 74_397
            .saturating_add(Weight::from_parts(19_237_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 563_483_000 picoseconds.
        Weight::from_parts(582_831_594, 0)
            // Standard Error: 449_161
            .saturating_add(Weight::from_parts(18_438_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(_r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 578_006_000 picoseconds.
        Weight::from_parts(607_577_318, 0)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_345_000 picoseconds.
        Weight::from_parts(111_013_026, 0)
            // Standard Error: 74_005
            .saturating_add(Weight::from_parts(8_235_932, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_924_000 picoseconds.
        Weight::from_parts(110_267_312, 0)
            // Standard Error: 73_398
            .saturating_add(Weight::from_parts(12_311_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_277_000 picoseconds.
        Weight::from_parts(101_344_118, 0)
            // Standard Error: 2_127_102
            .saturating_add(Weight::from_parts(186_064_314, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_677_000 picoseconds.
        Weight::from_parts(101_464_400, 0)
            // Standard Error: 2_036_225
            .saturating_add(Weight::from_parts(168_701_236, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_169_000 picoseconds.
        Weight::from_parts(97_139_216, 0)
            // Standard Error: 1_956_585
            .saturating_add(Weight::from_parts(132_088_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_038_000 picoseconds.
        Weight::from_parts(97_158_312, 0)
            // Standard Error: 2_050_089
            .saturating_add(Weight::from_parts(173_080_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_747_000 picoseconds.
        Weight::from_parts(101_196_228, 0)
            // Standard Error: 2_139_551
            .saturating_add(Weight::from_parts(173_581_920, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 960_000 picoseconds.
        Weight::from_parts(1_000_000, 0)
            // Standard Error: 941
            .saturating_add(Weight::from_parts(212_255, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `79 + c * (1024 ±0)`
        //  Estimated: `3543 + c * (1024 ±0)`
        // Minimum execution time: 3_239_000 picoseconds.
        Weight::from_parts(3_317_000, 3543)
            // Standard Error: 1_258
            .saturating_add(Weight::from_parts(740_081, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_358_000 picoseconds.
        Weight::from_parts(101_958_464, 0)
            // Standard Error: 6_188
            .saturating_add(Weight::from_parts(2_328_325, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1304`
        //  Estimated: `51293`
        // Minimum execution time: 106_470_000 picoseconds.
        Weight::from_parts(109_289_000, 51293)
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `923`
        //  Estimated: `21372`
        // Minimum execution time: 54_191_000 picoseconds.
        Weight::from_parts(55_567_000, 21372)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `570`
        //  Estimated: `17214`
        // Minimum execution time: 28_905_000 picoseconds.
        Weight::from_parts(29_969_000, 17214)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 7_844_000 picoseconds.
        Weight::from_parts(3_279_595, 7640)
            // Standard Error: 35_665
            .saturating_add(Weight::from_parts(14_473_219, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1457 + c * (16389 ±0)`
        //  Estimated: `42178 + c * (131112 ±0)`
        // Minimum execution time: 70_870_000 picoseconds.
        Weight::from_parts(71_613_000, 42178)
            // Standard Error: 169_741
            .saturating_add(Weight::from_parts(54_942_035, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `46`
        //  Estimated: `5134`
        // Minimum execution time: 85_355_000 picoseconds.
        Weight::from_parts(87_584_183, 5134)
            // Standard Error: 25_310
            .saturating_add(Weight::from_parts(59_783_475, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1043`
        //  Estimated: `49852`
        // Minimum execution time: 93_704_000 picoseconds.
        Weight::from_parts(127_499_738, 49852)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_663, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `453`
        //  Estimated: `44268`
        // Minimum execution time: 11_298_578_000 picoseconds.
        Weight::from_parts(313_738_874, 44268)
            // Standard Error: 179_773
            .saturating_add(Weight::from_parts(60_271_223, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_602, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `530`
        //  Estimated: `31259`
        // Minimum execution time: 72_629_000 picoseconds.
        Weight::from_parts(49_117_214, 31259)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_095, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1303`
        //  Estimated: `53823`
        // Minimum execution time: 121_887_000 picoseconds.
        Weight::from_parts(93_252_844, 53823)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_136, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89393`
        // Minimum execution time: 357_691_000 picoseconds.
        Weight::from_parts(373_666_013, 89393)
            // Standard Error: 1_475
            .saturating_add(Weight::from_parts(288, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(31_u64))
            .saturating_add(T::DbWeight::get().writes(24_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89133`
        // Minimum execution time: 374_989_000 picoseconds.
        Weight::from_parts(394_614_393, 89133)
            .saturating_add(T::DbWeight::get().reads(31_u64))
            .saturating_add(T::DbWeight::get().writes(24_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 67_200_000 picoseconds.
        Weight::from_parts(67_509_000, 3899)
            // Standard Error: 38_196
            .saturating_add(Weight::from_parts(59_116_754, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_695_000 picoseconds.
        Weight::from_parts(94_967_000, 0)
            // Standard Error: 5_175_325
            .saturating_add(Weight::from_parts(748_650_861, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 485_489_000 picoseconds.
        Weight::from_parts(569_668_689, 0)
            // Standard Error: 273_944
            .saturating_add(Weight::from_parts(31_589_828, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 208_976_000 picoseconds.
        Weight::from_parts(203_793_073, 0)
            // Standard Error: 294_334
            .saturating_add(Weight::from_parts(63_953_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_586_000 picoseconds.
        Weight::from_parts(103_290_201, 0)
            // Standard Error: 4_817
            .saturating_add(Weight::from_parts(2_320_445, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 145_473_000 picoseconds.
        Weight::from_parts(214_067_565, 0)
            // Standard Error: 29_497
            .saturating_add(Weight::from_parts(1_955_803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_147_000 picoseconds.
        Weight::from_parts(112_970_024, 0)
            // Standard Error: 325_779
            .saturating_add(Weight::from_parts(89_123_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_276_000 picoseconds.
        Weight::from_parts(97_237_065, 0)
            // Standard Error: 241_915
            .saturating_add(Weight::from_parts(80_362_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_801_000 picoseconds.
        Weight::from_parts(94_158_659, 0)
            // Standard Error: 272_345
            .saturating_add(Weight::from_parts(79_844_961, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_469_000 picoseconds.
        Weight::from_parts(94_877_697, 0)
            // Standard Error: 282_150
            .saturating_add(Weight::from_parts(79_838_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_974_000 picoseconds.
        Weight::from_parts(94_496_657, 0)
            // Standard Error: 305_129
            .saturating_add(Weight::from_parts(79_028_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_897_000 picoseconds.
        Weight::from_parts(87_649_819, 0)
            // Standard Error: 322_754
            .saturating_add(Weight::from_parts(80_268_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_173_000 picoseconds.
        Weight::from_parts(96_607_393, 0)
            // Standard Error: 314_464
            .saturating_add(Weight::from_parts(78_076_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_956_000 picoseconds.
        Weight::from_parts(94_318_451, 0)
            // Standard Error: 273_910
            .saturating_add(Weight::from_parts(78_930_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_269_000 picoseconds.
        Weight::from_parts(606_077_348, 0)
            // Standard Error: 383_361
            .saturating_add(Weight::from_parts(116_003_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_324_000 picoseconds.
        Weight::from_parts(717_965_000, 0)
            // Standard Error: 58_667
            .saturating_add(Weight::from_parts(13_207_989, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_054_000 picoseconds.
        Weight::from_parts(96_172_569, 0)
            // Standard Error: 280_132
            .saturating_add(Weight::from_parts(79_471_939, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_911_000 picoseconds.
        Weight::from_parts(88_693_640, 0)
            // Standard Error: 358_125
            .saturating_add(Weight::from_parts(79_354_420, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_784_000 picoseconds.
        Weight::from_parts(106_277_130, 0)
            // Standard Error: 343_005
            .saturating_add(Weight::from_parts(156_965_020, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_813_000 picoseconds.
        Weight::from_parts(98_769_000, 0)
            // Standard Error: 3_613_658
            .saturating_add(Weight::from_parts(729_581_907, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_000_000 picoseconds.
        Weight::from_parts(154_377_709, 0)
            // Standard Error: 437_713
            .saturating_add(Weight::from_parts(234_687_404, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 324_758_000 picoseconds.
        Weight::from_parts(328_638_000, 0)
            // Standard Error: 58_648
            .saturating_add(Weight::from_parts(24_437_593, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_044_000 picoseconds.
        Weight::from_parts(157_232_198, 0)
            // Standard Error: 396_906
            .saturating_add(Weight::from_parts(240_347_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_422_000 picoseconds.
        Weight::from_parts(331_656_000, 0)
            // Standard Error: 60_455
            .saturating_add(Weight::from_parts(24_506_810, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_320_000 picoseconds.
        Weight::from_parts(634_868_924, 0)
            // Standard Error: 418_525
            .saturating_add(Weight::from_parts(249_901_540, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_448_000 picoseconds.
        Weight::from_parts(641_930_738, 0)
            // Standard Error: 409_252
            .saturating_add(Weight::from_parts(258_755_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_815_000 picoseconds.
        Weight::from_parts(82_681_780, 0)
            // Standard Error: 324_107
            .saturating_add(Weight::from_parts(88_233_101, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_741_345_000 picoseconds.
        Weight::from_parts(1_859_369_769, 0)
            // Standard Error: 364_359
            .saturating_add(Weight::from_parts(143_830_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 307_004_000 picoseconds.
        Weight::from_parts(311_176_000, 0)
            // Standard Error: 62_536
            .saturating_add(Weight::from_parts(34_317_550, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_721_015_000 picoseconds.
        Weight::from_parts(1_861_251_849, 0)
            // Standard Error: 415_928
            .saturating_add(Weight::from_parts(202_045_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_735_158_000 picoseconds.
        Weight::from_parts(1_840_039_726, 0)
            // Standard Error: 369_415
            .saturating_add(Weight::from_parts(206_925_082, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 262_894_000 picoseconds.
        Weight::from_parts(301_793_251, 0)
            // Standard Error: 357_618
            .saturating_add(Weight::from_parts(252_986_349, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 511_301_000 picoseconds.
        Weight::from_parts(521_795_000, 0)
            // Standard Error: 56_321
            .saturating_add(Weight::from_parts(24_551_133, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_893_497_000 picoseconds.
        Weight::from_parts(1_990_682_636, 0)
            // Standard Error: 488_519
            .saturating_add(Weight::from_parts(217_870_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_911_000 picoseconds.
        Weight::from_parts(104_498_766, 0)
            // Standard Error: 1_026
            .saturating_add(Weight::from_parts(483_810, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_932_000 picoseconds.
        Weight::from_parts(102_081_372, 0)
            // Standard Error: 1_209
            .saturating_add(Weight::from_parts(488_334, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_148_000 picoseconds.
        Weight::from_parts(144_750_049, 0)
            // Standard Error: 429_315
            .saturating_add(Weight::from_parts(131_289_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_069_000 picoseconds.
        Weight::from_parts(111_278_000, 0)
            // Standard Error: 2_429
            .saturating_add(Weight::from_parts(679_580, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 115_992_000 picoseconds.
        Weight::from_parts(104_484_181, 0)
            // Standard Error: 924
            .saturating_add(Weight::from_parts(487_903, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_181_000 picoseconds.
        Weight::from_parts(101_489_832, 0)
            // Standard Error: 1_185
            .saturating_add(Weight::from_parts(489_003, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_388_000 picoseconds.
        Weight::from_parts(90_628_272, 0)
            // Standard Error: 241_895
            .saturating_add(Weight::from_parts(80_053_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_363_000 picoseconds.
        Weight::from_parts(92_162_352, 0)
            // Standard Error: 314_463
            .saturating_add(Weight::from_parts(78_800_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_936_000 picoseconds.
        Weight::from_parts(89_390_999, 0)
            // Standard Error: 349_987
            .saturating_add(Weight::from_parts(83_132_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 565_519_000 picoseconds.
        Weight::from_parts(580_848_281, 0)
            // Standard Error: 393_637
            .saturating_add(Weight::from_parts(105_390_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 584_541_000 picoseconds.
        Weight::from_parts(619_408_777, 0)
            // Standard Error: 1_715
            .saturating_add(Weight::from_parts(110_174, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_472_000 picoseconds.
        Weight::from_parts(2_366_765_174, 0)
            // Standard Error: 450_617
            .saturating_add(Weight::from_parts(126_679_589, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_412_676_000 picoseconds.
        Weight::from_parts(2_269_571_280, 0)
            // Standard Error: 14_334
            .saturating_add(Weight::from_parts(12_340_809, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_485_000 picoseconds.
        Weight::from_parts(122_012_469, 0)
            // Standard Error: 397_788
            .saturating_add(Weight::from_parts(102_615_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 160_900_000 picoseconds.
        Weight::from_parts(163_653_000, 0)
            // Standard Error: 53_369
            .saturating_add(Weight::from_parts(30_430_265, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_997_000 picoseconds.
        Weight::from_parts(91_692_792, 0)
            // Standard Error: 303_701
            .saturating_add(Weight::from_parts(78_191_086, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 144_900_000 picoseconds.
        Weight::from_parts(232_609_280, 0)
            // Standard Error: 399_518
            .saturating_add(Weight::from_parts(134_791_627, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_229_000 picoseconds.
        Weight::from_parts(172_796_927, 0)
            // Standard Error: 426_983
            .saturating_add(Weight::from_parts(322_538_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_796_283_000 picoseconds.
        Weight::from_parts(52_856_932_000, 0)
            // Standard Error: 319_629
            .saturating_add(Weight::from_parts(8_350_715, 0).saturating_mul(p.into()))
            // Standard Error: 319_614
            .saturating_add(Weight::from_parts(181_173_152, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_225_000 picoseconds.
        Weight::from_parts(165_938_086, 0)
            // Standard Error: 375_037
            .saturating_add(Weight::from_parts(329_093_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 49_921_712_000 picoseconds.
        Weight::from_parts(49_985_776_000, 0)
            // Standard Error: 302_570
            .saturating_add(Weight::from_parts(9_442_995, 0).saturating_mul(p.into()))
            // Standard Error: 302_555
            .saturating_add(Weight::from_parts(181_874_861, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_158_000 picoseconds.
        Weight::from_parts(110_245_538, 0)
            // Standard Error: 28_669
            .saturating_add(Weight::from_parts(1_774_366, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 91_594_000 picoseconds.
        Weight::from_parts(131_659_366, 1131)
            // Standard Error: 17_381
            .saturating_add(Weight::from_parts(14_523_041, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_922_000 picoseconds.
        Weight::from_parts(94_897_000, 1131)
            // Standard Error: 34_843
            .saturating_add(Weight::from_parts(41_827_659, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_473_917_000 picoseconds.
        Weight::from_parts(7_419_217_673, 5069931)
            // Standard Error: 72_370
            .saturating_add(Weight::from_parts(41_244_424, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 93_816_000 picoseconds.
        Weight::from_parts(97_015_000, 1939)
            // Standard Error: 49_263
            .saturating_add(Weight::from_parts(54_820_812, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 103_925_000 picoseconds.
        Weight::from_parts(108_901_208, 1131)
            // Standard Error: 75_458
            .saturating_add(Weight::from_parts(42_819_430, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 603_461_000 picoseconds.
        Weight::from_parts(609_663_702, 1496)
            // Standard Error: 130_843
            .saturating_add(Weight::from_parts(48_053_563, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_065_846_000 picoseconds.
        Weight::from_parts(1_081_637_554, 317931)
            // Standard Error: 190_175
            .saturating_add(Weight::from_parts(48_782_076, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_707_000 picoseconds.
        Weight::from_parts(9_567_226, 0)
            // Standard Error: 253_530
            .saturating_add(Weight::from_parts(72_658_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_441_788_000 picoseconds.
        Weight::from_parts(4_015_824_269, 0)
            // Standard Error: 88_889
            .saturating_add(Weight::from_parts(6_159_028, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_444_047_000 picoseconds.
        Weight::from_parts(4_066_569_210, 0)
            // Standard Error: 85_042
            .saturating_add(Weight::from_parts(5_854_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_627_366_000 picoseconds.
        Weight::from_parts(11_380_309_623, 0)
            // Standard Error: 150_067
            .saturating_add(Weight::from_parts(10_299_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_024_055_000 picoseconds.
        Weight::from_parts(11_033_908_079, 0)
            // Standard Error: 160_760
            .saturating_add(Weight::from_parts(8_595_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_338_000 picoseconds.
        Weight::from_parts(2_437_000, 0)
            // Standard Error: 9_433
            .saturating_add(Weight::from_parts(3_787_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_533_000, 0)
            // Standard Error: 5_336
            .saturating_add(Weight::from_parts(3_028_776, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(3_490_508, 0)
            // Standard Error: 946
            .saturating_add(Weight::from_parts(1_562_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_368_000 picoseconds.
        Weight::from_parts(2_394_000, 0)
            // Standard Error: 9_240
            .saturating_add(Weight::from_parts(2_910_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_457_000 picoseconds.
        Weight::from_parts(2_526_000, 0)
            // Standard Error: 6_350
            .saturating_add(Weight::from_parts(5_307_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_812_000 picoseconds.
        Weight::from_parts(7_468_072, 0)
            // Standard Error: 2_003
            .saturating_add(Weight::from_parts(95_495, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_448_000 picoseconds.
        Weight::from_parts(4_082_196, 0)
            // Standard Error: 5_596
            .saturating_add(Weight::from_parts(2_567_916, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_567_916 -
            2_402_985, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_362_000 picoseconds.
        Weight::from_parts(4_019_053, 0)
            // Standard Error: 12_148
            .saturating_add(Weight::from_parts(2_402_985, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_768_000 picoseconds.
        Weight::from_parts(12_009_440, 0)
            // Standard Error: 25_506
            .saturating_add(Weight::from_parts(9_923_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_634_000 picoseconds.
        Weight::from_parts(12_825_000, 0)
            // Standard Error: 8_148
            .saturating_add(Weight::from_parts(1_044_503, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_391_000 picoseconds.
        Weight::from_parts(5_731_096, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_854_000 picoseconds.
        Weight::from_parts(5_311_261, 0)
            // Standard Error: 2_798
            .saturating_add(Weight::from_parts(390_457, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_948_000 picoseconds.
        Weight::from_parts(4_397_769, 0)
            // Standard Error: 5_057
            .saturating_add(Weight::from_parts(930_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_959_000 picoseconds.
        Weight::from_parts(3_982_836, 0)
            // Standard Error: 5_019
            .saturating_add(Weight::from_parts(1_023_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_427_000 picoseconds.
        Weight::from_parts(2_896_156, 0)
            // Standard Error: 6_951
            .saturating_add(Weight::from_parts(802_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_462_000 picoseconds.
        Weight::from_parts(426_469, 0)
            // Standard Error: 10_537
            .saturating_add(Weight::from_parts(1_494_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_457_000 picoseconds.
        Weight::from_parts(3_895_728, 0)
            // Standard Error: 11_712
            .saturating_add(Weight::from_parts(6_886_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_329_000 picoseconds.
        Weight::from_parts(2_446_000, 0)
            // Standard Error: 7_863
            .saturating_add(Weight::from_parts(3_373_960, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_356_000 picoseconds.
        Weight::from_parts(2_403_000, 0)
            // Standard Error: 7_062
            .saturating_add(Weight::from_parts(3_099_699, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(2_447_000, 0)
            // Standard Error: 9_233
            .saturating_add(Weight::from_parts(3_062_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_439_000, 0)
            // Standard Error: 5_385
            .saturating_add(Weight::from_parts(2_634_958, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_364_000 picoseconds.
        Weight::from_parts(78_370, 0)
            // Standard Error: 5_836
            .saturating_add(Weight::from_parts(644_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_313_000 picoseconds.
        Weight::from_parts(1_560_627, 0)
            // Standard Error: 3_446
            .saturating_add(Weight::from_parts(401_278, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 13_417
            .saturating_add(Weight::from_parts(1_923_096, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_474_000, 0)
            // Standard Error: 7_779
            .saturating_add(Weight::from_parts(1_116_387, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(958_713, 0)
            // Standard Error: 3_953
            .saturating_add(Weight::from_parts(425_012, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_340_000 picoseconds.
        Weight::from_parts(1_210_342, 0)
            // Standard Error: 4_008
            .saturating_add(Weight::from_parts(405_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_364_000 picoseconds.
        Weight::from_parts(2_412_000, 0)
            // Standard Error: 3_850
            .saturating_add(Weight::from_parts(531_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_383_000 picoseconds.
        Weight::from_parts(784_532, 0)
            // Standard Error: 6_069
            .saturating_add(Weight::from_parts(555_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(1_161_421, 0)
            // Standard Error: 4_039
            .saturating_add(Weight::from_parts(484_763, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_349_000 picoseconds.
        Weight::from_parts(1_691_620, 0)
            // Standard Error: 2_981
            .saturating_add(Weight::from_parts(348_760, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_515_000 picoseconds.
        Weight::from_parts(2_924_119, 0)
            // Standard Error: 1_669
            .saturating_add(Weight::from_parts(157_895, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_991_592, 0)
            // Standard Error: 1_832
            .saturating_add(Weight::from_parts(165_974, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_372_000 picoseconds.
        Weight::from_parts(2_393_000, 0)
            // Standard Error: 11_615
            .saturating_add(Weight::from_parts(1_881_514, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 6_569
            .saturating_add(Weight::from_parts(1_113_971, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(2_360_000, 0)
            // Standard Error: 13_054
            .saturating_add(Weight::from_parts(1_818_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_475_000, 0)
            // Standard Error: 6_899
            .saturating_add(Weight::from_parts(1_114_381, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_348_000 picoseconds.
        Weight::from_parts(2_420_000, 0)
            // Standard Error: 13_464
            .saturating_add(Weight::from_parts(1_878_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_337_000 picoseconds.
        Weight::from_parts(2_365_000, 0)
            // Standard Error: 7_739
            .saturating_add(Weight::from_parts(1_119_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_307_000 picoseconds.
        Weight::from_parts(2_421_000, 0)
            // Standard Error: 12_467
            .saturating_add(Weight::from_parts(1_861_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_301_000 picoseconds.
        Weight::from_parts(2_412_000, 0)
            // Standard Error: 6_899
            .saturating_add(Weight::from_parts(1_092_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_301_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 12_879
            .saturating_add(Weight::from_parts(1_884_396, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_331_000 picoseconds.
        Weight::from_parts(2_429_000, 0)
            // Standard Error: 8_894
            .saturating_add(Weight::from_parts(1_169_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_357_000, 0)
            // Standard Error: 13_940
            .saturating_add(Weight::from_parts(1_914_631, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_375_000 picoseconds.
        Weight::from_parts(2_459_000, 0)
            // Standard Error: 8_402
            .saturating_add(Weight::from_parts(1_176_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_418_000, 0)
            // Standard Error: 10_611
            .saturating_add(Weight::from_parts(1_872_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_451_000, 0)
            // Standard Error: 8_844
            .saturating_add(Weight::from_parts(1_196_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_475_000, 0)
            // Standard Error: 13_149
            .saturating_add(Weight::from_parts(1_951_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_349_000 picoseconds.
        Weight::from_parts(2_426_000, 0)
            // Standard Error: 11_494
            .saturating_add(Weight::from_parts(1_149_239, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_370_000 picoseconds.
        Weight::from_parts(2_432_000, 0)
            // Standard Error: 10_649
            .saturating_add(Weight::from_parts(1_844_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_322_000 picoseconds.
        Weight::from_parts(2_404_000, 0)
            // Standard Error: 7_953
            .saturating_add(Weight::from_parts(1_133_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_420_000, 0)
            // Standard Error: 11_413
            .saturating_add(Weight::from_parts(1_992_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_323_000 picoseconds.
        Weight::from_parts(2_385_000, 0)
            // Standard Error: 8_279
            .saturating_add(Weight::from_parts(1_189_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_298_000 picoseconds.
        Weight::from_parts(2_350_000, 0)
            // Standard Error: 10_140
            .saturating_add(Weight::from_parts(1_326_733, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_313_000 picoseconds.
        Weight::from_parts(2_371_000, 0)
            // Standard Error: 4_037
            .saturating_add(Weight::from_parts(637_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_344_000 picoseconds.
        Weight::from_parts(2_373_000, 0)
            // Standard Error: 10_199
            .saturating_add(Weight::from_parts(1_298_682, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_466_000, 0)
            // Standard Error: 4_582
            .saturating_add(Weight::from_parts(636_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(2_463_000, 0)
            // Standard Error: 12_897
            .saturating_add(Weight::from_parts(1_846_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(2_417_000, 0)
            // Standard Error: 9_981
            .saturating_add(Weight::from_parts(1_223_793, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_312_000 picoseconds.
        Weight::from_parts(2_393_000, 0)
            // Standard Error: 10_103
            .saturating_add(Weight::from_parts(2_741_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_396_000 picoseconds.
        Weight::from_parts(112_380, 0)
            // Standard Error: 10_925
            .saturating_add(Weight::from_parts(2_528_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(2_454_000, 0)
            // Standard Error: 10_428
            .saturating_add(Weight::from_parts(2_995_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(2_130_896, 0)
            // Standard Error: 13_603
            .saturating_add(Weight::from_parts(2_381_602, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(2_353_000, 0)
            // Standard Error: 16_019
            .saturating_add(Weight::from_parts(9_029_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_365_000 picoseconds.
        Weight::from_parts(2_433_000, 0)
            // Standard Error: 25_156
            .saturating_add(Weight::from_parts(7_213_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(5_071_167, 0)
            // Standard Error: 16_438
            .saturating_add(Weight::from_parts(2_737_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 6_075
            .saturating_add(Weight::from_parts(2_397_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_489_000, 0)
            // Standard Error: 7_542
            .saturating_add(Weight::from_parts(1_261_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_313_000 picoseconds.
        Weight::from_parts(2_396_000, 0)
            // Standard Error: 5_257
            .saturating_add(Weight::from_parts(658_509, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_324_000 picoseconds.
        Weight::from_parts(2_405_000, 0)
            // Standard Error: 8_100
            .saturating_add(Weight::from_parts(1_243_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_330_000 picoseconds.
        Weight::from_parts(2_385_000, 0)
            // Standard Error: 4_018
            .saturating_add(Weight::from_parts(621_808, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_332_000 picoseconds.
        Weight::from_parts(2_395_000, 0)
            // Standard Error: 7_529
            .saturating_add(Weight::from_parts(1_224_045, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(179_834, 0)
            // Standard Error: 5_835
            .saturating_add(Weight::from_parts(669_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_333_000, 0)
            // Standard Error: 7_311
            .saturating_add(Weight::from_parts(1_060_292, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(2_411_000, 0)
            // Standard Error: 4_306
            .saturating_add(Weight::from_parts(560_405, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_275_000 picoseconds.
        Weight::from_parts(2_393_000, 0)
            // Standard Error: 5_538
            .saturating_add(Weight::from_parts(1_020_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_335_000 picoseconds.
        Weight::from_parts(2_422_000, 0)
            // Standard Error: 4_558
            .saturating_add(Weight::from_parts(573_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(2_451_000, 0)
            // Standard Error: 7_831
            .saturating_add(Weight::from_parts(1_042_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_321_000 picoseconds.
        Weight::from_parts(2_449_000, 0)
            // Standard Error: 3_964
            .saturating_add(Weight::from_parts(546_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_323_000 picoseconds.
        Weight::from_parts(2_403_000, 0)
            // Standard Error: 7_636
            .saturating_add(Weight::from_parts(1_023_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_336_000 picoseconds.
        Weight::from_parts(2_397_000, 0)
            // Standard Error: 4_811
            .saturating_add(Weight::from_parts(578_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_430_000 picoseconds.
        Weight::from_parts(2_479_000, 0)
            // Standard Error: 6_737
            .saturating_add(Weight::from_parts(1_088_901, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_304_000 picoseconds.
        Weight::from_parts(2_364_000, 0)
            // Standard Error: 3_944
            .saturating_add(Weight::from_parts(569_246, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 5_921_000 picoseconds.
        Weight::from_parts(6_104_000, 4169)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1039`
        //  Estimated: `23781`
        // Minimum execution time: 61_062_000 picoseconds.
        Weight::from_parts(62_680_000, 23781)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `820`
        //  Estimated: `21750`
        // Minimum execution time: 46_305_000 picoseconds.
        Weight::from_parts(47_371_000, 21750)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `942`
        //  Estimated: `34143`
        // Minimum execution time: 75_202_000 picoseconds.
        Weight::from_parts(76_741_000, 34143)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `627`
        //  Estimated: `20101`
        // Minimum execution time: 31_345_000 picoseconds.
        Weight::from_parts(32_397_000, 20101)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `908`
        //  Estimated: `26160`
        // Minimum execution time: 46_945_000 picoseconds.
        Weight::from_parts(47_662_000, 26160)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_774_000 picoseconds.
        Weight::from_parts(3_895_000, 3545)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1558`
        //  Estimated: `57552`
        // Minimum execution time: 108_473_000 picoseconds.
        Weight::from_parts(111_694_000, 57552)
            .saturating_add(T::DbWeight::get().reads(16_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1264`
        //  Estimated: `46350`
        // Minimum execution time: 90_424_000 picoseconds.
        Weight::from_parts(91_903_000, 46350)
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2236 + c * (16400 ±0)`
        //  Estimated: `19543 + c * (84480 ±0)`
        // Minimum execution time: 28_903_000 picoseconds.
        Weight::from_parts(29_338_000, 19543)
            // Standard Error: 76_744
            .saturating_add(Weight::from_parts(38_940_231, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3061 + c * (42 ±0)`
        //  Estimated: `59827 + c * (2947 ±0)`
        // Minimum execution time: 86_931_000 picoseconds.
        Weight::from_parts(73_105_603, 59827)
            // Standard Error: 2_094
            .saturating_add(Weight::from_parts(1_048_872, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_951_000 picoseconds.
        Weight::from_parts(100_717_768, 0)
            // Standard Error: 76_224
            .saturating_add(Weight::from_parts(17_095_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_454_000 picoseconds.
        Weight::from_parts(97_678_268, 0)
            // Standard Error: 74_738
            .saturating_add(Weight::from_parts(19_588_928, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_539_000 picoseconds.
        Weight::from_parts(98_327_518, 0)
            // Standard Error: 74_691
            .saturating_add(Weight::from_parts(17_315_626, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_519_000 picoseconds.
        Weight::from_parts(102_305_534, 0)
            // Standard Error: 74_397
            .saturating_add(Weight::from_parts(19_237_730, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 563_483_000 picoseconds.
        Weight::from_parts(582_831_594, 0)
            // Standard Error: 449_161
            .saturating_add(Weight::from_parts(18_438_220, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(_r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 578_006_000 picoseconds.
        Weight::from_parts(607_577_318, 0)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_345_000 picoseconds.
        Weight::from_parts(111_013_026, 0)
            // Standard Error: 74_005
            .saturating_add(Weight::from_parts(8_235_932, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_924_000 picoseconds.
        Weight::from_parts(110_267_312, 0)
            // Standard Error: 73_398
            .saturating_add(Weight::from_parts(12_311_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_277_000 picoseconds.
        Weight::from_parts(101_344_118, 0)
            // Standard Error: 2_127_102
            .saturating_add(Weight::from_parts(186_064_314, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_677_000 picoseconds.
        Weight::from_parts(101_464_400, 0)
            // Standard Error: 2_036_225
            .saturating_add(Weight::from_parts(168_701_236, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_169_000 picoseconds.
        Weight::from_parts(97_139_216, 0)
            // Standard Error: 1_956_585
            .saturating_add(Weight::from_parts(132_088_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_038_000 picoseconds.
        Weight::from_parts(97_158_312, 0)
            // Standard Error: 2_050_089
            .saturating_add(Weight::from_parts(173_080_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_747_000 picoseconds.
        Weight::from_parts(101_196_228, 0)
            // Standard Error: 2_139_551
            .saturating_add(Weight::from_parts(173_581_920, 0).saturating_mul(r.into()))
    }
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 960_000 picoseconds.
        Weight::from_parts(1_000_000, 0)
            // Standard Error: 941
            .saturating_add(Weight::from_parts(212_255, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `79 + c * (1024 ±0)`
        //  Estimated: `3543 + c * (1024 ±0)`
        // Minimum execution time: 3_239_000 picoseconds.
        Weight::from_parts(3_317_000, 3543)
            // Standard Error: 1_258
            .saturating_add(Weight::from_parts(740_081, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 59_358_000 picoseconds.
        Weight::from_parts(101_958_464, 0)
            // Standard Error: 6_188
            .saturating_add(Weight::from_parts(2_328_325, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1304`
        //  Estimated: `51293`
        // Minimum execution time: 106_470_000 picoseconds.
        Weight::from_parts(109_289_000, 51293)
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `923`
        //  Estimated: `21372`
        // Minimum execution time: 54_191_000 picoseconds.
        Weight::from_parts(55_567_000, 21372)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `570`
        //  Estimated: `17214`
        // Minimum execution time: 28_905_000 picoseconds.
        Weight::from_parts(29_969_000, 17214)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 7_844_000 picoseconds.
        Weight::from_parts(3_279_595, 7640)
            // Standard Error: 35_665
            .saturating_add(Weight::from_parts(14_473_219, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1457 + c * (16389 ±0)`
        //  Estimated: `42178 + c * (131112 ±0)`
        // Minimum execution time: 70_870_000 picoseconds.
        Weight::from_parts(71_613_000, 42178)
            // Standard Error: 169_741
            .saturating_add(Weight::from_parts(54_942_035, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `46`
        //  Estimated: `5134`
        // Minimum execution time: 85_355_000 picoseconds.
        Weight::from_parts(87_584_183, 5134)
            // Standard Error: 25_310
            .saturating_add(Weight::from_parts(59_783_475, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1043`
        //  Estimated: `49852`
        // Minimum execution time: 93_704_000 picoseconds.
        Weight::from_parts(127_499_738, 49852)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_663, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `453`
        //  Estimated: `44268`
        // Minimum execution time: 11_298_578_000 picoseconds.
        Weight::from_parts(313_738_874, 44268)
            // Standard Error: 179_773
            .saturating_add(Weight::from_parts(60_271_223, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_602, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(15_u64))
            .saturating_add(RocksDbWeight::get().writes(16_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `530`
        //  Estimated: `31259`
        // Minimum execution time: 72_629_000 picoseconds.
        Weight::from_parts(49_117_214, 31259)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_095, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1303`
        //  Estimated: `53823`
        // Minimum execution time: 121_887_000 picoseconds.
        Weight::from_parts(93_252_844, 53823)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_136, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89393`
        // Minimum execution time: 357_691_000 picoseconds.
        Weight::from_parts(373_666_013, 89393)
            // Standard Error: 1_475
            .saturating_add(Weight::from_parts(288, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(31_u64))
            .saturating_add(RocksDbWeight::get().writes(24_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `89133`
        // Minimum execution time: 374_989_000 picoseconds.
        Weight::from_parts(394_614_393, 89133)
            .saturating_add(RocksDbWeight::get().reads(31_u64))
            .saturating_add(RocksDbWeight::get().writes(24_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 67_200_000 picoseconds.
        Weight::from_parts(67_509_000, 3899)
            // Standard Error: 38_196
            .saturating_add(Weight::from_parts(59_116_754, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_695_000 picoseconds.
        Weight::from_parts(94_967_000, 0)
            // Standard Error: 5_175_325
            .saturating_add(Weight::from_parts(748_650_861, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 485_489_000 picoseconds.
        Weight::from_parts(569_668_689, 0)
            // Standard Error: 273_944
            .saturating_add(Weight::from_parts(31_589_828, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 208_976_000 picoseconds.
        Weight::from_parts(203_793_073, 0)
            // Standard Error: 294_334
            .saturating_add(Weight::from_parts(63_953_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_586_000 picoseconds.
        Weight::from_parts(103_290_201, 0)
            // Standard Error: 4_817
            .saturating_add(Weight::from_parts(2_320_445, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 145_473_000 picoseconds.
        Weight::from_parts(214_067_565, 0)
            // Standard Error: 29_497
            .saturating_add(Weight::from_parts(1_955_803, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_147_000 picoseconds.
        Weight::from_parts(112_970_024, 0)
            // Standard Error: 325_779
            .saturating_add(Weight::from_parts(89_123_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_276_000 picoseconds.
        Weight::from_parts(97_237_065, 0)
            // Standard Error: 241_915
            .saturating_add(Weight::from_parts(80_362_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_801_000 picoseconds.
        Weight::from_parts(94_158_659, 0)
            // Standard Error: 272_345
            .saturating_add(Weight::from_parts(79_844_961, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_469_000 picoseconds.
        Weight::from_parts(94_877_697, 0)
            // Standard Error: 282_150
            .saturating_add(Weight::from_parts(79_838_125, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_974_000 picoseconds.
        Weight::from_parts(94_496_657, 0)
            // Standard Error: 305_129
            .saturating_add(Weight::from_parts(79_028_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_897_000 picoseconds.
        Weight::from_parts(87_649_819, 0)
            // Standard Error: 322_754
            .saturating_add(Weight::from_parts(80_268_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_173_000 picoseconds.
        Weight::from_parts(96_607_393, 0)
            // Standard Error: 314_464
            .saturating_add(Weight::from_parts(78_076_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_956_000 picoseconds.
        Weight::from_parts(94_318_451, 0)
            // Standard Error: 273_910
            .saturating_add(Weight::from_parts(78_930_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_269_000 picoseconds.
        Weight::from_parts(606_077_348, 0)
            // Standard Error: 383_361
            .saturating_add(Weight::from_parts(116_003_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_324_000 picoseconds.
        Weight::from_parts(717_965_000, 0)
            // Standard Error: 58_667
            .saturating_add(Weight::from_parts(13_207_989, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_054_000 picoseconds.
        Weight::from_parts(96_172_569, 0)
            // Standard Error: 280_132
            .saturating_add(Weight::from_parts(79_471_939, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_911_000 picoseconds.
        Weight::from_parts(88_693_640, 0)
            // Standard Error: 358_125
            .saturating_add(Weight::from_parts(79_354_420, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_784_000 picoseconds.
        Weight::from_parts(106_277_130, 0)
            // Standard Error: 343_005
            .saturating_add(Weight::from_parts(156_965_020, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_813_000 picoseconds.
        Weight::from_parts(98_769_000, 0)
            // Standard Error: 3_613_658
            .saturating_add(Weight::from_parts(729_581_907, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_000_000 picoseconds.
        Weight::from_parts(154_377_709, 0)
            // Standard Error: 437_713
            .saturating_add(Weight::from_parts(234_687_404, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 324_758_000 picoseconds.
        Weight::from_parts(328_638_000, 0)
            // Standard Error: 58_648
            .saturating_add(Weight::from_parts(24_437_593, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_044_000 picoseconds.
        Weight::from_parts(157_232_198, 0)
            // Standard Error: 396_906
            .saturating_add(Weight::from_parts(240_347_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 327_422_000 picoseconds.
        Weight::from_parts(331_656_000, 0)
            // Standard Error: 60_455
            .saturating_add(Weight::from_parts(24_506_810, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_320_000 picoseconds.
        Weight::from_parts(634_868_924, 0)
            // Standard Error: 418_525
            .saturating_add(Weight::from_parts(249_901_540, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 574_448_000 picoseconds.
        Weight::from_parts(641_930_738, 0)
            // Standard Error: 409_252
            .saturating_add(Weight::from_parts(258_755_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_815_000 picoseconds.
        Weight::from_parts(82_681_780, 0)
            // Standard Error: 324_107
            .saturating_add(Weight::from_parts(88_233_101, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_741_345_000 picoseconds.
        Weight::from_parts(1_859_369_769, 0)
            // Standard Error: 364_359
            .saturating_add(Weight::from_parts(143_830_199, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 307_004_000 picoseconds.
        Weight::from_parts(311_176_000, 0)
            // Standard Error: 62_536
            .saturating_add(Weight::from_parts(34_317_550, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_721_015_000 picoseconds.
        Weight::from_parts(1_861_251_849, 0)
            // Standard Error: 415_928
            .saturating_add(Weight::from_parts(202_045_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_735_158_000 picoseconds.
        Weight::from_parts(1_840_039_726, 0)
            // Standard Error: 369_415
            .saturating_add(Weight::from_parts(206_925_082, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 262_894_000 picoseconds.
        Weight::from_parts(301_793_251, 0)
            // Standard Error: 357_618
            .saturating_add(Weight::from_parts(252_986_349, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 511_301_000 picoseconds.
        Weight::from_parts(521_795_000, 0)
            // Standard Error: 56_321
            .saturating_add(Weight::from_parts(24_551_133, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_893_497_000 picoseconds.
        Weight::from_parts(1_990_682_636, 0)
            // Standard Error: 488_519
            .saturating_add(Weight::from_parts(217_870_134, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 114_911_000 picoseconds.
        Weight::from_parts(104_498_766, 0)
            // Standard Error: 1_026
            .saturating_add(Weight::from_parts(483_810, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_932_000 picoseconds.
        Weight::from_parts(102_081_372, 0)
            // Standard Error: 1_209
            .saturating_add(Weight::from_parts(488_334, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_148_000 picoseconds.
        Weight::from_parts(144_750_049, 0)
            // Standard Error: 429_315
            .saturating_add(Weight::from_parts(131_289_752, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 109_069_000 picoseconds.
        Weight::from_parts(111_278_000, 0)
            // Standard Error: 2_429
            .saturating_add(Weight::from_parts(679_580, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 115_992_000 picoseconds.
        Weight::from_parts(104_484_181, 0)
            // Standard Error: 924
            .saturating_add(Weight::from_parts(487_903, 0).saturating_mul(n.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_181_000 picoseconds.
        Weight::from_parts(101_489_832, 0)
            // Standard Error: 1_185
            .saturating_add(Weight::from_parts(489_003, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_388_000 picoseconds.
        Weight::from_parts(90_628_272, 0)
            // Standard Error: 241_895
            .saturating_add(Weight::from_parts(80_053_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_363_000 picoseconds.
        Weight::from_parts(92_162_352, 0)
            // Standard Error: 314_463
            .saturating_add(Weight::from_parts(78_800_286, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_936_000 picoseconds.
        Weight::from_parts(89_390_999, 0)
            // Standard Error: 349_987
            .saturating_add(Weight::from_parts(83_132_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 565_519_000 picoseconds.
        Weight::from_parts(580_848_281, 0)
            // Standard Error: 393_637
            .saturating_add(Weight::from_parts(105_390_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 584_541_000 picoseconds.
        Weight::from_parts(619_408_777, 0)
            // Standard Error: 1_715
            .saturating_add(Weight::from_parts(110_174, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_472_000 picoseconds.
        Weight::from_parts(2_366_765_174, 0)
            // Standard Error: 450_617
            .saturating_add(Weight::from_parts(126_679_589, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_412_676_000 picoseconds.
        Weight::from_parts(2_269_571_280, 0)
            // Standard Error: 14_334
            .saturating_add(Weight::from_parts(12_340_809, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_485_000 picoseconds.
        Weight::from_parts(122_012_469, 0)
            // Standard Error: 397_788
            .saturating_add(Weight::from_parts(102_615_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 160_900_000 picoseconds.
        Weight::from_parts(163_653_000, 0)
            // Standard Error: 53_369
            .saturating_add(Weight::from_parts(30_430_265, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_997_000 picoseconds.
        Weight::from_parts(91_692_792, 0)
            // Standard Error: 303_701
            .saturating_add(Weight::from_parts(78_191_086, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 144_900_000 picoseconds.
        Weight::from_parts(232_609_280, 0)
            // Standard Error: 399_518
            .saturating_add(Weight::from_parts(134_791_627, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_229_000 picoseconds.
        Weight::from_parts(172_796_927, 0)
            // Standard Error: 426_983
            .saturating_add(Weight::from_parts(322_538_662, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_796_283_000 picoseconds.
        Weight::from_parts(52_856_932_000, 0)
            // Standard Error: 319_629
            .saturating_add(Weight::from_parts(8_350_715, 0).saturating_mul(p.into()))
            // Standard Error: 319_614
            .saturating_add(Weight::from_parts(181_173_152, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_225_000 picoseconds.
        Weight::from_parts(165_938_086, 0)
            // Standard Error: 375_037
            .saturating_add(Weight::from_parts(329_093_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 49_921_712_000 picoseconds.
        Weight::from_parts(49_985_776_000, 0)
            // Standard Error: 302_570
            .saturating_add(Weight::from_parts(9_442_995, 0).saturating_mul(p.into()))
            // Standard Error: 302_555
            .saturating_add(Weight::from_parts(181_874_861, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_158_000 picoseconds.
        Weight::from_parts(110_245_538, 0)
            // Standard Error: 28_669
            .saturating_add(Weight::from_parts(1_774_366, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 91_594_000 picoseconds.
        Weight::from_parts(131_659_366, 1131)
            // Standard Error: 17_381
            .saturating_add(Weight::from_parts(14_523_041, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_922_000 picoseconds.
        Weight::from_parts(94_897_000, 1131)
            // Standard Error: 34_843
            .saturating_add(Weight::from_parts(41_827_659, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 7_473_917_000 picoseconds.
        Weight::from_parts(7_419_217_673, 5069931)
            // Standard Error: 72_370
            .saturating_add(Weight::from_parts(41_244_424, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 93_816_000 picoseconds.
        Weight::from_parts(97_015_000, 1939)
            // Standard Error: 49_263
            .saturating_add(Weight::from_parts(54_820_812, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 103_925_000 picoseconds.
        Weight::from_parts(108_901_208, 1131)
            // Standard Error: 75_458
            .saturating_add(Weight::from_parts(42_819_430, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 603_461_000 picoseconds.
        Weight::from_parts(609_663_702, 1496)
            // Standard Error: 130_843
            .saturating_add(Weight::from_parts(48_053_563, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_065_846_000 picoseconds.
        Weight::from_parts(1_081_637_554, 317931)
            // Standard Error: 190_175
            .saturating_add(Weight::from_parts(48_782_076, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_707_000 picoseconds.
        Weight::from_parts(9_567_226, 0)
            // Standard Error: 253_530
            .saturating_add(Weight::from_parts(72_658_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_441_788_000 picoseconds.
        Weight::from_parts(4_015_824_269, 0)
            // Standard Error: 88_889
            .saturating_add(Weight::from_parts(6_159_028, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_444_047_000 picoseconds.
        Weight::from_parts(4_066_569_210, 0)
            // Standard Error: 85_042
            .saturating_add(Weight::from_parts(5_854_100, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_627_366_000 picoseconds.
        Weight::from_parts(11_380_309_623, 0)
            // Standard Error: 150_067
            .saturating_add(Weight::from_parts(10_299_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_024_055_000 picoseconds.
        Weight::from_parts(11_033_908_079, 0)
            // Standard Error: 160_760
            .saturating_add(Weight::from_parts(8_595_938, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_338_000 picoseconds.
        Weight::from_parts(2_437_000, 0)
            // Standard Error: 9_433
            .saturating_add(Weight::from_parts(3_787_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_453_000 picoseconds.
        Weight::from_parts(2_533_000, 0)
            // Standard Error: 5_336
            .saturating_add(Weight::from_parts(3_028_776, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_280_000 picoseconds.
        Weight::from_parts(3_490_508, 0)
            // Standard Error: 946
            .saturating_add(Weight::from_parts(1_562_372, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_368_000 picoseconds.
        Weight::from_parts(2_394_000, 0)
            // Standard Error: 9_240
            .saturating_add(Weight::from_parts(2_910_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_457_000 picoseconds.
        Weight::from_parts(2_526_000, 0)
            // Standard Error: 6_350
            .saturating_add(Weight::from_parts(5_307_124, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_812_000 picoseconds.
        Weight::from_parts(7_468_072, 0)
            // Standard Error: 2_003
            .saturating_add(Weight::from_parts(95_495, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_448_000 picoseconds.
        Weight::from_parts(4_082_196, 0)
            // Standard Error: 5_596
            .saturating_add(Weight::from_parts(2_567_916, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_567_916 -
            2_402_985, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_362_000 picoseconds.
        Weight::from_parts(4_019_053, 0)
            // Standard Error: 12_148
            .saturating_add(Weight::from_parts(2_402_985, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_768_000 picoseconds.
        Weight::from_parts(12_009_440, 0)
            // Standard Error: 25_506
            .saturating_add(Weight::from_parts(9_923_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_634_000 picoseconds.
        Weight::from_parts(12_825_000, 0)
            // Standard Error: 8_148
            .saturating_add(Weight::from_parts(1_044_503, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_391_000 picoseconds.
        Weight::from_parts(5_731_096, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_854_000 picoseconds.
        Weight::from_parts(5_311_261, 0)
            // Standard Error: 2_798
            .saturating_add(Weight::from_parts(390_457, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_948_000 picoseconds.
        Weight::from_parts(4_397_769, 0)
            // Standard Error: 5_057
            .saturating_add(Weight::from_parts(930_247, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_959_000 picoseconds.
        Weight::from_parts(3_982_836, 0)
            // Standard Error: 5_019
            .saturating_add(Weight::from_parts(1_023_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_427_000 picoseconds.
        Weight::from_parts(2_896_156, 0)
            // Standard Error: 6_951
            .saturating_add(Weight::from_parts(802_689, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_462_000 picoseconds.
        Weight::from_parts(426_469, 0)
            // Standard Error: 10_537
            .saturating_add(Weight::from_parts(1_494_232, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_457_000 picoseconds.
        Weight::from_parts(3_895_728, 0)
            // Standard Error: 11_712
            .saturating_add(Weight::from_parts(6_886_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_329_000 picoseconds.
        Weight::from_parts(2_446_000, 0)
            // Standard Error: 7_863
            .saturating_add(Weight::from_parts(3_373_960, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_356_000 picoseconds.
        Weight::from_parts(2_403_000, 0)
            // Standard Error: 7_062
            .saturating_add(Weight::from_parts(3_099_699, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_414_000 picoseconds.
        Weight::from_parts(2_447_000, 0)
            // Standard Error: 9_233
            .saturating_add(Weight::from_parts(3_062_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_354_000 picoseconds.
        Weight::from_parts(2_439_000, 0)
            // Standard Error: 5_385
            .saturating_add(Weight::from_parts(2_634_958, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_364_000 picoseconds.
        Weight::from_parts(78_370, 0)
            // Standard Error: 5_836
            .saturating_add(Weight::from_parts(644_160, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_313_000 picoseconds.
        Weight::from_parts(1_560_627, 0)
            // Standard Error: 3_446
            .saturating_add(Weight::from_parts(401_278, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_397_000 picoseconds.
        Weight::from_parts(2_470_000, 0)
            // Standard Error: 13_417
            .saturating_add(Weight::from_parts(1_923_096, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(2_474_000, 0)
            // Standard Error: 7_779
            .saturating_add(Weight::from_parts(1_116_387, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_367_000 picoseconds.
        Weight::from_parts(958_713, 0)
            // Standard Error: 3_953
            .saturating_add(Weight::from_parts(425_012, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_340_000 picoseconds.
        Weight::from_parts(1_210_342, 0)
            // Standard Error: 4_008
            .saturating_add(Weight::from_parts(405_027, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_364_000 picoseconds.
        Weight::from_parts(2_412_000, 0)
            // Standard Error: 3_850
            .saturating_add(Weight::from_parts(531_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_383_000 picoseconds.
        Weight::from_parts(784_532, 0)
            // Standard Error: 6_069
            .saturating_add(Weight::from_parts(555_216, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(1_161_421, 0)
            // Standard Error: 4_039
            .saturating_add(Weight::from_parts(484_763, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_349_000 picoseconds.
        Weight::from_parts(1_691_620, 0)
            // Standard Error: 2_981
            .saturating_add(Weight::from_parts(348_760, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_515_000 picoseconds.
        Weight::from_parts(2_924_119, 0)
            // Standard Error: 1_669
            .saturating_add(Weight::from_parts(157_895, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_991_592, 0)
            // Standard Error: 1_832
            .saturating_add(Weight::from_parts(165_974, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_372_000 picoseconds.
        Weight::from_parts(2_393_000, 0)
            // Standard Error: 11_615
            .saturating_add(Weight::from_parts(1_881_514, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_373_000 picoseconds.
        Weight::from_parts(2_407_000, 0)
            // Standard Error: 6_569
            .saturating_add(Weight::from_parts(1_113_971, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(2_360_000, 0)
            // Standard Error: 13_054
            .saturating_add(Weight::from_parts(1_818_386, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_410_000 picoseconds.
        Weight::from_parts(2_475_000, 0)
            // Standard Error: 6_899
            .saturating_add(Weight::from_parts(1_114_381, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_348_000 picoseconds.
        Weight::from_parts(2_420_000, 0)
            // Standard Error: 13_464
            .saturating_add(Weight::from_parts(1_878_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_337_000 picoseconds.
        Weight::from_parts(2_365_000, 0)
            // Standard Error: 7_739
            .saturating_add(Weight::from_parts(1_119_495, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_307_000 picoseconds.
        Weight::from_parts(2_421_000, 0)
            // Standard Error: 12_467
            .saturating_add(Weight::from_parts(1_861_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_301_000 picoseconds.
        Weight::from_parts(2_412_000, 0)
            // Standard Error: 6_899
            .saturating_add(Weight::from_parts(1_092_400, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_301_000 picoseconds.
        Weight::from_parts(2_367_000, 0)
            // Standard Error: 12_879
            .saturating_add(Weight::from_parts(1_884_396, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_331_000 picoseconds.
        Weight::from_parts(2_429_000, 0)
            // Standard Error: 8_894
            .saturating_add(Weight::from_parts(1_169_885, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_294_000 picoseconds.
        Weight::from_parts(2_357_000, 0)
            // Standard Error: 13_940
            .saturating_add(Weight::from_parts(1_914_631, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_375_000 picoseconds.
        Weight::from_parts(2_459_000, 0)
            // Standard Error: 8_402
            .saturating_add(Weight::from_parts(1_176_854, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_418_000, 0)
            // Standard Error: 10_611
            .saturating_add(Weight::from_parts(1_872_866, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_451_000, 0)
            // Standard Error: 8_844
            .saturating_add(Weight::from_parts(1_196_259, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_415_000 picoseconds.
        Weight::from_parts(2_475_000, 0)
            // Standard Error: 13_149
            .saturating_add(Weight::from_parts(1_951_092, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_349_000 picoseconds.
        Weight::from_parts(2_426_000, 0)
            // Standard Error: 11_494
            .saturating_add(Weight::from_parts(1_149_239, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_370_000 picoseconds.
        Weight::from_parts(2_432_000, 0)
            // Standard Error: 10_649
            .saturating_add(Weight::from_parts(1_844_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_322_000 picoseconds.
        Weight::from_parts(2_404_000, 0)
            // Standard Error: 7_953
            .saturating_add(Weight::from_parts(1_133_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_420_000, 0)
            // Standard Error: 11_413
            .saturating_add(Weight::from_parts(1_992_080, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_323_000 picoseconds.
        Weight::from_parts(2_385_000, 0)
            // Standard Error: 8_279
            .saturating_add(Weight::from_parts(1_189_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_298_000 picoseconds.
        Weight::from_parts(2_350_000, 0)
            // Standard Error: 10_140
            .saturating_add(Weight::from_parts(1_326_733, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_313_000 picoseconds.
        Weight::from_parts(2_371_000, 0)
            // Standard Error: 4_037
            .saturating_add(Weight::from_parts(637_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_344_000 picoseconds.
        Weight::from_parts(2_373_000, 0)
            // Standard Error: 10_199
            .saturating_add(Weight::from_parts(1_298_682, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_389_000 picoseconds.
        Weight::from_parts(2_466_000, 0)
            // Standard Error: 4_582
            .saturating_add(Weight::from_parts(636_828, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(2_463_000, 0)
            // Standard Error: 12_897
            .saturating_add(Weight::from_parts(1_846_970, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(2_417_000, 0)
            // Standard Error: 9_981
            .saturating_add(Weight::from_parts(1_223_793, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_312_000 picoseconds.
        Weight::from_parts(2_393_000, 0)
            // Standard Error: 10_103
            .saturating_add(Weight::from_parts(2_741_059, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_396_000 picoseconds.
        Weight::from_parts(112_380, 0)
            // Standard Error: 10_925
            .saturating_add(Weight::from_parts(2_528_254, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(2_454_000, 0)
            // Standard Error: 10_428
            .saturating_add(Weight::from_parts(2_995_740, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_371_000 picoseconds.
        Weight::from_parts(2_130_896, 0)
            // Standard Error: 13_603
            .saturating_add(Weight::from_parts(2_381_602, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_267_000 picoseconds.
        Weight::from_parts(2_353_000, 0)
            // Standard Error: 16_019
            .saturating_add(Weight::from_parts(9_029_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_365_000 picoseconds.
        Weight::from_parts(2_433_000, 0)
            // Standard Error: 25_156
            .saturating_add(Weight::from_parts(7_213_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(5_071_167, 0)
            // Standard Error: 16_438
            .saturating_add(Weight::from_parts(2_737_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_278_000 picoseconds.
        Weight::from_parts(2_490_000, 0)
            // Standard Error: 6_075
            .saturating_add(Weight::from_parts(2_397_568, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_401_000 picoseconds.
        Weight::from_parts(2_489_000, 0)
            // Standard Error: 7_542
            .saturating_add(Weight::from_parts(1_261_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_313_000 picoseconds.
        Weight::from_parts(2_396_000, 0)
            // Standard Error: 5_257
            .saturating_add(Weight::from_parts(658_509, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_324_000 picoseconds.
        Weight::from_parts(2_405_000, 0)
            // Standard Error: 8_100
            .saturating_add(Weight::from_parts(1_243_620, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_330_000 picoseconds.
        Weight::from_parts(2_385_000, 0)
            // Standard Error: 4_018
            .saturating_add(Weight::from_parts(621_808, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_332_000 picoseconds.
        Weight::from_parts(2_395_000, 0)
            // Standard Error: 7_529
            .saturating_add(Weight::from_parts(1_224_045, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_393_000 picoseconds.
        Weight::from_parts(179_834, 0)
            // Standard Error: 5_835
            .saturating_add(Weight::from_parts(669_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_333_000, 0)
            // Standard Error: 7_311
            .saturating_add(Weight::from_parts(1_060_292, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(2_411_000, 0)
            // Standard Error: 4_306
            .saturating_add(Weight::from_parts(560_405, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_275_000 picoseconds.
        Weight::from_parts(2_393_000, 0)
            // Standard Error: 5_538
            .saturating_add(Weight::from_parts(1_020_152, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_335_000 picoseconds.
        Weight::from_parts(2_422_000, 0)
            // Standard Error: 4_558
            .saturating_add(Weight::from_parts(573_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_379_000 picoseconds.
        Weight::from_parts(2_451_000, 0)
            // Standard Error: 7_831
            .saturating_add(Weight::from_parts(1_042_480, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_321_000 picoseconds.
        Weight::from_parts(2_449_000, 0)
            // Standard Error: 3_964
            .saturating_add(Weight::from_parts(546_737, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_323_000 picoseconds.
        Weight::from_parts(2_403_000, 0)
            // Standard Error: 7_636
            .saturating_add(Weight::from_parts(1_023_360, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_336_000 picoseconds.
        Weight::from_parts(2_397_000, 0)
            // Standard Error: 4_811
            .saturating_add(Weight::from_parts(578_759, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_430_000 picoseconds.
        Weight::from_parts(2_479_000, 0)
            // Standard Error: 6_737
            .saturating_add(Weight::from_parts(1_088_901, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_304_000 picoseconds.
        Weight::from_parts(2_364_000, 0)
            // Standard Error: 3_944
            .saturating_add(Weight::from_parts(569_246, 0).saturating_mul(r.into()))
    }
    fn tasks_remove_resume_session() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `352`
        //  Estimated: `4169`
        // Minimum execution time: 5_921_000 picoseconds.
        Weight::from_parts(6_104_000, 4169)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    fn tasks_remove_gas_reservation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1039`
        //  Estimated: `23781`
        // Minimum execution time: 61_062_000 picoseconds.
        Weight::from_parts(62_680_000, 23781)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_send_user_message_to_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `820`
        //  Estimated: `21750`
        // Minimum execution time: 46_305_000 picoseconds.
        Weight::from_parts(47_371_000, 21750)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn tasks_send_user_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `942`
        //  Estimated: `34143`
        // Minimum execution time: 75_202_000 picoseconds.
        Weight::from_parts(76_741_000, 34143)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn tasks_send_dispatch() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `627`
        //  Estimated: `20101`
        // Minimum execution time: 31_345_000 picoseconds.
        Weight::from_parts(32_397_000, 20101)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `908`
        //  Estimated: `26160`
        // Minimum execution time: 46_945_000 picoseconds.
        Weight::from_parts(47_662_000, 26160)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn tasks_wake_message_no_wake() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3545`
        // Minimum execution time: 3_774_000 picoseconds.
        Weight::from_parts(3_895_000, 3545)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
    fn tasks_remove_from_waitlist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1558`
        //  Estimated: `57552`
        // Minimum execution time: 108_473_000 picoseconds.
        Weight::from_parts(111_694_000, 57552)
            .saturating_add(RocksDbWeight::get().reads(16_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    fn tasks_remove_from_mailbox() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1264`
        //  Estimated: `46350`
        // Minimum execution time: 90_424_000 picoseconds.
        Weight::from_parts(91_903_000, 46350)
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(13_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2236 + c * (16400 ±0)`
        //  Estimated: `19543 + c * (84480 ±0)`
        // Minimum execution time: 28_903_000 picoseconds.
        Weight::from_parts(29_338_000, 19543)
            // Standard Error: 76_744
            .saturating_add(Weight::from_parts(38_940_231, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 84480).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn tasks_pause_program_uninited(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3061 + c * (42 ±0)`
        //  Estimated: `59827 + c * (2947 ±0)`
        // Minimum execution time: 86_931_000 picoseconds.
        Weight::from_parts(73_105_603, 59827)
            // Standard Error: 2_094
            .saturating_add(Weight::from_parts(1_048_872, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 2947).saturating_mul(c.into()))
    }
}
